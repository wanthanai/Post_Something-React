[{"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\index.js":"1","C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\App.js":"2","C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Navbar.js":"3","C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Input.js":"4","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\index.js":"5","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\App.js":"6","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Navbar.js":"7","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Input.js":"8"},{"size":538,"mtime":1611304608493,"results":"9","hashOfConfig":"10"},{"size":21203,"mtime":1611588439834,"results":"11","hashOfConfig":"10"},{"size":8774,"mtime":1611042628948,"results":"12","hashOfConfig":"10"},{"size":4967,"mtime":1611588274281,"results":"13","hashOfConfig":"10"},{"size":538,"mtime":1611679490283,"results":"14","hashOfConfig":"15"},{"size":21728,"mtime":1611679490242,"results":"16","hashOfConfig":"15"},{"size":9170,"mtime":1611679490264,"results":"17","hashOfConfig":"15"},{"size":5079,"mtime":1611679490257,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o8fl99",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1si9i7j",{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\index.js",[],"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\App.js",["38","39"],"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Navbar.js",[],"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Input.js",["40"],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\index.js",[],["41","42"],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\App.js",["43","44"],"//! Import\n// React \nimport React, { useRef, useState, useEffect } from \"react\";\n// Axios\n// import { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from 'react-axios'\nimport axios from 'axios';\n// Style\nimport \"./App.css\";\nimport feelingJSON from './feeling';\n// Component\nimport Navbar from \"./component/Navbar\";\nimport Input from \"./component/Input\";\n// Icon\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport { GrEmoji } from \"react-icons/gr\";\nimport { BsImages } from \"react-icons/bs\";\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\nimport { IoClose, IoArrowBackOutline } from \"react-icons/io5\";\nimport { BiSearchAlt } from \"react-icons/bi\";\n// Textarea auto-resize\nimport TextareaAutosize from \"react-textarea-autosize\";\n// Emoji-picker\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n// Tooltip\nimport ReactTooltip from 'react-tooltip';\n// Images uploading\nimport ImageUploading from 'react-images-uploading';\n// Alert Message\nimport { useAlert } from \"react-alert\";\n\n\n\n\n//! Variable\n// Images Uploading\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\n\n\n\n//! Function Component\nexport default function App() {\n    //! State\n    // State Image Profile\n    const [inputProfileImg, setInputProfileImg] = useState(null);\n    const [urlShowImage, setUrlShowImage] = useState(\"\");\n    // State Image Input Post\n    const [images, setImages] = useState([]);\n    const maxNumber = 69;\n    // State Name\n    const [inputProfileName, setInputProfileName] = useState(\"\");\n    // State Text Input Post\n    const [fontSizeInput, setFontSizeInput] = useState(\"big\");\n    const [textInputPost, setTextInputPost] = useState(\"\");\n    // State Emoji Toggle\n    const [windowEmoji, setWindowEmoji] = useState(false);\n    // State Window Input Post Toggle\n    const [windowInputPost, setWindowInputPost] = useState(false);\n    // State Window Remove All Images List\n    const [windowRemoveAllImg, setWindowRemoveAllImg] = useState(false);\n    // State Slide \n    const [slideResult, setSlideResult] = useState('');\n    const [slideSize, setSlideSize] = useState('');\n    // State Feeling\n    const [feelingItems, setFeelingItems] = useState([]);\n    // Feeling Status\n    const [feelingStatus, setFeelingStatus] = useState('?');\n    // Search Term\n    const [searchTerm, setSearchTerm] = useState('');\n    // Do not open Window Input Post\n    const [statusInputMain, setStatusInputMain] = useState(false);\n\n\n\n    //! useAlert();\n    const alert = useAlert();\n\n\n    //! useRef\n    const inputPostRef = useRef(null);\n    const slideItem = useRef(null);\n\n    //! useEffect\n    useEffect(() => {});\n\n\n    \n\n\n    //! Function Another\n    //* 1. get info from Navbar\n    const getInfoNavbar = (imgURLtoInput, profileName) => {\n      setInputProfileImg(imgURLtoInput);\n      setInputProfileName(profileName);\n    };\n\n    //* 2. onClick show image\n    const onClickShowImage = (urlImg) => {\n      setUrlShowImage(urlImg);\n    };\n  \n    //* 3. onClick close image\n    const onClickCloseImage = () => {\n      setUrlShowImage(\"\");\n    };\n  \n    //* 4. Change font size input Post\n    const rowCount = (evt) => {\n      setTextInputPost(evt.target.value);\n    \n      let row = evt.target.offsetHeight;\n    //   console.log(evt.target.offsetHeight);\n    \n      if (fontSizeInput === \"big\") { //big font\n        if (row > 172) {\n          setFontSizeInput(\"small\");\n        } \n      }\n      if (fontSizeInput === \"small\") { //small font\n        if (evt.target.value.length === 0) {\n          setFontSizeInput(\"big\");\n        } \n      }\n    };\n  \n    //* 5. Add Emoji\n    const addEmoji = (e) => {\n      // console.log(e);\n    \n      // emoji concat text\n      setTextInputPost(`${textInputPost}${e.native}`);\n    };\n  \n    //* 6. Emoji Toggle\n    const toggleEmoji = () => {\n      if (!windowEmoji) {\n        setWindowEmoji(true);\n      } else {\n        setWindowEmoji(false);\n      }\n    };\n  \n    //* 7. Get Status and Open Window Input Post\n    const getWindowInput = (inputProfileName) => {\n      //   console.log(statusWindowInput);\n      if (inputProfileName !== \"\") setWindowInputPost(true);\n      else {\n        alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        setWindowInputPost(false);\n      } \n    };\n  \n    //* 8. Close Input Post\n    const closeInputPost = () => {\n      if (windowInputPost === true) {\n        setWindowInputPost(false);\n      } \n    };\n  \n    //* 9. handle image change  \n    // const handleImageChange = (e) => { //! ไม่ใช้เเล้ว เพราะมีข้อจำกัดในด้านการอัพโหลดที่ไม่สามารถอัพโหลดรูปซ้ำได้\n    //     const selected = e.target.files[0];\n    //     const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\n\n    //     // matching types\n    //     if(selected && ALLOWED_TYPES.includes(selected.type)) {\n    //         let reader = new FileReader(); // constructor method or object property\n    //         reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\n    //         reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\n    //             let imgURL = reader.result;\n    //             let result = {imgURL, id};\n\n    //             setInputPostImgURL([result, ...inputPostImgURL]);\n                \n    //             id++\n    //         }\n    //     } else { // if they don't match, they will be set error.\n    //         console.log('file not supported.');            \n    //     }\n    // }\n\n    //* 10. Evolution handle image change #1\n    const handleImageChange = (imageList, addUpdateIndex) => {\n        // console.log(imageList, addUpdateIndex);\n        setImages(imageList, addUpdateIndex);\n    }; \n\n\n    //* 11 Slide Next\n    const slideRightFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setFeelingItems(feelingJSON.feelings);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('right');\n        setWindowEmoji(false);\n    }\n\n    //* 12. Slide Previous\n    const slideLeftFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('left');\n    }\n\n    //* 13. Get Status Upload Image\n    const getUploadImage = (value, statusBool) => {\n        setImages(value, images);\n        if(inputProfileName === '') {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        } else {\n            setWindowInputPost(statusBool);\n        }\n        \n    }\n    //* 14. Get Status Feeling\n    const getStatusFeeling = async(statusBool) => {\n        if(statusBool === true && inputProfileName !== '') {\n            await setWindowInputPost(statusBool);\n            slideRightFunc();\n        } else {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        }\n    }\n\n    //* 15. Do not open Window Input Post\n    const getStatusInputPost = (statusBool) => {\n        if(statusBool === true) {\n            setTextInputPost('');\n            setStatusInputMain(statusBool);\n        } else {\n            setStatusInputMain(false);\n        }\n    } \n\n\n\n\n    //! Small Component\n    //* 1. Show background and image\n    const showBackgroundAndImage = (\n      <div\n        onClick={onClickCloseImage}\n        className={\n          urlShowImage === \"\" ? \"main_show_image close\" : \"main_show_image show\"\n        }\n      >\n        '{/* show image */}\n        <div\n          className=\"show_image\"\n          style={{\n            background:\n              urlShowImage !== null\n                ? `url('${urlShowImage}') no-repeat center/contain`\n                : \"#fff\",\n          }}\n        ></div>\n      </div>\n    );\n        \n    //* 2.1 Emoji Toggle\n    const emojiToggle = (\n        <>\n            <GrEmoji \n                onClick={toggleEmoji} \n                className=\"emoji_toggle\" \n                data-tip=\"emoji\" \n                data-delay-show=\"300\" \n                data-effect=\"solid\" \n                data-type=\"light\" \n                data-border=\"true\"\n                data-text-color=\"#000\"\n                data-background-color=\"rgb(209, 208, 208, 1)\"\n                data-border-color=\"rgb(109, 109, 109)\"\n            />\n            <ReactTooltip />\n        </>\n    );\n    \n    //* 2.2 Emoji Picker\n    const emojiPicker = (\n      <span\n        className={\n          !windowEmoji\n            ? \"emoji_picker_wrapper close\"\n            : \"emoji_picker_wrapper show\"\n        }\n      >\n        <Picker className=\"emoji_picker\" onSelect={addEmoji} />\n      </span>\n    );\n\n\n    //* 2. Show Input Post\n    const showInputPost = (\n        //! show input post \n        <div className={!windowInputPost ? \"main_show_input close\" : \"main_show_input show\"\n        }>  \n\n            {/*//! emoji picker */}\n            <div className=\"emoji_picker_container\">\n                {emojiPicker} {/* small component */}\n            </div>\n\n            {/* //! Slide / main show input wrapper */}\n            <div className=\"main_show_input_wrapper\"\n                // Balance of height \n                style={slideResult === 'right' ? {height: '329px'} : {height: 'auto'}}\n            >\n\n                {/*//! Slide Item */}\n                <div \n                    className=\"slide_item\" \n                    ref={slideItem}\n                    style={\n                        slideResult === 'right' \n                        ? {transform: `translateX(-${slideSize+2}px)`}\n                        : {transform: `translateX(-0px)`}\n                    }\n                    >\n\n                    {/* input header */}\n                    <div className=\"show_input_header\">\n                        {/* header text */}\n                            <p>Create Post</p>\n                        {/* btn close */}\n                        <div className=\"btn_close_input\">\n                            {/* close input post */}\n                            <AiFillCloseCircle\n                                onClick={closeInputPost}\n                                className=\"icon_close_input\"\n                            />\n                        </div>\n                    </div>\n\n                    {/* feeling status */}\n                    <div className=\"feeling_status\">\n                        <p>{inputProfileName} feeling : <span>{feelingStatus}</span></p>\n                    </div> \n\n                    {/* input main */}\n                    <div className=\"show_input_main\">\n                        <TextareaAutosize\n                            minRows={6}\n                            maxRows={15}\n                            className=\"input_textarea\"\n                            placeholder={\n                              !inputProfileName\n                                ? \"thinking ?\"\n                                : `thinking ? ${inputProfileName}`\n                            }\n                            ref={inputPostRef}\n                            onChange={rowCount}\n                            value={textInputPost}\n                            style={{\n                              fontSize: fontSizeInput === \"big\" ? \"1.3em\" : \"0.9em\",\n                            }}\n                        />\n                        {/*//! emoji toggle */}\n                        {emojiToggle} {/* small component */}\n                    </div>\n                    {/*//! Show image Input Post */}\n                    <ImageUploading\n                        multiple\n                        value={images}\n                        onChange={handleImageChange}\n                        maxNumber={maxNumber}\n                        dataURLKey=\"data_url\"\n                        acceptType={acceptType}\n                        maxFileSize={4194304}\n                    >\n                        {({\n                            imageList,\n                            onImageUpload,\n                            onImageRemoveAll,\n                            onImageUpdate,\n                            onImageRemove,\n                            isDragging,\n                            dragProps,\n                        }) => (\n                            <>\n                                <ul className=\"image_input_post\">\n                                    {images.length <= 4 \n                                        ? \n                                        images.map((image, index) => \n                                            <li \n                                                className=\"li_images\"\n                                                key={index} \n                                                id={index} \n                                                style={{background: `url(${image.data_url}) no-repeat center/cover`}}\n                                            >\n                                                <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                            </li>\n                                        )\n                                        : \n                                        images.map((image, index) =>\n                                        <> \n                                            <li \n                                                className={images.length > 4 ? \"li_images checkLength nPlus5CLose\" : \"li_images\"} \n                                                key={index} \n                                                id={index} \n                                                style={{background: `url(${image.data_url}) no-repeat center/cover`}}>\n                                                    <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                            </li>\n                                            {/* image counting and remove all image list */}\n                                            <div onClick={() => setWindowRemoveAllImg(true)} className=\"images_counting\">{`+${images.length - 4}`}</div>\n                                        </>\n                                        )\n                                    }\n                                </ul>    \n                                {/*//! input addon wrapper */}\n                                <div className=\"input_addon_wrapper\">\n                                    {/* image */}\n                                    <span>\n                                        {/* button upload image */}\n                                        <BsImages \n                                            className=\"input_image\"\n                                            onClick={onImageUpload}\n                                            // tooltip\n                                            data-delay-show=\"300\" \n                                            data-effect=\"solid\" \n                                            data-type=\"light\" \n                                            data-tip=\"image\" \n                                            data-border=\"true\"\n                                            data-text-color=\"#000\"\n                                            data-background-color=\"rgb(209, 208, 208, 1)\"\n                                            data-border-color=\"rgb(109, 109, 109)\"\n                                        />\n                                        <ReactTooltip />\n                                    </span>\n                                    {/* feeling */}\n                                    <span>\n                                        {/* button feeling */}\n                                        <RiEmotionLaughLine \n                                            onClick={slideRightFunc}\n                                            className=\"input_feeling\" \n                                            // tootip\n                                            data-delay-show=\"300\" \n                                            data-effect=\"solid\" \n                                            data-type=\"light\" \n                                            data-tip=\"feelings\" \n                                            data-border=\"true\"\n                                            data-text-color=\"#000\"\n                                            data-background-color=\"rgb(209, 208, 208, 1)\"\n                                            data-border-color=\"rgb(109, 109, 109)\"\n                                        />\n                                        <ReactTooltip />\n                                    </span>\n                                </div>\n                                {/*//! Window Remove All Images List */}\n                                <div className={windowRemoveAllImg !== false ? \"removeALl_wrapper show\" : \"removeALl_wrapper close\"}>\n                                    <button onClick={() => { \n                                        onImageRemoveAll() \n                                        setWindowRemoveAllImg(false) \n                                    }}>Remove All</button>\n                                    <button onClick={() => setWindowRemoveAllImg(false)}>cancle</button>\n                                </div>\n                                <div className={windowRemoveAllImg !== false ? \"box_removeAll show\" : \"box_removeAll close\"}></div>\n                            </>\n                        )}\n                    </ImageUploading>\n                </div>\n\n                {/*//! Slide Item */}\n                <div \n                    className=\"slide_item\"\n                    style={\n                        slideResult === 'right' \n                        ? {transform: `translateX(-${slideSize}px)`}\n                        : {transform: `translateX(${slideSize+2}px)`}\n                    }\n                >\n                    {/*//! Feeling Window Input Post */}\n                    {/* header */}\n                    <div className=\"feeling_header\">\n                        {/* Button Slide Left / Previous */}\n                        <div className=\"feeling_slide_back_wrapper\">\n                            <IoArrowBackOutline\n                                onClick={slideLeftFunc}\n                                className=\"feeling_slide_back\"\n                            />\n                        </div>\n                        {/* text header */}\n                        <p className=\"text_header\">Feelings</p>\n                    </div>\n\n                    {/* search feeling */}\n                    <div className=\"search_feeling_wrapper\">\n                        <input \n                            onChange={(e) => setSearchTerm(e.target.value)}\n                            className=\"search_feeling\" \n                            type=\"text\" \n                            placeholder=\"Search\" \n                        />\n                        <BiSearchAlt className=\"search_icon_feeling\"/>\n                    </div>\n\n                    {/* feeling items */}\n                    <ul className=\"feelings_items_wrapper\">\n                        {/* Search filter */}\n                        {feelingItems.filter((value) => {\n                            if(searchTerm === \"\") {\n                                return value;\n                            } else if (value.feeling_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                return value;\n                            } \n                        }).map((value, key) => {\n                            // console.log(value);\n                            return (\n                                <li \n                                    className=\"feeling_item\"\n                                    key={key}\n                                    onClick={() => {\n                                        setFeelingStatus(value.feeling_name)\n                                        setSlideResult('left');\n                                    }}\n                                >   \n                                    <span className=\"feeling_icon\">\n                                        <img src={value.icon} alt=\"feeling-icon\" />\n                                    </span> \n                                    {value.feeling_name}\n                                </li>\n                            )    \n                            }\n                        )}\n                    </ul>\n                </div>\n\n            </div>\n        </div>\n    )   \n    \n\n\n\n\n  //! Main Component\n  return (\n    //! App\n    <div className=\"App\">\n        {/* Navbar */}\n        <Navbar \n            getInfoNavbar={getInfoNavbar} \n            getStatusInputPost={getStatusInputPost}\n        />\n        {/* Input */}\n        <Input\n            onClickShowImage={onClickShowImage}\n            inputProfileImg={inputProfileImg}\n            inputProfileName={inputProfileName}\n            windowInputPost={windowInputPost}\n            getWindowInput={getWindowInput}\n            textInputPost={textInputPost}\n            getUploadImage={getUploadImage}\n            images={images}\n            getStatusFeeling={getStatusFeeling}  \n            statusInputMain={statusInputMain}\n        />\n        {/*//! main show background and image */}\n        {showBackgroundAndImage} {/* small component */}\n\n        {/* //! main show input */}\n        {showInputPost} {/* small component */}\n    </div>\n  );\n\n}\n","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Navbar.js",[],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Input.js",["45"],"//! Import\r\nimport React, {useState} from 'react'\r\nimport './Input.css'\r\n// PropTypes\r\nimport PropTypes from 'prop-types'\r\n// Icon \r\nimport { BsImages } from \"react-icons/bs\";\r\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\r\n// Images uploading\r\nimport ImageUploading from 'react-images-uploading';\r\n\r\n\r\n\r\n\r\n//! Variable\r\n// Images Uploading\r\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\r\nconst maxNumber = 69;\r\n\r\n\r\n//! Function Component\r\nexport default function Input({ inputProfileImg, onClickShowImage, inputProfileName, getWindowInput, textInputPost, getUploadImage, images, getStatusFeeling , statusInputMain }) {\r\n    //! State\r\n    // State Image Input Post\r\n    \r\n    \r\n\r\n\r\n    //! Function Another\r\n    //* 1.Toggle Input Post\r\n    const toggleInput = () => {\r\n        getWindowInput(inputProfileName);\r\n    }\r\n\r\n    //* 2.Handle Image Change\r\n    const handleImageChange = (imageList, addUpdateIndex) => {\r\n        // console.log(imageList, addUpdateIndex);\r\n        getUploadImage(imageList, true);\r\n    }; \r\n\r\n    //* 3.Do not open Window Input Post\r\n\r\n\r\n\r\n\r\n\r\n    //! Main Component\r\n    return(\r\n        //! Container \r\n        <div className=\"container\">\r\n            {/*//! header image */}\r\n            <div className=\"header_img\">\r\n               {/* background image  */}\r\n            </div>\r\n\r\n            {/*//! input main */}\r\n            <div className=\"input_main_wrapper\">\r\n                {/*//! main top */}\r\n                <div className=\"main_top\">\r\n\r\n                    {/* top profile */}\r\n                    <div className=\"top_profile_wrapper\">\r\n                        <div onClick={() => onClickShowImage(inputProfileImg)} className=\"top_profile\" style={{\r\n                            background: inputProfileImg !== null\r\n                            ? `url('${inputProfileImg}') no-repeat center/cover`\r\n                            : `#fff`\r\n                        }}>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* top input */}\r\n                    {textInputPost !== '' \r\n                        ?  <div onClick={toggleInput} className=\"LinesEllipsis top_input\">{textInputPost.length > 40 ? `${textInputPost}...` : `${textInputPost}`}</div>   \r\n                        : <div onClick={toggleInput} className=\"top_input\">{inputProfileName !== '' ? `What are you thinking? ${inputProfileName}` : 'What are you thinking? ...'}</div>\r\n                    }\r\n                </div>\r\n                {/*//! main bottom */}\r\n                <div className=\"main_bottom\">\r\n                    {/* bottom image */}\r\n                    <ImageUploading\r\n                        multiple\r\n                        value={images}\r\n                        onChange={handleImageChange}\r\n                        maxNumber={maxNumber}\r\n                        dataURLKey=\"data_url\"\r\n                        acceptType={acceptType}\r\n                        maxFileSize={4194304}\r\n                    >\r\n                        {({\r\n                            imageList,\r\n                            onImageUpload,\r\n                            onImageRemoveAll,\r\n                            onImageUpdate,\r\n                            onImageRemove,\r\n                            isDragging,\r\n                            dragProps,\r\n                        }) => (\r\n                            <div \r\n                                className=\"bottom_image\"\r\n                                onClick={onImageUpload}\r\n                            >\r\n                                <BsImages \r\n                                    style={{\r\n                                    marginRight: '10px',\r\n                                    color: '#45bd62',\r\n                                    fontSize: '23px'\r\n                                }}/>\r\n                                Image\r\n                            </div>    \r\n                        )}\r\n                    </ImageUploading>\r\n\r\n                    {/* bottom feeling */}\r\n                    <div \r\n                        className=\"bottom_feeling\"\r\n                        onClick={() => getStatusFeeling(true)}\r\n                    >\r\n                        <RiEmotionLaughLine \r\n                            style={{\r\n                            marginRight: '10px',\r\n                            color: '#f7b928',\r\n                            fontSize: '23px'\r\n                        }}/>\r\n                        Feeling\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nInput.propTypes = {\r\n    inputProfileImg: PropTypes.string,\r\n    onClickShowImage: PropTypes.func.isRequired,\r\n    inputProfileName: PropTypes.string.isRequired,\r\n    getWindowInput: PropTypes.func.isRequired, \r\n    textInputPost: PropTypes.string.isRequired, \r\n    getUploadImage: PropTypes.func.isRequired,\r\n    images: PropTypes.object.isRequired, \r\n    getStatusFeeling: PropTypes.func.isRequired, \r\n    statusInputMain: PropTypes.bool.isRequired\r\n}",{"ruleId":"46","severity":1,"message":"47","line":6,"column":8,"nodeType":"48","messageId":"49","endLine":6,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":487,"column":54,"nodeType":"52","messageId":"53","endLine":487,"endColumn":56},{"ruleId":"46","severity":1,"message":"54","line":2,"column":16,"nodeType":"48","messageId":"49","endLine":2,"endColumn":24},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"46","severity":1,"message":"47","line":6,"column":8,"nodeType":"48","messageId":"49","endLine":6,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":500,"column":54,"nodeType":"52","messageId":"53","endLine":500,"endColumn":56},{"ruleId":"46","severity":1,"message":"54","line":2,"column":16,"nodeType":"48","messageId":"49","endLine":2,"endColumn":24},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useState' is defined but never used.","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-global-assign","no-unsafe-negation"]