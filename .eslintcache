[{"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\index.js":"1","C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\App.js":"2","C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Navbar.js":"3","C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Input.js":"4","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\index.js":"5","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\App.js":"6","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Navbar.js":"7","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Input.js":"8","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\PostHasImg.js":"9","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\actions\\index.js":"10","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\reducers\\deleteImgOne.js":"11"},{"size":538,"mtime":1611304608493,"results":"12","hashOfConfig":"13"},{"size":21203,"mtime":1611588439834,"results":"14","hashOfConfig":"13"},{"size":8774,"mtime":1611042628948,"results":"15","hashOfConfig":"13"},{"size":4967,"mtime":1611588274281,"results":"16","hashOfConfig":"13"},{"size":938,"mtime":1613747163257,"results":"17","hashOfConfig":"18"},{"size":51612,"mtime":1614779224529,"results":"19","hashOfConfig":"18"},{"size":9869,"mtime":1614687727471,"results":"20","hashOfConfig":"18"},{"size":5269,"mtime":1614687714879,"results":"21","hashOfConfig":"18"},{"size":30933,"mtime":1614687740128,"results":"22","hashOfConfig":"18"},{"size":17336,"mtime":1614779160264,"results":"23","hashOfConfig":"18"},{"size":12863,"mtime":1614779058989,"results":"24","hashOfConfig":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o8fl99",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"xg0l9t",{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\index.js",[],"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\App.js",["50","51"],"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Navbar.js",[],"C:\\Users\\prode\\Desktop\\test\\test-facebook\\src\\component\\Input.js",["52"],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\index.js",[],["53","54"],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\App.js",["55","56","57","58","59","60","61","62"],"//! Import\n// React \nimport React, { useRef, useState, useEffect } from \"react\";\n// Style\nimport \"./App.css\";\nimport \"./component/responsive.css\"\nimport feelingJSON from './feeling';\n// Component\nimport Navbar from \"./component/Navbar\";\nimport Input from \"./component/Input\";\nimport PostHasImg from \"./component/PostHasImg\"\n// Icon\nimport { AiFillCloseCircle, AiOutlineLeft, AiOutlineRight } from \"react-icons/ai\";\nimport { GrEmoji } from \"react-icons/gr\";\nimport { BsImages } from \"react-icons/bs\";\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\nimport { IoClose, IoArrowBackOutline, IoConstructOutline } from \"react-icons/io5\";\nimport { BiSearchAlt } from \"react-icons/bi\";\nimport { HiDotsHorizontal } from \"react-icons/hi\";\n// Textarea auto-resize\nimport TextareaAutosize from \"react-textarea-autosize\";\n// Emoji-picker\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n// Images uploading\nimport ImageUploading from 'react-images-uploading';\n// Alert Message\nimport { useAlert } from \"react-alert\";\nimport { any, func } from \"prop-types\";\n// Redux\nimport { connect } from 'react-redux';\n// Redux Action\nimport \n{   thunk_action_deleteOne, thunk_action_deleteLastImg, toggle_window_delete_img, increment_index_list_images, decrement_index_list_images, set_index_list_images,\n    set_list_images_post, thunk_action_oneImageLeft, toggle_window_list_imagesPost, thunk_action_deleteAll, thunk_action_setPosts, set_text_input_post, set_images_posts,\n    toggle_window_input_post, set_count_text_input_post, set_feeling_status, set_idPost_showing, set_feeling_icon, set_status_post_button, toggle_window_option_post,\n    toggle_window_navbar, thunk_action_deletePhoto, thunk_action_deletePost, thunk_action_editPost, toggle_window_editPost, thunk_action_save_editPost, toggle_window_removeAllimg,\n    toggle_window_emoji\n} \nfrom './actions/index';\n\n\n\n//! Variable\n// Images Uploading\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\nconst maxNumber = 69;\n\n// Id Post\nlet idPost = 1;\n\n\n\n//! Function Component\nfunction App(props) {\n    //! State\n    // State Image Profile\n    const [inputProfileImg, setInputProfileImg] = useState(null);\n    const [urlShowImage, setUrlShowImage] = useState(\"\");\n    // State Name\n    const [inputProfileName, setInputProfileName] = useState(\"\");\n    // State Text Input Post\n    const [fontSizeInput, setFontSizeInput] = useState(\"big\");\n    // State Slide \n    const [slideResult, setSlideResult] = useState('');\n    const [slideSize, setSlideSize] = useState('');\n    const [slideSizeEditPost, setSlideSizeEditPost] = useState('');\n    const [slideResultEditPost, setSlideResultEditPost] = useState('');\n    // State Feeling\n    const [feelingItems, setFeelingItems] = useState([]);\n    // Search Term\n    const [searchTerm, setSearchTerm] = useState('');\n\n\n    //! useAlert();\n    const alert = useAlert();\n\n    //! useRef\n    const inputPostRef = useRef(null);\n    const slideItem = useRef(null);\n    const slideItemEditPost = useRef(null);\n\n    //! useEffect\n    useEffect(() => {});\n\n\n    //! Function Another\n    //* 1. get info from Navbar\n    const getInfoNavbar = (imgURLtoInput, profileName) => {\n      setInputProfileImg(imgURLtoInput);\n      setInputProfileName(profileName);\n    };\n\n    //* 2. onClick show image\n    const onClickShowImage = (urlImg) => {\n      setUrlShowImage(urlImg);\n      // close window option post\n      props.dispatch(toggle_window_option_post('close', 0));\n      // clse window Navbar\n      props.dispatch(toggle_window_navbar('close'));\n      // html overflow hidden\n      document.querySelector('html').style.overflow = 'hidden';\n    };\n  \n    //* 3. onClick close image\n    const onClickCloseImage = () => {\n      setUrlShowImage(\"\");\n        // html overflow unset\n        document.querySelector('html').style.overflow = 'unset';\n    };\n\n    //* 4. Change font size input Post\n    const rowCount = (evt) => {\n        props.dispatch(set_text_input_post(evt.target.value));\n        // console.log(evt.target.value);\n        \n        // count number of characters without spaces and enters\n        let myStringInputPost = evt.target.value;\n        let enterCount = (myStringInputPost.match(/\\n/g) || []).length; \n        let spaceCount = (myStringInputPost.split(\" \").length - 1);\n        // console.log(`Enter Count:- ${enterCount}`);\n        // console.log(`Space Count:- ${spaceCount}`);\n        // console.log(`total count:- ${(myStringInputPost.length - spaceCount) - enterCount}`);\n        props.dispatch(set_count_text_input_post((myStringInputPost.length - spaceCount)- enterCount));\n\n        let row = evt.target.offsetHeight;\n        //   console.log(evt.target.offsetHeight);\n        \n        if (fontSizeInput === \"big\") { //big font\n          if (row > 172) {\n            setFontSizeInput(\"small\");\n          } \n        }\n        if (fontSizeInput === \"small\") { //small font\n          if (evt.target.value.length === 0) {\n            setFontSizeInput(\"big\");\n          } \n        }\n        \n        // set status post button\n        if(evt.target.value.length !== 0) {\n            props.dispatch(set_status_post_button(true));\n        } else props.dispatch(set_status_post_button(false));\n\n        if(evt.target.value.length === 0) {\n            if(props.data.imagesPosts.length !== 0) {\n                props.dispatch(set_status_post_button(true));\n            } else props.dispatch(set_status_post_button(false));            \n        } \n    };\n  \n    //* 5. Add Emoji\n    const addEmoji = (e) => {\n      // console.log(e);\n    \n      // emoji concat text\n      props.dispatch(set_text_input_post(`${props.data.textInputPost}${e.native}`));\n    };\n  \n    //* 6. Emoji Toggle\n    const toggleEmoji = () => {\n        props.dispatch(toggle_window_emoji('toggle'));\n    };\n  \n    //* 7. Get Status and Open Window Input Post\n    const getWindowInput = (inputProfileName) => {\n        // set Status Post Button \n        if(props.data.imagesPosts.length !== 0) {\n            props.dispatch(set_status_post_button(true));\n        }\n        if(props.data.imagesPosts.length === 0) {\n            if(props.data.countTextInputPost !== 0) {\n                props.dispatch(set_status_post_button(true));\n            } else props.dispatch(set_status_post_button(false)); \n        } \n        \n        // alert error \n        if (inputProfileName !== \"\") {\n            props.dispatch(toggle_window_input_post(true));\n            document.querySelector('html').style.overflow = 'hidden';\n        }\n        else {\n          alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n          props.dispatch(toggle_window_input_post(false));\n        } \n    };\n  \n    //* 8. Close Input Post\n    const closeInputPost = () => {  \n        props.dispatch(toggle_window_input_post(false));\n        props.dispatch(toggle_window_removeAllimg('close'));\n    };\n  \n    //* 9. handle image change  \n    // const handleImageChange = (e) => { //! ไม่ใช้เเล้ว เพราะมีข้อจำกัดในด้านการอัพโหลดที่ไม่สามารถอัพโหลดรูปซ้ำได้\n    //     const selected = e.target.files[0];\n    //     const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\n\n    //     // matching types\n    //     if(selected && ALLOWED_TYPES.includes(selected.type)) {\n    //         let reader = new FileReader(); // constructor method or object property\n    //         reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\n    //         reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\n    //             let imgURL = reader.result;\n    //             let result = {imgURL, id};\n\n    //             setInputPostImgURL([result, ...inputPostImgURL]);\n                \n    //             id++\n    //         }\n    //     } else { // if they don't match, they will be set error.\n    //         console.log('file not supported.');            \n    //     }\n    // }\n\n    //* 10. Evolution handle image change #1\n    const handleImageChange = (imageList, addUpdateIndex) => {\n        // Id Image Post\n        let idImgPost = 1;\n        // console.log(imageList, addUpdateIndex);\n        const imageListTemp = [];\n\n        //setState ImagesPosts\n        imageList.map((img) => {\n            imageListTemp.push({ data_url:img.data_url, id:idImgPost });\n            idImgPost++\n        }) //! บัค id image เพราะ เมือใช้ function onImageRemove มันจะทำการ +idImage เพราะมันต้องผ่าน function นี้เสมอ แต่ยังไม่มีผลเสียอะไร \n\n        props.dispatch(set_images_posts(imageListTemp));\n\n        // set status post button\n        if(imageList.length !== 0) {\n            props.dispatch(set_status_post_button(true));\n        }\n        if(imageList.length === 0) {\n            if(props.data.countTextInputPost !== 0) {\n                props.dispatch(set_status_post_button(true));\n            } else props.dispatch(set_status_post_button(false)); \n        } \n    }; \n\n\n    //* 11 Slide Next\n    // async important!\n    const slideRightFunc = async() => {\n        // console.log(slideItem.current.clientWidth);\n        setFeelingItems(feelingJSON.feelings);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('right');\n        props.dispatch(toggle_window_emoji('close'));\n        // close window remove all img\n        props.dispatch(toggle_window_removeAllimg('close'));\n    }\n    //* 11.1 slide Next - ( Edit Post )\n    const slideRightEditPost = async() => {\n        // console.log(slideItem.current.clientWidth);\n        setFeelingItems(feelingJSON.feelings);\n        setSlideSizeEditPost(slideItemEditPost.current.clientWidth);\n        setSlideResultEditPost('right');\n        props.dispatch(toggle_window_emoji('close'));\n    }\n\n    //* 12. Slide Previous\n    const slideLeftFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('left');\n    }\n    //* 12.1 slide Previous\n    const slideLeftEditPost = () => {\n        // console.log(slideItem.current.clientWidth);\n        setSlideSizeEditPost(slideItemEditPost.current.clientWidth);\n        setSlideResultEditPost('left');\n    }\n\n    //* 13. Get Status Upload Image from PostHasImg Component\n    const getUploadImage = (imageList, addUpdateIndex, statusBool) => {\n        // Id Image Post\n        let idImgPost = 1;\n\n        const imageListTemp = [];\n\n        //setState ImagesPosts\n        imageList.map((img) => {\n            imageListTemp.push({ data_url:img.data_url, id:idImgPost });\n            idImgPost++\n        }) //! บัค id image เพราะ เมือใช้ function onImageRemove มันจะทำการ +idImage เพราะมันต้องผ่าน function นี้เสมอ แต่ยังไม่มีผลเสียอะไร \n        props.dispatch(set_images_posts(imageListTemp));\n\n        // alert error\n        if(inputProfileName === '') {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n            props.dispatch(set_images_posts([]));\n        } else {\n            props.dispatch(toggle_window_input_post(statusBool));\n        }\n        \n        // allow status post button\n        props.dispatch(set_status_post_button(true));\n\n    }\n    //* 14. Get Status Feeling\n    const getStatusFeeling = async(statusBool) => {\n        if(statusBool === true && inputProfileName !== '') {\n            await props.dispatch(toggle_window_input_post(statusBool));\n            await slideRightFunc();\n        } else {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        }\n    }\n\n    //* 15. Do not open Window Input Post\n    const getStatusInputPost = (statusBool) => {\n        if(statusBool === true) {\n            props.dispatch(set_text_input_post(''));\n            props.dispatch(set_count_text_input_post(0));\n        }\n    } \n\n    //* 16. onclick button Post\n    const addPost = () => {\n        props.dispatch(thunk_action_setPosts());\n    }\n\n    //* 17. Increment Index List Images +\n    const incrementIndexListImg = () => {\n        if(props.data.indexListImages === props.data.listImagesPost.length - 1) {\n            props.dispatch(increment_index_list_images('lastIndex'));\n            props.dispatch(toggle_window_delete_img('close'));\n        } else {\n            props.dispatch(increment_index_list_images('next'));\n            props.dispatch(toggle_window_delete_img('close'));\n        } \n    }\n    //* 18. Decrement Index List Images -\n    const decrementIndexListImg = () => {\n        if(props.data.indexListImages === 0) {\n            props.dispatch(decrement_index_list_images(true, props.data.listImagesPost.length - 1));\n            props.dispatch(toggle_window_delete_img('close'));\n        } else {\n            props.dispatch(decrement_index_list_images(false, null));\n            props.dispatch(toggle_window_delete_img('close'));\n        } \n    }\n\n    //* 19. Delete One, List Images Post or Filter\n    const deleteOneListImagesPost = () => {\n        // listImages !== 0\n        if(props.data.listImagesPost.length - 1 !== 0) {\n            //- != last img\n            if(props.data.indexListImages !== props.data.listImagesPost.length -1) {\n                props.dispatch(thunk_action_deleteOne())\n            } else {\n                // = last img\n                props.dispatch(thunk_action_deleteLastImg());\n            }\n        } else {\n            // รูปสุดท้าย ลบแล้ว close window\n            props.dispatch(thunk_action_oneImageLeft());\n        }\n    }\n\n    //* 20. Delete All, List Images Post\n    const deleteAllListImagesPost = () => {\n        props.dispatch(thunk_action_deleteAll());\n    }\n\n    //* 21. close window show list image post\n    const closeWindowListImagesPost = () => {\n        props.dispatch(toggle_window_list_imagesPost());\n    }\n    //* 21.1 open window show list image post\n    const openWindowListImagesPost = () => {\n        props.dispatch(toggle_window_list_imagesPost());\n    }\n\n    //* 22. Receive idPost from Post Componenet\n    const receiveIdPost = (id) => {\n        props.dispatch(set_idPost_showing(id));\n    }\n\n    //* 23. Set Index List Images = 0\n    const setIndexListImages = () => {\n       props.dispatch(set_index_list_images());\n    }\n\n    //* 24. dispatch list image post - receive img from PostHasImg Component\n    const setListImagesPost = (images) => {\n        props.dispatch(set_list_images_post(images));\n    }\n\n    //* 25. when Clear button is CLicked on Navbar, it will Clear Input Post\n    const clearStatusFeeling = () => {\n        props.dispatch(set_feeling_status('?'));\n    } \n    const clearImagesPost = () => {\n        props.dispatch(set_images_posts([]));\n    }\n\n    //* 26. Toggle window Option Post\n    const toggleWindowOptionPost = (status, id) => {\n        props.dispatch(toggle_window_option_post(status, id));\n    }\n\n    //* 27. Toggle Window Navbar\n    const toggleWindowNavbar = (status) => {\n        props.dispatch(toggle_window_navbar(status));\n    }\n\n    //* 28. Delete Photo on Post\n    const deletePhotoOnPost = (idPost, img, title) => {\n        props.dispatch(thunk_action_deletePhoto(idPost, img, title));\n    }\n\n    //* 29. Delete Post\n    const deletePost = (idPost) => {\n        props.dispatch(thunk_action_deletePost(idPost));\n    }\n\n    //* 30. Edit Post\n    const EditPost = (title, idPost, feelingStatus, img, feelingIcon) => {\n        props.dispatch(thunk_action_editPost(title, idPost, feelingStatus, img, feelingIcon));\n    }\n\n    //* 31. Close Edit Post \n    const closeEditPost = () => {\n        props.dispatch(toggle_window_editPost('close'));\n        props.dispatch(toggle_window_removeAllimg('close'));\n    }\n\n    //* 32. Save Edit Post\n    const saveEditPost = () => {\n        props.dispatch(thunk_action_save_editPost());\n    }\n\n\n    //! Small Component\n    //* 1. Show background and image\n    const showBackgroundAndImage = (\n      <div\n        onClick={onClickCloseImage}\n        className={\n          urlShowImage === \"\" ? \"main_show_image close\" : \"main_show_image show\"\n        }\n      >\n        '{/* show image */}\n        <div\n          className=\"show_image\"\n          style={{\n            background:\n              urlShowImage !== null\n                ? `url('${urlShowImage}') no-repeat center/contain`\n                : \"#fff\",\n          }}\n        ></div>\n      </div>\n    );\n        \n    //* 2.1 Emoji Toggle\n    const emojiToggle = (\n        <>\n            <GrEmoji \n                onClick={toggleEmoji} \n                className=\"emoji_toggle\" \n            />\n        </>\n    );\n    \n    //* 2.2 Emoji Picker\n    const emojiPicker = (\n      <span\n        className={\n          !props.data.isWindowEmoji\n            ? \"emoji_picker_wrapper close\"\n            : \"emoji_picker_wrapper show\"\n        }\n        style={props.data.imagesPosts.length !== 0 ? {bottom: '59%'} : {bottom: '44%'}}\n      >\n        <Picker className=\"emoji_picker\" onSelect={addEmoji} />\n      </span>\n    );\n\n\n    //* 2. Show Input Post\n    const showInputPost = (\n        //! show input post \n        <div className={!props.data.isWindowInputPost ? \"main_show_input close\" : \"main_show_input show\"\n        }>  \n            <div className=\"main_show_input_container\">\n\n                {/*//! emoji picker */}\n                <div className=\"emoji_picker_container\">\n                    {emojiPicker} {/* small component */}\n\n                    {/* box */}\n                    <div \n                        className={\n                            !props.data.isWindowEmoji\n                              ? \"box-emojiPicker close\"\n                              : \"box-emojiPicker show\"\n                        }                          \n                        style={props.data.imagesPosts.length !== 0 ? {top: '38.6%', right: '4.7%'} : {top: '54%', right: '4.7%'}}\n                    ></div>\n                </div>\n\n                {/* //! Slide / main show input wrapper */}\n                <div className=\"main_show_input_wrapper\"\n                    // Balance of height \n                    style={slideResult === 'right' ? {height: '329px'} : {height: 'auto'}}\n                >\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\" \n                        ref={slideItem}\n                        style={\n                            slideResult === 'right' \n                            ? {transform: `translateX(-${slideSize+2}px)`}\n                            : {transform: `translateX(-0px)`}\n                        }\n                        >\n\n                        {/* input header */}\n                        <div className=\"show_input_header\">\n                            {/* header text */}\n                                <p>Create Post</p>\n                            {/* btn close */}\n                            <div className=\"btn_close_input\">\n                                {/* close input post */}\n                                <AiFillCloseCircle\n                                    onClick={closeInputPost}\n                                    className=\"icon_close_input\"\n                                />\n                            </div>\n                        </div>\n\n                        {/* feeling status */}\n                        <div className=\"feeling_status\">\n                            <p>{inputProfileName} feeling : <span>{props.data.feelingStatus}</span></p>\n                        </div> \n\n                        {/* input main */}\n                        <div className=\"show_input_main\">\n                            <TextareaAutosize\n                                minRows={fontSizeInput === 'big' ? 6 : 9}\n                                maxRows={15}\n                                className=\"input_textarea\"\n                                placeholder={\n                                  !inputProfileName\n                                    ? \"your mind?\"\n                                    : `your mind ${inputProfileName}?`\n                                }\n                                ref={inputPostRef}\n                                onChange={rowCount}\n                                value={props.data.textInputPost}\n                                style={{\n                                  fontSize: fontSizeInput === \"big\" ? \"1.3em\" : \"0.9em\",\n                                }}\n                            />\n                            {/*//! emoji toggle */}\n                            {emojiToggle} {/* small component */}\n                        </div>\n                        {/*//! Show image Input Post */}\n                        <ImageUploading\n                            multiple\n                            value={props.data.imagesPosts}\n                            onChange={handleImageChange}\n                            maxNumber={maxNumber}\n                            dataURLKey=\"data_url\"\n                            acceptType={acceptType}\n                            maxFileSize={4194304}\n                        >\n                            {({\n                                imageList,\n                                onImageUpload,\n                                onImageRemoveAll,\n                                onImageUpdate,\n                                onImageRemove,\n                                isDragging,\n                                dragProps,\n                            }) => (\n                                <>\n                                    <ul className=\"image_input_post\">\n                                        {props.data.imagesPosts.length <= 4 \n                                            ? \n                                            props.data.imagesPosts.map((image, index) => \n                                                <li \n                                                    className=\"li_images\"\n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}\n                                                >\n                                                    <IoClose onClick={() => {\n                                                        onImageRemove(index)\n                                                        props.dispatch(toggle_window_removeAllimg('close'))\n                                                    }} className=\"li_image_close\"/>\n                                                </li>\n                                            )\n                                            : \n                                            props.data.imagesPosts.map((image, index) =>\n                                            <> \n                                                <li \n                                                    className={props.data.imagesPosts.length > 4 ? \"li_images checkLength nPlus5CLose\" : \"li_images\"} \n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}>\n                                                        <IoClose onClick={() => {\n                                                            onImageRemove(index)\n                                                            props.dispatch(toggle_window_removeAllimg('close'))\n                                                        }} className=\"li_image_close\"/>\n                                                </li>\n                                                {/* image counting and remove all image list */}\n                                                <div onClick={() => props.dispatch(toggle_window_removeAllimg('toggle'))} className=\"images_counting\">{`+${props.data.imagesPosts.length - 4}`}</div>\n                                            </>\n                                            )\n                                        }\n                                    </ul>    \n                                    {/*//! input addon wrapper */}\n                                    <div className=\"input_addon_wrapper\">\n                                        {/* image */}\n                                        <span onClick={() => {\n                                            props.dispatch(toggle_window_emoji('close'));\n                                            props.dispatch(toggle_window_removeAllimg('close'))\n                                        }}>\n                                            {/* button upload image */}\n                                            <BsImages \n                                                className=\"input_image\"\n                                                onClick={onImageUpload}\n                                            />\n                                        </span>\n                                        {/* feeling */}\n                                        <span>\n                                            {/* button feeling */}\n                                            <RiEmotionLaughLine \n                                                onClick={slideRightFunc}\n                                                className=\"input_feeling\" \n                                            />\n                                        </span>\n                                    </div>\n                                    {/*//! Window Remove All Images List in window input */}\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"removeALl_wrapper show\" : \"removeALl_wrapper close\"}>\n                                        <button onClick={() => { \n                                            onImageRemoveAll() \n                                            props.dispatch(toggle_window_removeAllimg('close'))\n                                        }}>Remove All</button>\n                                        <button onClick={() => props.dispatch(toggle_window_removeAllimg('toggle'))}>cancle</button>\n                                    </div>\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"box_removeAll show\" : \"box_removeAll close\"}></div>\n                                </>\n                            )}\n                        </ImageUploading>\n\n                        {/* Post Button */}\n                        <div className=\"button_post-wrapper\">\n                            <button \n                                className={props.data.statusPostButton ? 'button_post true' : 'button_post false'} \n                                onClick={props.data.statusPostButton ? () => addPost() : null}\n                            >Post\n                            </button>\n                        </div>\n                    </div>\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\"\n                        style={\n                            slideResult === 'right' \n                            ? {transform: `translateX(-${slideSize}px)`}\n                            : {transform: `translateX(${slideSize+2}px)`}\n                        }\n                    >\n                        {/*//! Feeling Window Input Post */}\n                        {/* header */}\n                        <div className=\"feeling_header\">\n                            {/* Button Slide Left / Previous */}\n                            <div className=\"feeling_slide_back_wrapper\">\n                                <IoArrowBackOutline\n                                    onClick={slideLeftFunc}\n                                    className=\"feeling_slide_back\"\n                                />\n                            </div>\n                            {/* text header */}\n                            <p className=\"text_header\">Feelings</p>\n                        </div>\n\n                        {/* search feeling */}\n                        <div className=\"search_feeling_wrapper\">\n                            <input \n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                className=\"search_feeling\" \n                                type=\"text\" \n                                placeholder=\"Search\" \n                            />\n                            <BiSearchAlt className=\"search_icon_feeling\"/>\n                        </div>\n\n                        {/* feeling items */} \n                        <ul className=\"feelings_items_wrapper\">\n                            {/* Search filter */}\n                            {feelingItems.filter((value) => {\n                                if(searchTerm === \"\") {\n                                    return value;\n                                } else if (value.feeling_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                    return value;\n                                } \n                            }).map((value, key) => {\n                                // console.log(value);\n                                return (\n                                    <li \n                                        className=\"feeling_item\"\n                                        key={key}\n                                        onClick={() => {\n                                            props.dispatch(set_feeling_status(value.feeling_name));\n                                            props.dispatch(set_feeling_icon(value.icon));\n                                            setSlideResult('left');\n                                        }}\n                                    >   \n                                        <span className=\"feeling_icon\">\n                                            <img src={value.icon} alt=\"feeling-icon\" />\n                                        </span> \n                                        {value.feeling_name}\n                                    </li>\n                                )    \n                                }\n                            )}\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    )  \n    \n    //* 3 Show List Images Post \n    const ShowListImagePost = (\n        // container\n        <div className={props.data.isWindowListImagesPost \n            ? \"listImagesPost_container show\"\n            : \"listImagesPost_container close\"\n        }>\n            {/* wrapper */}\n            <div className={props.data.isLoadingDeleteOne === true \n                ? \"listImagesPost_wrapper loading\"\n                : \"listImagesPost_wrapper\"\n            }>\n                {/* slide images */}\n                <div className=\"listImagesPost_img-wrapper\">\n                    {props.data.listImagesPost.length !== 0\n                        ?\n                        <div \n                            className=\"listImagesPost_img\"\n                            style={props.data.isDeleteLastImg \n                                ? { background: `url(${props.data.listImagesPost[0].data_url}) no-repeat center/contain`}\n                                : { background: `url(${props.data.listImagesPost[props.data.indexListImages].data_url}) no-repeat center/contain`}\n                            }\n                        >   \n                            {/* button Prev, Next */}\n                            {/* Prev */}\n                            <div \n                                onClick={decrementIndexListImg}\n                                className=\"listImagesPost_btn_Prev-container\">\n                                    <div className=\"listImagesPost_btn_Prev-wrapper\">\n                                        <AiOutlineLeft className=\"listImagesPost_btn-Prev\" />\n                                    </div>\n                            </div>\n                            {/* Next */}\n                            <div \n                                onClick={incrementIndexListImg}\n                                className=\"listImagesPost_btn_Next-container\">\n                                    <div className=\"listImagesPost_btn_Next-wrapper\">\n                                        <AiOutlineRight className=\"listImagesPost_btn-Next\" />\n                                    </div>\n                            </div>\n                            {/* button edit */}\n                            <div \n                                onClick={() => props.dispatch(toggle_window_delete_img())}\n                                className=\"listImagesPost_btn_Edit-wrapper\">\n                                    <HiDotsHorizontal className=\"listImagesPost_btn-Edit\" /> \n                            </div>\n                            {/* window delete Button Edit*/}\n                            <div className={props.data.isWindowDeleteImg === true \n                                ? \"listImagesPost_btn_Edit_window-delete show\"\n                                : \"listImagesPost_btn_Edit_window-delete close\"\n                            }>\n                                {/* button delete, delete all */}\n                                {/* one */}\n                                <button \n                                    onClick={deleteOneListImagesPost}\n                                    className=\"delete_one\">Delete\n                                    </button>\n                                {/* all */}\n                                <button \n                                    onClick={deleteAllListImagesPost}\n                                    className=\"delete_all\">Delete All\n                                </button>\n                                {/* triangle box */}\n                                <div className=\"box_window-delete\"></div>\n                            </div>\n                        </div>\n                        : null\n                    }\n                </div>\n                {/* delete one loading */}\n                {props.data.isLoadingDeleteOne === true \n                    ? <div className=\"deleteOne_loading-icon\"></div>\n                    : null\n                }\n                {/* delete one Success! */}\n                {props.data.isDeleteSuccess\n                    ? \n                    <div className=\"deleteOne_loading-success\">\n                        <p>Delete Success!</p>\n                        <div className=\"deleteOne_loading_icon-success\"></div>\n                    </div>\n                    : null\n                }\n            </div>\n            {/* button close window or exit */}\n            <div \n                onClick={closeWindowListImagesPost}\n                className=\"listImagesPost_btn_Close-wrapper\">\n                    <IoClose className=\"listImagesPost_btn-Close\" />\n            </div>            \n        </div>\n    )\n\n    //* 4. Show Edit Post\n    const showEditPost = (\n        //! show edit post \n        <div className={!props.data.isWindowEditPost ? \"main_show_input close\" : \"main_show_input show\"\n        }>  \n            <div className=\"main_show_input_container\">\n\n                {/*//! emoji picker */}\n                <div className=\"emoji_picker_container\">\n                    {emojiPicker} {/* small component */}\n\n                    {/* box */}\n                    <div \n                        className={\n                            !props.data.isWindowEmoji\n                              ? \"box-emojiPicker close\"\n                              : \"box-emojiPicker show\"\n                        }                          \n                        style={props.data.imagesPosts.length !== 0 ? {top: '38.6%', right: '4.7%'} : {top: '54%', right: '4.7%'}}\n                    ></div>\n                </div>\n\n                {/* //! Slide / main show input wrapper */}\n                <div className=\"main_show_input_wrapper\"\n                    // Balance of height \n                    style={slideResultEditPost === 'right' ? {height: '329px'} : {height: 'auto'}}\n                >\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\" \n                        ref={slideItemEditPost}\n                        style={\n                            slideResultEditPost === 'right' \n                            ? {transform: `translateX(-${slideSizeEditPost+2}px)`}\n                            : {transform: `translateX(-0px)`}\n                        }\n                        >\n\n                        {/* input header */}\n                        <div className=\"show_input_header\">\n                            {/* header text */}\n                                <p>Edit Post</p>\n                            {/* btn close */}\n                            <div className=\"btn_close_input\">\n                                {/* close input post */}\n                                <AiFillCloseCircle\n                                    onClick={closeEditPost}\n                                    className=\"icon_close_input\"\n                                />\n                            </div>\n                        </div>\n\n                        {/* feeling status */}\n                        <div className=\"feeling_status\">\n                            <p>{inputProfileName} feeling : <span>{props.data.feelingStatus}</span></p>\n                        </div> \n\n                        {/* input main */}\n                        <div className=\"show_input_main\">\n                            <TextareaAutosize\n                                minRows={fontSizeInput === 'big' ? 6 : 9}\n                                maxRows={15}\n                                className=\"input_textarea\"\n                                placeholder={\n                                  !inputProfileName\n                                    ? \"your mind?\"\n                                    : `your mind ${inputProfileName}?`\n                                }\n                                ref={inputPostRef}\n                                onChange={rowCount}\n                                value={props.data.textInputPost}\n                                style={{\n                                  fontSize: fontSizeInput === \"big\" ? \"1.3em\" : \"0.9em\",\n                                }}\n                            />\n                            {/*//! emoji toggle */}\n                            {emojiToggle} {/* small component */}\n                        </div>\n                        {/*//! Show image Input Post */}\n                        <ImageUploading\n                            multiple\n                            value={props.data.imagesPosts}\n                            onChange={handleImageChange}\n                            maxNumber={maxNumber}\n                            dataURLKey=\"data_url\"\n                            acceptType={acceptType}\n                            maxFileSize={4194304}\n                        >\n                            {({\n                                imageList,\n                                onImageUpload,\n                                onImageRemoveAll,\n                                onImageUpdate,\n                                onImageRemove,\n                                isDragging,\n                                dragProps,\n                            }) => (\n                                <>\n                                    <ul className=\"image_input_post\">\n                                        {props.data.imagesPosts.length <= 4 \n                                            ? \n                                            props.data.imagesPosts.map((image, index) => \n                                                <li \n                                                    className=\"li_images\"\n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}\n                                                >\n                                                    <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                                </li>\n                                            )\n                                            : \n                                            props.data.imagesPosts.map((image, index) =>\n                                            <> \n                                                <li \n                                                    className={props.data.imagesPosts.length > 4 ? \"li_images checkLength nPlus5CLose\" : \"li_images\"} \n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}>\n                                                        <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                                </li>\n                                                {/* image counting and remove all image list */}\n                                                <div onClick={() => props.dispatch(toggle_window_removeAllimg('toggle'))} className=\"images_counting\">{`+${props.data.imagesPosts.length - 4}`}</div>\n                                            </>\n                                            )\n                                        }\n                                    </ul>    \n                                    {/*//! input addon wrapper */}\n                                    <div className=\"input_addon_wrapper\">\n                                        {/* image */}\n                                        <span onClick={() => props.dispatch(toggle_window_emoji('close'))}>\n                                            {/* button upload image */}\n                                            <BsImages \n                                                className=\"input_image\"\n                                                onClick={onImageUpload}\n                                            />\n                                        </span>\n                                        {/* feeling */}\n                                        <span>\n                                            {/* button feeling */}\n                                            <RiEmotionLaughLine \n                                                onClick={slideRightEditPost}\n                                                className=\"input_feeling\" \n                                            />\n                                        </span>\n                                    </div>\n                                    {/*//! Window Remove All Images List in window input */}\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"removeALl_wrapper show\" : \"removeALl_wrapper close\"}>\n                                        <button onClick={() => { \n                                            onImageRemoveAll() \n                                            props.dispatch(toggle_window_removeAllimg('close')); \n                                        }}>Remove All</button>\n                                        <button onClick={() => props.dispatch(toggle_window_removeAllimg('close'))}>cancle</button>\n                                    </div>\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"box_removeAll show\" : \"box_removeAll close\"}></div>\n                                </>\n                            )}\n                        </ImageUploading>\n\n                        {/* Post Button */}\n                        <div className=\"button_post-wrapper\">\n                            <button \n                                className=\"button_post true\" \n                                onClick={saveEditPost}\n                            >Save\n                            </button>\n                        </div>\n                    </div>\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\"\n                        style={\n                            slideResultEditPost === 'right' \n                            ? {transform: `translateX(-${slideSizeEditPost}px)`}\n                            : {transform: `translateX(${slideSizeEditPost+2}px)`}\n                        }\n                    >\n                        {/*//! Feeling Window Input Post */}\n                        {/* header */}\n                        <div className=\"feeling_header\">\n                            {/* Button Slide Left / Previous */}\n                            <div className=\"feeling_slide_back_wrapper\">\n                                <IoArrowBackOutline\n                                    onClick={slideLeftEditPost}\n                                    className=\"feeling_slide_back\"\n                                />\n                            </div>\n                            {/* text header */}\n                            <p className=\"text_header\">Feelings</p>\n                        </div>\n\n                        {/* search feeling */}\n                        <div className=\"search_feeling_wrapper\">\n                            <input \n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                className=\"search_feeling\" \n                                type=\"text\" \n                                placeholder=\"Search\" \n                            />\n                            <BiSearchAlt className=\"search_icon_feeling\"/>\n                        </div>\n\n                        {/* feeling items */} \n                        <ul className=\"feelings_items_wrapper\">\n                            {/* Search filter */}\n                            {feelingItems.filter((value) => {\n                                if(searchTerm === \"\") {\n                                    return value;\n                                } else if (value.feeling_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                    return value;\n                                } \n                            }).map((value, key) => {\n                                // console.log(value);\n                                return (\n                                    <li \n                                        className=\"feeling_item\"\n                                        key={key}\n                                        onClick={() => {\n                                            props.dispatch(set_feeling_status(value.feeling_name));\n                                            props.dispatch(set_feeling_icon(value.icon));\n                                            setSlideResultEditPost('left');\n                                        }}\n                                    >   \n                                        <span className=\"feeling_icon\">\n                                            <img src={value.icon} alt=\"feeling-icon\" />\n                                        </span> \n                                        {value.feeling_name}\n                                    </li>\n                                )    \n                                }\n                            )}\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    ) \n    \n    //* 5. Footer - ( copyright )\n    const copyright = (\n    \n        <div className=\"footer_copyright\">\n            <p>Wanthanai K. © 2021</p>\n        </div>\n\n    )\n    \n\n\n\n    //! Main Component\n    return (\n        //! App\n        <div className=\"App\">\n            {/* Navbar */}\n            <Navbar \n                getInfoNavbar={getInfoNavbar} \n                getStatusInputPost={getStatusInputPost}\n                clearStatusFeeling={clearStatusFeeling}\n                clearImagesPost={clearImagesPost}\n                toggleWindowOptionPost={toggleWindowOptionPost}\n                isWindowNavbar={props.data.isWindowNavbar}\n                toggleWindowNavbar={toggleWindowNavbar}\n                onClickCloseImage={onClickCloseImage}\n            />\n            {/* Input */}\n            <Input\n                onClickShowImage={onClickShowImage}\n                inputProfileImg={inputProfileImg}\n                inputProfileName={inputProfileName}\n                getWindowInput={getWindowInput}\n                getUploadImage={getUploadImage}\n                imagesPosts={props.data.imagesPosts}\n                getStatusFeeling={getStatusFeeling}  \n                textInputPost={props.data.textInputPost}\n                countTextInputPost={props.data.countTextInputPost}\n                toggleWindowOptionPost={toggleWindowOptionPost}\n            />\n            {/* Post */}\n            {props.data.posts.map((post) => {\n                const feelingStatus = post.feelingStatus.toLowerCase();\n                return(\n                    <PostHasImg \n                    inputProfileImg={inputProfileImg} \n                    inputProfileName={inputProfileName} \n                    onClickShowImage={onClickShowImage} \n                    key={post.idPost}\n                    idPost={post.idPost}\n                    img={post.imagesPosts}\n                    title={post.textInputPost}\n                    feelingStatus={feelingStatus}\n                    feelingIcon={post.feelingIcon}\n                    strTime={post.strTime}\n                    minutePost={post.minutePost}\n                    hourPost={post.hourPost}\n                    timeNow={props.data.timeNow}\n                    setListImagesPost={setListImagesPost}\n                    openWindowListImagesPost={openWindowListImagesPost}\n                    receiveIdPost={receiveIdPost}\n                    setIndexListImages={setIndexListImages}\n                    toggleWindowOptionPost={toggleWindowOptionPost}\n                    deletePhotoOnPost={deletePhotoOnPost}\n                    deletePost={deletePost}\n                    EditPost={EditPost}\n                />\n                ) \n            })}\n\n            {/*//! main show background and image */}\n            {showBackgroundAndImage} {/* small component */}\n          \n            {/*//! main show input */}\n            {showInputPost} {/* small component */}\n          \n            {/*//! Show List Images Post */}\n            {ShowListImagePost} {/* small component */}\n\n            {/*//! Show Edit Post */}\n            {showEditPost} {/* small component */}\n\n            {/*//! Footer - (Copyright) */}\n            {copyright}\n        </div>\n    );\n\n}\n\n//! Map State To Props\nconst mapStateToProps = state => {\n    return {\n        data: state\n    }\n}\n\n\nexport default connect(mapStateToProps)(App)\n","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Navbar.js",[],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\Input.js",[],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\component\\PostHasImg.js",["63","64"],"//! Import\r\nimport React, { useRef, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './Post.css';\r\nimport './responsive.css';\r\n// Icon\r\nimport { HiDotsHorizontal } from \"react-icons/hi\";\r\nimport { BsFillLockFill } from \"react-icons/bs\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { TiDocumentDelete, TiPencil } from \"react-icons/ti\";\r\n// PropTypes\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n//! Variable\r\n// id Images Post\r\nlet idImagesPost = 1;\r\n// Time \r\nconst second = 1000;            // 1 second = 1000 ms\r\nconst minute = second * 60;     // 1 minute = 60,000 ms\r\nconst hour = minute * 60;       // 1 hour = 3,600,000 ms\r\nconst day = hour * 24;          // 1 day = 86,400,000 ms\r\n\r\n//! Main Component\r\nexport default function PostHasImg \r\n// parameters\r\n({\r\n    inputProfileImg, inputProfileName, onClickShowImage, idPost, img, title, feelingStatus, feelingIcon, strTime, timeNow,\r\n    setListImagesPost, openWindowListImagesPost, receiveIdPost, setIndexListImages, hourPost, minutePost,\r\n    toggleWindowOptionPost, deletePhotoOnPost, deletePost, EditPost\r\n}) {\r\n\r\n    //! useState\r\n    const [postMinute, setPostMinute] = useState(minutePost);\r\n    const [postHour, setPostHour] = useState(hourPost);\r\n    const [dayAllow, setDayAllow] = useState(false);\r\n\r\n    //! useEffect\r\n    useEffect(() => {\r\n        console.log(`hahhaa yooow! Post Id: ${idPost}`);\r\n        runCountMinutePost();\r\n    }, [])\r\n\r\n    //! useRef\r\n    const refTextPost = useRef(null);\r\n    \r\n    // if(textInputPost !== '') {\r\n    //     setWidthTextPost(refTextPost.current.children[0].offsetWidth);\r\n    // } \r\n\r\n    //! useSelector\r\n    const statusWindowOptionPost = useSelector(state => state.isWindowOptionPost);\r\n    const idOptionPost = useSelector(state => state.idOptionPost);\r\n\r\n    //! Function\r\n    //* 1. open window show list images post\r\n    const openListImagesPost = async() => {\r\n        // setState\r\n        await setListImagesPost(img);\r\n        await receiveIdPost(idPost);\r\n        await openWindowListImagesPost();\r\n        await setIndexListImages();\r\n    } \r\n\r\n    //* 2. Time Post\r\n    // 2.1 Count Minute\r\n    const countMinutePost = () => {\r\n        minutePost = minutePost + 1;\r\n        // console.log(minutePost);\r\n\r\n        setPostMinute(minutePost);\r\n        // console.log(postMinute);\r\n    }\r\n    // 2.2 Count Hour\r\n    const countHourPost = () => {\r\n        hourPost = hourPost + 1;\r\n        // console.log(hourPost);\r\n\r\n        setPostHour(hourPost);\r\n        // console.log(postHour);\r\n    }\r\n    // 2.3 Run\r\n    const runCountMinutePost = () => {\r\n        var countMinute = setInterval(() => {\r\n            if(minutePost !== 60) {\r\n                countMinutePost();\r\n            } else {\r\n                hourPost = hourPost + 1;\r\n                setPostHour(hourPost);\r\n\r\n                clearInterval(countMinute);\r\n                // console.log(`count minute End Post id: ${idPost}`);\r\n\r\n                // next Function\r\n                runCountHourPost();\r\n            } \r\n        }, minute);\r\n    }\r\n    // 2.4 Run\r\n    const runCountHourPost = () => {\r\n        var countHour = setInterval(() => {\r\n            if(hourPost > 0 && hourPost !== 24) {\r\n                countHourPost();\r\n            } else {\r\n                clearInterval(countHour);\r\n                setDayAllow(true);\r\n                // console.log(`count hour End Post id: ${idPost}`);\r\n            }\r\n        }, hour); \r\n    }\r\n    //* End - ( Time Post )\r\n\r\n    //* 3. Delete Photo \r\n    const deletePhoto = () => {\r\n        deletePhotoOnPost(idPost, img, title);\r\n    }\r\n\r\n    //* 4. Edit Post\r\n    const whenClickEditPost = () => {\r\n        EditPost(title, idPost, feelingStatus, img, feelingIcon);\r\n    }\r\n\r\n\r\n    //! Component\r\n    return (\r\n        <div className=\"post_container\">\r\n            <div className=\"post_wrapper\">\r\n\r\n                {img.length === 0\r\n                    ?\r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length === 1 \r\n                    ? \r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true \r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image\">\r\n                                {img.map((img) => {\r\n                                    return(\r\n                                        <li>\r\n                                            <img onClick={() => onClickShowImage(img.data_url)} src={img.data_url} alt=\"post-img\" />\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length === 2 \r\n                    ? \r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true \r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image twoImg\">\r\n                                {img.map((img) => {\r\n                                    idImagesPost++\r\n                                    return(\r\n                                        <li key={idImagesPost}>\r\n                                            <img onClick={() => onClickShowImage(img.data_url)} src={img.data_url} alt=\"post-img\" />\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length > 2 \r\n                    ?\r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true \r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image moreThanTwo\">\r\n                                {img.map((image) => {\r\n                                    idImagesPost++\r\n                                    return(\r\n                                        <li key={idImagesPost}>\r\n                                            <div onClick={() => openListImagesPost()}>\r\n                                                <img src={image.data_url} alt=\"post-img\" />\r\n                                            </div>\r\n                                            <span className=\"number_moreThanTwo\">+{img.length - 2}</span>\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n                \r\n\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nPostHasImg.prototype = {\r\n    inputProfileImg: PropTypes.string.isRequired,\r\n    inputProfileName: PropTypes.string.isRequired, \r\n    onClickShowImage: PropTypes.func.isRequired, \r\n    id: PropTypes.number.isRequired,\r\n    img: PropTypes.object.isRequired,\r\n    title: PropTypes.string.isRequired, \r\n    setListImagesPost: PropTypes.func.isRequired,\r\n    openWindowListImagesPost: PropTypes.func.isRequired,\r\n    receiveIdPost: PropTypes.func.isRequired,\r\n    setIndexListImages: PropTypes.func.isRequired,\r\n    feelingStatus: PropTypes.string.isRequired,\r\n    strTime: PropTypes.string.isRequired,\r\n    timeNow: PropTypes.string.isRequire,\r\n    allowDay: PropTypes.bool.isRequire,\r\n    hourPost: PropTypes.number.isRequire,\r\n    minutePost: PropTypes.number.isRequire,\r\n    deletePhotoOnPost: PropTypes.func.isRequired,\r\n    deletePost: PropTypes.func.isRequired,\r\n    EditPost: PropTypes.func.isRequired\r\n}","C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\actions\\index.js",[],"C:\\Users\\prode\\Desktop\\Post_Something-React\\src\\reducers\\deleteImgOne.js",[],{"ruleId":"65","severity":1,"message":"66","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":13},{"ruleId":"69","severity":1,"message":"70","line":487,"column":54,"nodeType":"71","messageId":"72","endLine":487,"endColumn":56},{"ruleId":"65","severity":1,"message":"73","line":2,"column":16,"nodeType":"67","messageId":"68","endLine":2,"endColumn":24},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"65","severity":1,"message":"78","line":17,"column":39,"nodeType":"67","messageId":"68","endLine":17,"endColumn":57},{"ruleId":"65","severity":1,"message":"79","line":29,"column":10,"nodeType":"67","messageId":"68","endLine":29,"endColumn":13},{"ruleId":"65","severity":1,"message":"80","line":29,"column":15,"nodeType":"67","messageId":"68","endLine":29,"endColumn":19},{"ruleId":"65","severity":1,"message":"81","line":50,"column":5,"nodeType":"67","messageId":"68","endLine":50,"endColumn":11},{"ruleId":"69","severity":1,"message":"82","line":224,"column":29,"nodeType":"71","messageId":"83","endLine":224,"endColumn":31},{"ruleId":"69","severity":1,"message":"82","line":284,"column":29,"nodeType":"71","messageId":"83","endLine":284,"endColumn":31},{"ruleId":"69","severity":1,"message":"70","line":700,"column":58,"nodeType":"71","messageId":"72","endLine":700,"endColumn":60},{"ruleId":"69","severity":1,"message":"70","line":1034,"column":58,"nodeType":"71","messageId":"72","endLine":1034,"endColumn":60},{"ruleId":"65","severity":1,"message":"84","line":23,"column":7,"nodeType":"67","messageId":"68","endLine":23,"endColumn":10},{"ruleId":"85","severity":1,"message":"86","line":43,"column":8,"nodeType":"87","endLine":43,"endColumn":10,"suggestions":"88"},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useState' is defined but never used.","no-native-reassign",["89"],"no-negated-in-lhs",["90"],"'IoConstructOutline' is defined but never used.","'any' is defined but never used.","'func' is defined but never used.","'idPost' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'day' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'idPost' and 'runCountMinutePost'. Either include them or remove the dependency array.","ArrayExpression",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [idPost, runCountMinutePost]",{"range":"94","text":"95"},[1459,1461],"[idPost, runCountMinutePost]"]