{"version":3,"sources":["component/Navbar.js","component/Input.js","App.js","index.js"],"names":["Navbar","getInfoNavbar","getStatusInputPost","useState","imgURL","setImgURL","imgPreview","setImgPreview","reserveImgURL","setReserveImgURL","inputName","setInputName","profileName","setProfileName","windowCustom","setWindowCustom","error","setError","length5Error","setLength5Error","length15Error","setLength15Error","className","href","onClick","id","style","background","length","rel","target","class","display","onChange","evt","resultName","value","type","placeholder","htmlFor","e","selected","files","includes","reader","FileReader","readAsDataURL","onloadend","result","acceptType","Input","inputProfileImg","onClickShowImage","inputProfileName","getWindowInput","textInputPost","getUploadImage","images","getStatusFeeling","toggleInput","statusInputMain","multiple","imageList","addUpdateIndex","maxNumber","dataURLKey","maxFileSize","onImageUpload","onImageRemoveAll","onImageUpdate","onImageRemove","isDragging","dragProps","marginRight","color","fontSize","App","setInputProfileImg","urlShowImage","setUrlShowImage","setImages","setInputProfileName","fontSizeInput","setFontSizeInput","setTextInputPost","windowEmoji","setWindowEmoji","windowInputPost","setWindowInputPost","windowRemoveAllImg","setWindowRemoveAllImg","slideResult","setSlideResult","slideSize","setSlideSize","feelingItems","setFeelingItems","feelingStatus","setFeelingStatus","searchTerm","setSearchTerm","setStatusInputMain","alert","useAlert","inputPostRef","useRef","slideItem","useEffect","slideRightFunc","feelingJSON","feelings","current","clientWidth","statusBool","a","showBackgroundAndImage","emojiToggle","data-tip","data-delay-show","data-effect","data-type","data-border","data-text-color","data-background-color","data-border-color","emojiPicker","onSelect","native","showInputPost","height","ref","transform","minRows","maxRows","row","offsetHeight","map","image","index","data_url","filter","feeling_name","toLowerCase","key","src","icon","alt","imgURLtoInput","urlImg","options","timeout","position","positions","TOP_CENTER","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById"],"mappings":";w9DAQe,SAASA,EAAT,GAAwD,IAAtCC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,mBAAsB,EAEtCC,mBAAS,MAF6B,mBAE3DC,EAF2D,KAEnDC,EAFmD,OAG9BF,mBAAS,MAHqB,mBAG3DG,EAH2D,KAG/CC,EAH+C,OAIxBJ,mBAAS,MAJe,mBAI3DK,EAJ2D,KAI5CC,EAJ4C,OAMhCN,mBAAS,IANuB,mBAM3DO,EAN2D,KAMhDC,EANgD,OAO5BR,mBAAS,IAPmB,mBAO3DS,EAP2D,KAO9CC,EAP8C,OAS1BV,oBAAS,GATiB,mBAS3DW,EAT2D,KAS7CC,EAT6C,OAWxCZ,oBAAS,GAX+B,mBAW3Da,EAX2D,KAWpDC,EAXoD,OAY1Bd,oBAAS,GAZiB,mBAY3De,EAZ2D,KAY7CC,EAZ6C,OAaxBhB,oBAAS,GAbe,mBAa3DiB,EAb2D,KAa5CC,EAb4C,KAmJlE,OAEI,aADA,CACA,OAAKC,UAAU,mBAAf,SACI,sBAAKA,UAAU,iBAAf,UAEI,yBAAQA,UAAU,gBAAlB,UAEI,mBAAGC,KAAK,IAAR,2BAGA,qBAAKC,QAhHK,WACtBT,GAAgB,IA+G6BO,UAAU,yBAA3C,SACI,sBAAKG,GAAG,gBAAgBH,UAAU,mBAAlC,UAEI,qBAAKA,UAAU,qBAAqBI,MAAO,CACvCC,WAAYrB,EAAU,eACZA,EADY,uCAM1B,qBAAKgB,UAAU,mBAAf,SAC2BV,EAAYgB,QAAU,IAAMhB,EAAYgB,QAAU,EACnE,4BAAIhB,IACJ,kDAOlB,sBAAKU,UAAU,cAAf,UACI,mBAAGO,IAAI,sBAAsBN,KAAK,+BAA+BO,OAAO,SAAxE,SAAiF,mBAAGC,MAAM,oBAC1F,mBAAGF,IAAI,sBAAsBN,KAAK,uCAAuCO,OAAO,SAAhF,SAAyF,mBAAGC,MAAM,sBAClG,mBAAGF,IAAI,sBAAsBN,KAAK,4HAA4HO,OAAO,SAArK,SAA8K,mBAAGC,MAAM,4BAK/L,sBAAKT,UAAU,iBAAiBI,MAAO,CACnCM,SAA0B,IAAjBlB,EACP,OACA,QAHN,UAMI,wBAAQU,QA9IG,WACvBT,GAAgB,GAEhBE,GAAS,GACTE,GAAgB,GAChBE,GAAiB,GAEjBV,EAAa,KAuIoCW,UAAU,cAA/C,mBAEA,mBAAGA,UAAU,WAAb,SAAyBN,GAAK,qCAC7BE,GAAgB,mBAAGI,UAAU,WAAb,4CAChBF,GAAiB,mBAAGE,UAAU,WAAb,0CAElB,uBAAOW,SAzIC,SAACC,GACrB,IAAIC,EAAaD,EAAIJ,OAAOM,MACzBD,EAAWP,OAAS,GAAKO,EAAWP,OAAS,GAC5CjB,EAAawB,GACbhB,GAAgB,GAChBE,GAAiB,IACXc,EAAWP,OAAS,IAC1BjB,EAAawB,GACbhB,GAAgB,GAChBE,GAAiB,KACXc,EAAWP,OACjBjB,EAAawB,GACbhB,GAAgB,GAChBE,GAAiB,KA4HyBe,MAAO1B,EAAW2B,KAAK,OAAOf,UAAU,WAAWgB,YAAY,yBAEjG,uBAAOC,QAAQ,aAAajB,UAAU,oBAAtC,0BACA,uBAAOE,QAnKE,SAACgB,GACR,OAAXpC,GACCC,EAAUG,IAiKgCyB,SAvLxB,SAACO,GACvB,IAAMC,EAAWD,EAAEV,OAAOY,MAAM,GAIhC,GAAGD,GAHmB,CAAC,aAAc,YAAa,aAGrBE,SAASF,EAASJ,MAAO,CAClD,IAAIO,EAAS,IAAIC,WACjBD,EAAOE,cAAcL,GACrBG,EAAOG,UAAY,WACf1C,EAAUuC,EAAOI,QACjBvC,EAAiBmC,EAAOI,QACxB/B,GAAS,SAGbA,GAAS,IAyK8DoB,KAAK,OAAOZ,GAAG,eAE9E,wBAAQD,QAxHG,WACN,KAAdd,EACIA,EAAUkB,OAAS,GAClBT,GAAgB,GAChBE,GAAiB,IACXX,EAAUkB,OAAS,IACzBT,GAAgB,GAChBE,GAAiB,KACD,IAAVL,IAAmC,IAAjBE,IAA2C,IAAlBE,EAEjDL,GAAgB,IAIhBF,EAAeH,GAEfH,EAAcH,GAEdO,EAAa,IAEbI,GAAgB,GAEhBI,GAAgB,GAChBE,GAAiB,GACjBJ,GAAS,GAEThB,EAAcG,EAAQM,KAEV,IAAVM,IAAmC,IAAjBE,IAA2C,IAAlBE,EACjDL,GAAgB,IAGhBF,EAAeD,GAEfL,EAAcH,GAEdO,EAAa,IAEbI,GAAgB,GAEhBd,EAAcG,EAAQQ,KAgFuBU,UAAU,mBAA/C,kBAEA,wBAAQE,QA3EH,WACjBX,EAAe,IACfF,EAAa,IACbJ,EAAc,MACdF,EAAU,MACVU,GAAgB,GAEhBI,GAAgB,GAChBE,GAAiB,GACjBJ,GAAS,GAEThB,EAAc,KAAM,IAEpBC,GAAmB,IA8DwBoB,UAAU,YAAzC,2B,2CCpMd2B,EAAa,CAAC,OAAQ,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAK1D,SAASC,EAAT,GAAoK,IAAnJC,EAAkJ,EAAlJA,gBAAiBC,EAAiI,EAAjIA,iBAAkBC,EAA+G,EAA/GA,iBAAkBC,EAA6F,EAA7FA,eAAgBC,EAA6E,EAA7EA,cAAeC,EAA8D,EAA9DA,eAAgBC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,iBASlIC,GATwK,EAAnBC,gBASvI,WAChBN,EAAeD,KAgBnB,OAEI,cADA,CACA,OAAK/B,UAAU,YAAf,UAEI,qBAAKA,UAAU,eAKf,sBAAKA,UAAU,qBAAf,UAEI,sBAAKA,UAAU,WAAf,UAGI,qBAAKA,UAAU,sBAAf,SACI,qBAAKE,QAAS,kBAAM4B,EAAiBD,IAAkB7B,UAAU,cAAcI,MAAO,CAClFC,WAAgC,OAApBwB,EAAA,eACFA,EADE,yCAQD,KAAlBI,EACM,qBAAK/B,QAASmC,EAAarC,UAAU,0BAArC,SAAgEiC,EAAc3B,OAAS,GAAvB,UAA+B2B,EAA/B,iBAAuDA,KACxH,qBAAK/B,QAASmC,EAAarC,UAAU,YAArC,SAAuE,KAArB+B,EAAA,iCAAoDA,GAAqB,kCAIrI,sBAAK/B,UAAU,cAAf,UAEI,cAAC,IAAD,CACIuC,UAAQ,EACRzB,MAAOqB,EACPxB,SA/CM,SAAC6B,EAAWC,GAElCP,EAAeM,GAAW,IA8CVE,UAlEN,GAmEMC,WAAW,WACXhB,WAAYA,EACZiB,YAAa,QAPjB,SASK,cACGJ,UADH,IAEGK,EAFH,EAEGA,cAFH,EAGGC,iBAHH,EAIGC,cAJH,EAKGC,cALH,EAMGC,WANH,EAOGC,UAPH,OASG,sBACIlD,UAAU,eACVE,QAAS2C,EAFb,UAII,cAAC,IAAD,CACIzC,MAAO,CACP+C,YAAa,OACbC,MAAO,UACPC,SAAU,UARlB,cAgBR,sBACIrD,UAAU,iBACVE,QAAS,kBAAMkC,GAAiB,IAFpC,UAII,cAAC,IAAD,CACIhC,MAAO,CACP+C,YAAa,OACbC,MAAO,UACPC,SAAU,UARlB,sB,4EC7Ed1B,EAAa,CAAC,OAAQ,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAK1D,SAAS2B,IAAM,MAGoBzE,mBAAS,MAH7B,mBAGnBgD,EAHmB,KAGF0B,EAHE,OAIc1E,mBAAS,IAJvB,mBAInB2E,EAJmB,KAILC,EAJK,OAME5E,mBAAS,IANX,mBAMnBsD,EANmB,KAMXuB,EANW,OASsB7E,mBAAS,IAT/B,mBASnBkD,EATmB,KASD4B,EATC,OAWgB9E,mBAAS,OAXzB,mBAWnB+E,EAXmB,KAWJC,EAXI,OAYgBhF,mBAAS,IAZzB,mBAYnBoD,EAZmB,KAYJ6B,EAZI,OAcYjF,oBAAS,GAdrB,mBAcnBkF,EAdmB,KAcNC,EAdM,OAgBoBnF,oBAAS,GAhB7B,mBAgBnBoF,EAhBmB,KAgBFC,EAhBE,OAkB0BrF,oBAAS,GAlBnC,mBAkBnBsF,GAlBmB,KAkBCC,GAlBD,QAoBYvF,mBAAS,IApBrB,qBAoBnBwF,GApBmB,MAoBNC,GApBM,SAqBQzF,mBAAS,IArBjB,qBAqBnB0F,GArBmB,MAqBRC,GArBQ,SAuBc3F,mBAAS,IAvBvB,qBAuBnB4F,GAvBmB,MAuBLC,GAvBK,SAyBgB7F,mBAAS,KAzBzB,qBAyBnB8F,GAzBmB,MAyBJC,GAzBI,SA2BU/F,mBAAS,IA3BnB,qBA2BnBgG,GA3BmB,MA2BPC,GA3BO,SA6BoBjG,oBAAS,GA7B7B,qBA6BnByD,GA7BmB,MA6BFyC,GA7BE,MAkCpBC,GAAQC,cAIRC,GAAeC,iBAAO,MACtBC,GAAYD,iBAAO,MAGzBE,qBAAU,eAQV,IAkGMC,GAAiB,WAEnBZ,GAAgBa,EAAYC,UAC5BhB,GAAaY,GAAUK,QAAQC,aAC/BpB,GAAe,SACfN,GAAe,IAqBb5B,GAAgB,uCAAG,WAAMuD,GAAN,SAAAC,EAAA,0DACH,IAAfD,GAA4C,KAArB5D,EADL,gCAEXmC,EAAmByB,GAFR,OAGjBL,KAHiB,sBAKjBN,GAAMtF,MAAM,qBAAKM,UAAU,cAAf,4CALK,2CAAH,sDAwBhB6F,GACJ,sBACE3F,QA3IsB,WACxBuD,EAAgB,KA2IdzD,UACmB,KAAjBwD,EAAsB,wBAA0B,uBAHpD,cAOE,qBACExD,UAAU,aACVI,MAAO,CACLC,WACmB,OAAjBmD,EAAA,eACYA,EADZ,+BAEI,aAORsC,GACF,qCACI,cAAC,IAAD,CACI5F,QAjIQ,WAIhB8D,GAHGD,IAiIK/D,UAAU,eACV+F,WAAS,QACTC,kBAAgB,MAChBC,cAAY,QACZC,YAAU,QACVC,cAAY,OACZC,kBAAgB,OAChBC,wBAAsB,wBACtBC,oBAAkB,uBAEtB,cAAC,IAAD,OAKFC,GACJ,sBACEvG,UACG+D,EAEG,4BADA,6BAHR,SAOE,cAAC,IAAD,CAAQ/D,UAAU,eAAewG,SAjKpB,SAACtF,GAIhB4C,EAAiB,GAAD,OAAI7B,GAAJ,OAAoBf,EAAEuF,cAmKlCC,GAEF,sBAAK1G,UAAYiE,EAA4C,uBAA1B,wBAAnC,UAII,sBAAKjE,UAAU,yBAAf,UACKuG,GADL,OAKA,sBAAKvG,UAAU,0BAEXI,MAAuB,UAAhBiE,GAA0B,CAACsC,OAAQ,SAAW,CAACA,OAAQ,QAFlE,UAMI,sBACI3G,UAAU,aACV4G,IAAKxB,GACLhF,MACoB,UAAhBiE,GACE,CAACwC,UAAU,eAAD,OAAiBtC,GAAU,EAA3B,QACV,CAACsC,UAAU,oBANrB,UAWI,sBAAK7G,UAAU,oBAAf,UAEQ,4CAEJ,qBAAKA,UAAU,kBAAf,SAEI,cAAC,IAAD,CACIE,QA/KL,YACG,IAApB+D,GACFC,GAAmB,IA8KKlE,UAAU,0BAMtB,qBAAKA,UAAU,iBAAf,SACI,8BAAI+B,EAAJ,cAAgC,+BAAO4C,UAI3C,sBAAK3E,UAAU,kBAAf,UACI,cAAC,IAAD,CACI8G,QAAS,EACTC,QAAS,GACT/G,UAAU,iBACVgB,YACGe,EAAD,qBAEkBA,GADd,aAGN6E,IAAK1B,GACLvE,SApPP,SAACC,GAChBkD,EAAiBlD,EAAIJ,OAAOM,OAE5B,IAAIkG,EAAMpG,EAAIJ,OAAOyG,aAGC,QAAlBrD,GACEoD,EAAM,KACRnD,EAAiB,SAGC,UAAlBD,GAC8B,IAA5BhD,EAAIJ,OAAOM,MAAMR,QACnBuD,EAAiB,QAwOC/C,MAAOmB,EACP7B,MAAO,CACLiD,SAA4B,QAAlBO,EAA0B,QAAU,WAInDkC,GAlBL,OAqBA,cAAC,IAAD,CACIvD,UAAQ,EACRzB,MAAOqB,EACPxB,SAtLM,SAAC6B,EAAWC,GAElCiB,EAAUlB,EAAWC,IAqLLC,UA7TF,GA8TEC,WAAW,WACXhB,WAAYA,EACZiB,YAAa,QAPjB,SASK,cACGJ,UADH,IAEGK,EAFH,EAEGA,cACAC,EAHH,EAGGA,iBAEAE,GALH,EAIGD,cAJH,EAKGC,eALH,EAMGC,WANH,EAOGC,UAPH,OASG,qCACI,oBAAIlD,UAAU,mBAAd,SACKmC,EAAO7B,QAAU,EAEd6B,EAAO+E,KAAI,SAACC,EAAOC,GAAR,OACP,oBACIpH,UAAU,YAEVG,GAAIiH,EACJhH,MAAO,CAACC,WAAW,OAAD,OAAS8G,EAAME,SAAf,6BAJtB,SAMI,cAAC,IAAD,CAASnH,QAAS,kBAAM8C,EAAcoE,IAAQpH,UAAU,oBAJnDoH,MAQbjF,EAAO+E,KAAI,SAACC,EAAOC,GAAR,OACX,qCACI,oBACIpH,UAAWmC,EAAO7B,OAAS,EAAI,oCAAsC,YAErEH,GAAIiH,EACJhH,MAAO,CAACC,WAAW,OAAD,OAAS8G,EAAME,SAAf,6BAJtB,SAKQ,cAAC,IAAD,CAASnH,QAAS,kBAAM8C,EAAcoE,IAAQpH,UAAU,oBAHvDoH,GAMT,qBAAKlH,QAAS,kBAAMkE,IAAsB,IAAOpE,UAAU,kBAA3D,oBAAkFmC,EAAO7B,OAAS,aAM9G,sBAAKN,UAAU,sBAAf,UAEI,iCAEI,cAAC,IAAD,CACIA,UAAU,cACVE,QAAS2C,EAETmD,kBAAgB,MAChBC,cAAY,QACZC,YAAU,QACVH,WAAS,QACTI,cAAY,OACZC,kBAAgB,OAChBC,wBAAsB,wBACtBC,oBAAkB,uBAEtB,cAAC,IAAD,OAGJ,iCAEI,cAAC,IAAD,CACIpG,QAASoF,GACTtF,UAAU,gBAEVgG,kBAAgB,MAChBC,cAAY,QACZC,YAAU,QACVH,WAAS,WACTI,cAAY,OACZC,kBAAgB,OAChBC,wBAAsB,wBACtBC,oBAAkB,uBAEtB,cAAC,IAAD,UAIR,sBAAKtG,WAAkC,IAAvBmE,GAA+B,yBAA2B,0BAA1E,UACI,wBAAQjE,QAAS,WACb4C,IACAsB,IAAsB,IAF1B,wBAIA,wBAAQlE,QAAS,kBAAMkE,IAAsB,IAA7C,uBAEJ,qBAAKpE,WAAkC,IAAvBmE,GAA+B,qBAAuB,iCAOtF,sBACInE,UAAU,aACVI,MACoB,UAAhBiE,GACE,CAACwC,UAAU,eAAD,OAAiBtC,GAAjB,QACV,CAACsC,UAAU,cAAD,OAAgBtC,GAAU,EAA1B,QALpB,UAUI,sBAAKvE,UAAU,iBAAf,UAEI,qBAAKA,UAAU,6BAAf,SACI,cAAC,IAAD,CACIE,QAvRN,WAElBsE,GAAaY,GAAUK,QAAQC,aAC/BpB,GAAe,SAqRStE,UAAU,yBAIlB,mBAAGA,UAAU,cAAb,yBAIJ,sBAAKA,UAAU,yBAAf,UACI,uBACIW,SAAU,SAACO,GAAD,OAAO4D,GAAc5D,EAAEV,OAAOM,QACxCd,UAAU,iBACVe,KAAK,OACLC,YAAY,WAEhB,cAAC,IAAD,CAAahB,UAAU,2BAI3B,oBAAIA,UAAU,yBAAd,SAEKyE,GAAa6C,QAAO,SAACxG,GAClB,MAAkB,KAAf+D,IAEQ/D,EAAMyG,aAAaC,cAAcnG,SAASwD,GAAW2C,eADrD1G,OACJ,KAGRoG,KAAI,SAACpG,EAAO2G,GAEX,OACI,qBACIzH,UAAU,eAEVE,QAAS,WACL0E,GAAiB9D,EAAMyG,cACvBjD,GAAe,SALvB,UAQI,sBAAMtE,UAAU,eAAhB,SACI,qBAAK0H,IAAK5G,EAAM6G,KAAMC,IAAI,mBAE7B9G,EAAMyG,eATFE,iBA0BvC,OAEE,cADA,CACA,OAAKzH,UAAU,MAAf,UAEI,cAAC,EAAD,CACIrB,cAlcc,SAACkJ,EAAevI,GACpCiE,EAAmBsE,GACnBlE,EAAoBrE,IAicdV,mBA7TmB,SAAC+G,IACN,IAAfA,GACC7B,EAAiB,IACjBiB,GAAmBY,IAEnBZ,IAAmB,MA2TvB,cAAC,EAAD,CACIjD,iBAjciB,SAACgG,GACxBrE,EAAgBqE,IAicVjG,gBAAiBA,EACjBE,iBAAkBA,EAClBkC,gBAAiBA,EACjBjC,eAvZe,SAACD,GAEG,KAArBA,EAAyBmC,GAAmB,IAE9Cc,GAAMtF,MAAM,qBAAKM,UAAU,cAAf,4CACZkE,GAAmB,KAmZfjC,cAAeA,EACfC,eA3Ve,SAACpB,EAAO6E,GAC3BjC,EAAU5C,EAAOqB,GACO,KAArBJ,EACCiD,GAAMtF,MAAM,qBAAKM,UAAU,cAAf,4CAEZkE,EAAmByB,IAuVnBxD,OAAQA,EACRC,iBAAkBA,GAClBE,gBAAiBA,KAGpBuD,GApBL,IAuBKa,GAvBL,O,YChhBEqB,EAAU,CACdC,QAAS,IACTC,SAAUC,IAAUC,YAKtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,yBAAgBC,SAAUC,KAAmBT,GAA7C,aACE,cAAC,EAAD,SAGJU,SAASC,eAAe,W","file":"static/js/main.5c5e65a6.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// style css\r\nimport './Navbar.css';\r\n\r\n\r\n//! Function Component\r\nexport default function Navbar({ getInfoNavbar, getStatusInputPost }) {\r\n    //! State Image\r\n    const [imgURL, setImgURL] = useState(null);    \r\n    const [imgPreview, setImgPreview] = useState(null);\r\n    const [reserveImgURL, setReserveImgURL] = useState(null);\r\n    //! State Name\r\n    const [inputName, setInputName] = useState('');\r\n    const [profileName, setProfileName] = useState('');\r\n    //! State open and close window custom profile\r\n    const [windowCustom, setWindowCustom] = useState(false);\r\n    //! State Error\r\n    const [error, setError] = useState(false);\r\n    const [length5Error, setLength5Error] = useState(false);\r\n    const [length15Error, setLength15Error] = useState(false);\r\n\r\n\r\n    //! handle image change \r\n    const handleImageChange = (e) => {\r\n        const selected = e.target.files[0];\r\n        const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\r\n\r\n        // matching types\r\n        if(selected && ALLOWED_TYPES.includes(selected.type)) {\r\n            let reader = new FileReader(); // constructor method or object property\r\n            reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\r\n            reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\r\n                setImgURL(reader.result);\r\n                setReserveImgURL(reader.result);\r\n                setError(false);\r\n            }\r\n        } else { // if they don't match, they will be set error.\r\n            setError(true);\r\n            // setLength5Error(false);\r\n            // setLength15Error(false);\r\n        }\r\n    }\r\n    //! check image change\r\n    const checkImageChange = (e) => {\r\n        if(imgURL === null) {\r\n            setImgURL(reserveImgURL);\r\n        }\r\n    }\r\n\r\n\r\n    //! show custom profile\r\n    const showCustomProfile = () => {\r\n        setWindowCustom(true); \r\n    }\r\n    //! close custom profile\r\n    const closeCustomProfile = () => {\r\n        setWindowCustom(false);\r\n        // close error when window closed\r\n        setError(false);\r\n        setLength5Error(false);\r\n        setLength15Error(false);\r\n        // setInputName = '' when window closed \r\n        setInputName('');\r\n    }\r\n\r\n    //! Set Name\r\n    const onChangeSetName = (evt) => {\r\n        let resultName = evt.target.value;\r\n        if(resultName.length > 0 && resultName.length < 5) {\r\n            setInputName(resultName);\r\n            setLength5Error(true);\r\n            setLength15Error(false);\r\n        } else if(resultName.length > 15) {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(true);\r\n        } else if(resultName.length === 0) {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(false);\r\n        } else {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(false);\r\n        }\r\n    }\r\n\r\n    //! Save profile \r\n    const onClickSaveProfile = () => {\r\n        if(inputName !== '') {\r\n            if(inputName.length < 5) {\r\n                setLength5Error(true);\r\n                setLength15Error(false);\r\n            } else if(inputName.length > 15) {\r\n                setLength5Error(false);\r\n                setLength15Error(true);\r\n            } else if(error === true || length5Error === true || length15Error === true) {\r\n                // can't close\r\n                setWindowCustom(true);\r\n            }  \r\n            else {\r\n                // set name\r\n                setProfileName(inputName);\r\n                // set image\r\n                setImgPreview(imgURL);\r\n                // clear state\r\n                setInputName('');\r\n                // close window custom profile\r\n                setWindowCustom(false);\r\n                // set Error\r\n                setLength5Error(false);\r\n                setLength15Error(false);\r\n                setError(false);\r\n                // call function getInfoNavbar at Input component\r\n                getInfoNavbar(imgURL, inputName);\r\n            } \r\n        } else if(error === true || length5Error === true || length15Error === true) {\r\n            setWindowCustom(true); \r\n        } else {\r\n            // set name\r\n            setProfileName(profileName);\r\n            // set image\r\n            setImgPreview(imgURL);\r\n            // clear state\r\n            setInputName('');\r\n            // close window custom profile\r\n            setWindowCustom(false);\r\n            // call function getInfoNavbar at Input component\r\n            getInfoNavbar(imgURL, profileName);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //! clear profile\r\n    const clearProfile = () => {\r\n        setProfileName('');\r\n        setInputName('');\r\n        setImgPreview(null);\r\n        setImgURL(null);\r\n        setWindowCustom(false);\r\n        //error\r\n        setLength5Error(false);\r\n        setLength15Error(false);\r\n        setError(false);\r\n        // call function getInfoNavbar at Input component\r\n        getInfoNavbar(null, '');\r\n        // Do not open Window Input Post\r\n        getStatusInputPost(true);\r\n    }\r\n\r\n\r\n    //! Component\r\n    return (\r\n        //! container\r\n        <div className=\"navbar_container\">\r\n            <div className=\"navbar_wrapper\">\r\n                {/* //! Navbar */}\r\n                <header className=\"navbar_header\">\r\n                    {/* logo */}\r\n                    <a href=\"/\">Post Somthing</a>\r\n\r\n                    {/* profile */}\r\n                    <div onClick={showCustomProfile} className=\"navbar_profile_wrapper\">\r\n                        <div id=\"customProfile\" className=\"customFileUpload\">\r\n                            {/* profile image */}\r\n                            <div className=\"navbar_profile_img\" style={{\r\n                                background: imgPreview \r\n                                ? `url('${imgPreview}') no-repeat center/cover`\r\n                                : `#fff`\r\n                            }}>\r\n                            </div>\r\n                            {/* profile name */}\r\n                            <div className=\"nav_profile_name\">\r\n                                {typeof profileName && profileName.length <= 15 && profileName.length >= 5\r\n                                    ? <p>{profileName}</p>\r\n                                    : <p>Enter name</p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* icon social media */}\r\n                    <div className=\"navbar_icon\">\r\n                        <a rel=\"noopener noreferrer\" href=\"https://github.com/wanthanai\" target=\"_blank\"><i class=\"fab fa-github\"></i></a>\r\n                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/wanthanaiK/\" target=\"_blank\"><i class=\"fab fa-facebook\"></i></a>\r\n                        <a rel=\"noopener noreferrer\" href=\"https://mail.google.com/mail/u/1/?hl=th&view=cm&tf=1&fs=1&to=%22wanthanai%20kaiphet%22%20%3Cwanthanai4Work%40gmail.com%3E\" target=\"_blank\"><i class=\"fas fa-envelope\"></i></a>\r\n                    </div>\r\n                </header>\r\n\r\n                {/*//! window custom profile */}\r\n                <div className=\"window_profile\" style={{\r\n                    display: windowCustom === true\r\n                    ? 'flex'\r\n                    : 'none'\r\n                }}> \r\n                    {/*//! close custom profile */}\r\n                    <button onClick={closeCustomProfile} className=\"closeWindow\">close</button>\r\n                    {/*//! error message */}\r\n                    <p className=\"errorMsg\">{error && `Supported Types (jpeg, jpg, png)`}</p>\r\n                    {length5Error && <p className=\"errorMsg\">Name' must be at least 5 char.</p>}\r\n                    {length15Error && <p className=\"errorMsg\">Name' cannot exceed 15 char.</p>}\r\n                    {/*//! set name */}\r\n                    <input onChange={onChangeSetName} value={inputName} type=\"text\" className=\"set_name\" placeholder=\"please enter name...\" />\r\n                    {/*//! upload file */}\r\n                    <label htmlFor=\"fileUpdate\" className=\"window_uploadFile\">change image</label>\r\n                    <input onClick={checkImageChange} onChange={handleImageChange} type=\"file\" id=\"fileUpdate\" />\r\n                    {/*//! save profile */}\r\n                    <button onClick={onClickSaveProfile} className=\"btn_save_profile\">save</button>\r\n                    {/*//! clear profile */}\r\n                    <button onClick={clearProfile} className=\"btn_clear\">clear</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nNavbar.propTypes = {\r\n    getInfoNavbar: PropTypes.func.isRequired, \r\n    getStatusInputPost: PropTypes.func.isRequired\r\n}","//! Import\r\nimport React, {useState} from 'react'\r\nimport './Input.css'\r\n// PropTypes\r\nimport PropTypes from 'prop-types'\r\n// Icon \r\nimport { BsImages } from \"react-icons/bs\";\r\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\r\n// Images uploading\r\nimport ImageUploading from 'react-images-uploading';\r\n\r\n\r\n\r\n\r\n//! Variable\r\n// Images Uploading\r\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\r\nconst maxNumber = 69;\r\n\r\n\r\n//! Function Component\r\nexport default function Input({ inputProfileImg, onClickShowImage, inputProfileName, getWindowInput, textInputPost, getUploadImage, images, getStatusFeeling , statusInputMain }) {\r\n    //! State\r\n    // State Image Input Post\r\n    \r\n    \r\n\r\n\r\n    //! Function Another\r\n    //* 1.Toggle Input Post\r\n    const toggleInput = () => {\r\n        getWindowInput(inputProfileName);\r\n    }\r\n\r\n    //* 2.Handle Image Change\r\n    const handleImageChange = (imageList, addUpdateIndex) => {\r\n        // console.log(imageList, addUpdateIndex);\r\n        getUploadImage(imageList, true);\r\n    }; \r\n\r\n    //* 3.Do not open Window Input Post\r\n\r\n\r\n\r\n\r\n\r\n    //! Main Component\r\n    return(\r\n        //! Container \r\n        <div className=\"container\">\r\n            {/*//! header image */}\r\n            <div className=\"header_img\">\r\n               {/* background image  */}\r\n            </div>\r\n\r\n            {/*//! input main */}\r\n            <div className=\"input_main_wrapper\">\r\n                {/*//! main top */}\r\n                <div className=\"main_top\">\r\n\r\n                    {/* top profile */}\r\n                    <div className=\"top_profile_wrapper\">\r\n                        <div onClick={() => onClickShowImage(inputProfileImg)} className=\"top_profile\" style={{\r\n                            background: inputProfileImg !== null\r\n                            ? `url('${inputProfileImg}') no-repeat center/cover`\r\n                            : `#fff`\r\n                        }}>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* top input */}\r\n                    {textInputPost !== '' \r\n                        ?  <div onClick={toggleInput} className=\"LinesEllipsis top_input\">{textInputPost.length > 40 ? `${textInputPost}...` : `${textInputPost}`}</div>   \r\n                        : <div onClick={toggleInput} className=\"top_input\">{inputProfileName !== '' ? `What are you thinking? ${inputProfileName}` : 'What are you thinking? ...'}</div>\r\n                    }\r\n                </div>\r\n                {/*//! main bottom */}\r\n                <div className=\"main_bottom\">\r\n                    {/* bottom image */}\r\n                    <ImageUploading\r\n                        multiple\r\n                        value={images}\r\n                        onChange={handleImageChange}\r\n                        maxNumber={maxNumber}\r\n                        dataURLKey=\"data_url\"\r\n                        acceptType={acceptType}\r\n                        maxFileSize={4194304}\r\n                    >\r\n                        {({\r\n                            imageList,\r\n                            onImageUpload,\r\n                            onImageRemoveAll,\r\n                            onImageUpdate,\r\n                            onImageRemove,\r\n                            isDragging,\r\n                            dragProps,\r\n                        }) => (\r\n                            <div \r\n                                className=\"bottom_image\"\r\n                                onClick={onImageUpload}\r\n                            >\r\n                                <BsImages \r\n                                    style={{\r\n                                    marginRight: '10px',\r\n                                    color: '#45bd62',\r\n                                    fontSize: '23px'\r\n                                }}/>\r\n                                Image\r\n                            </div>    \r\n                        )}\r\n                    </ImageUploading>\r\n\r\n                    {/* bottom feeling */}\r\n                    <div \r\n                        className=\"bottom_feeling\"\r\n                        onClick={() => getStatusFeeling(true)}\r\n                    >\r\n                        <RiEmotionLaughLine \r\n                            style={{\r\n                            marginRight: '10px',\r\n                            color: '#f7b928',\r\n                            fontSize: '23px'\r\n                        }}/>\r\n                        Feeling\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nInput.propTypes = {\r\n    inputProfileImg: PropTypes.string,\r\n    onClickShowImage: PropTypes.func.isRequired,\r\n    inputProfileName: PropTypes.string.isRequired,\r\n    getWindowInput: PropTypes.func.isRequired, \r\n    textInputPost: PropTypes.string.isRequired, \r\n    getUploadImage: PropTypes.func.isRequired,\r\n    images: PropTypes.object.isRequired, \r\n    getStatusFeeling: PropTypes.func.isRequired, \r\n    statusInputMain: PropTypes.bool.isRequired\r\n}","//! Import\n// React \nimport React, { useRef, useState, useEffect } from \"react\";\n// Axios\n// import { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from 'react-axios'\nimport axios from 'axios';\n// Style\nimport \"./App.css\";\nimport feelingJSON from './feeling';\n// Component\nimport Navbar from \"./component/Navbar\";\nimport Input from \"./component/Input\";\n// Icon\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport { GrEmoji } from \"react-icons/gr\";\nimport { BsImages } from \"react-icons/bs\";\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\nimport { IoClose, IoArrowBackOutline } from \"react-icons/io5\";\nimport { BiSearchAlt } from \"react-icons/bi\";\n// Textarea auto-resize\nimport TextareaAutosize from \"react-textarea-autosize\";\n// Emoji-picker\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n// Tooltip\nimport ReactTooltip from 'react-tooltip';\n// Images uploading\nimport ImageUploading from 'react-images-uploading';\n// Alert Message\nimport { useAlert } from \"react-alert\";\n\n\n\n\n//! Variable\n// Images Uploading\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\n\n\n\n//! Function Component\nexport default function App() {\n    //! State\n    // State Image Profile\n    const [inputProfileImg, setInputProfileImg] = useState(null);\n    const [urlShowImage, setUrlShowImage] = useState(\"\");\n    // State Image Input Post\n    const [images, setImages] = useState([]);\n    const maxNumber = 69;\n    // State Name\n    const [inputProfileName, setInputProfileName] = useState(\"\");\n    // State Text Input Post\n    const [fontSizeInput, setFontSizeInput] = useState(\"big\");\n    const [textInputPost, setTextInputPost] = useState(\"\");\n    // State Emoji Toggle\n    const [windowEmoji, setWindowEmoji] = useState(false);\n    // State Window Input Post Toggle\n    const [windowInputPost, setWindowInputPost] = useState(false);\n    // State Window Remove All Images List\n    const [windowRemoveAllImg, setWindowRemoveAllImg] = useState(false);\n    // State Slide \n    const [slideResult, setSlideResult] = useState('');\n    const [slideSize, setSlideSize] = useState('');\n    // State Feeling\n    const [feelingItems, setFeelingItems] = useState([]);\n    // Feeling Status\n    const [feelingStatus, setFeelingStatus] = useState('?');\n    // Search Term\n    const [searchTerm, setSearchTerm] = useState('');\n    // Do not open Window Input Post\n    const [statusInputMain, setStatusInputMain] = useState(false);\n\n\n\n    //! useAlert();\n    const alert = useAlert();\n\n\n    //! useRef\n    const inputPostRef = useRef(null);\n    const slideItem = useRef(null);\n\n    //! useEffect\n    useEffect(() => {});\n\n\n    \n\n\n    //! Function Another\n    //* 1. get info from Navbar\n    const getInfoNavbar = (imgURLtoInput, profileName) => {\n      setInputProfileImg(imgURLtoInput);\n      setInputProfileName(profileName);\n    };\n\n    //* 2. onClick show image\n    const onClickShowImage = (urlImg) => {\n      setUrlShowImage(urlImg);\n    };\n  \n    //* 3. onClick close image\n    const onClickCloseImage = () => {\n      setUrlShowImage(\"\");\n    };\n  \n    //* 4. Change font size input Post\n    const rowCount = (evt) => {\n      setTextInputPost(evt.target.value);\n    \n      let row = evt.target.offsetHeight;\n    //   console.log(evt.target.offsetHeight);\n    \n      if (fontSizeInput === \"big\") { //big font\n        if (row > 172) {\n          setFontSizeInput(\"small\");\n        } \n      }\n      if (fontSizeInput === \"small\") { //small font\n        if (evt.target.value.length === 0) {\n          setFontSizeInput(\"big\");\n        } \n      }\n    };\n  \n    //* 5. Add Emoji\n    const addEmoji = (e) => {\n      // console.log(e);\n    \n      // emoji concat text\n      setTextInputPost(`${textInputPost}${e.native}`);\n    };\n  \n    //* 6. Emoji Toggle\n    const toggleEmoji = () => {\n      if (!windowEmoji) {\n        setWindowEmoji(true);\n      } else {\n        setWindowEmoji(false);\n      }\n    };\n  \n    //* 7. Get Status and Open Window Input Post\n    const getWindowInput = (inputProfileName) => {\n      //   console.log(statusWindowInput);\n      if (inputProfileName !== \"\") setWindowInputPost(true);\n      else {\n        alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        setWindowInputPost(false);\n      } \n    };\n  \n    //* 8. Close Input Post\n    const closeInputPost = () => {\n      if (windowInputPost === true) {\n        setWindowInputPost(false);\n      } \n    };\n  \n    //* 9. handle image change  \n    // const handleImageChange = (e) => { //! ไม่ใช้เเล้ว เพราะมีข้อจำกัดในด้านการอัพโหลดที่ไม่สามารถอัพโหลดรูปซ้ำได้\n    //     const selected = e.target.files[0];\n    //     const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\n\n    //     // matching types\n    //     if(selected && ALLOWED_TYPES.includes(selected.type)) {\n    //         let reader = new FileReader(); // constructor method or object property\n    //         reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\n    //         reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\n    //             let imgURL = reader.result;\n    //             let result = {imgURL, id};\n\n    //             setInputPostImgURL([result, ...inputPostImgURL]);\n                \n    //             id++\n    //         }\n    //     } else { // if they don't match, they will be set error.\n    //         console.log('file not supported.');            \n    //     }\n    // }\n\n    //* 10. Evolution handle image change #1\n    const handleImageChange = (imageList, addUpdateIndex) => {\n        // console.log(imageList, addUpdateIndex);\n        setImages(imageList, addUpdateIndex);\n    }; \n\n\n    //* 11 Slide Next\n    const slideRightFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setFeelingItems(feelingJSON.feelings);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('right');\n        setWindowEmoji(false);\n    }\n\n    //* 12. Slide Previous\n    const slideLeftFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('left');\n    }\n\n    //* 13. Get Status Upload Image\n    const getUploadImage = (value, statusBool) => {\n        setImages(value, images);\n        if(inputProfileName === '') {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        } else {\n            setWindowInputPost(statusBool);\n        }\n        \n    }\n    //* 14. Get Status Feeling\n    const getStatusFeeling = async(statusBool) => {\n        if(statusBool === true && inputProfileName !== '') {\n            await setWindowInputPost(statusBool);\n            slideRightFunc();\n        } else {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        }\n    }\n\n    //* 15. Do not open Window Input Post\n    const getStatusInputPost = (statusBool) => {\n        if(statusBool === true) {\n            setTextInputPost('');\n            setStatusInputMain(statusBool);\n        } else {\n            setStatusInputMain(false);\n        }\n    } \n\n\n\n\n    //! Small Component\n    //* 1. Show background and image\n    const showBackgroundAndImage = (\n      <div\n        onClick={onClickCloseImage}\n        className={\n          urlShowImage === \"\" ? \"main_show_image close\" : \"main_show_image show\"\n        }\n      >\n        '{/* show image */}\n        <div\n          className=\"show_image\"\n          style={{\n            background:\n              urlShowImage !== null\n                ? `url('${urlShowImage}') no-repeat center/contain`\n                : \"#fff\",\n          }}\n        ></div>\n      </div>\n    );\n        \n    //* 2.1 Emoji Toggle\n    const emojiToggle = (\n        <>\n            <GrEmoji \n                onClick={toggleEmoji} \n                className=\"emoji_toggle\" \n                data-tip=\"emoji\" \n                data-delay-show=\"300\" \n                data-effect=\"solid\" \n                data-type=\"light\" \n                data-border=\"true\"\n                data-text-color=\"#000\"\n                data-background-color=\"rgb(209, 208, 208, 1)\"\n                data-border-color=\"rgb(109, 109, 109)\"\n            />\n            <ReactTooltip />\n        </>\n    );\n    \n    //* 2.2 Emoji Picker\n    const emojiPicker = (\n      <span\n        className={\n          !windowEmoji\n            ? \"emoji_picker_wrapper close\"\n            : \"emoji_picker_wrapper show\"\n        }\n      >\n        <Picker className=\"emoji_picker\" onSelect={addEmoji} />\n      </span>\n    );\n\n\n    //* 2. Show Input Post\n    const showInputPost = (\n        //! show input post \n        <div className={!windowInputPost ? \"main_show_input close\" : \"main_show_input show\"\n        }>  \n\n            {/*//! emoji picker */}\n            <div className=\"emoji_picker_container\">\n                {emojiPicker} {/* small component */}\n            </div>\n\n            {/* //! Slide / main show input wrapper */}\n            <div className=\"main_show_input_wrapper\"\n                // Balance of height \n                style={slideResult === 'right' ? {height: '329px'} : {height: 'auto'}}\n            >\n\n                {/*//! Slide Item */}\n                <div \n                    className=\"slide_item\" \n                    ref={slideItem}\n                    style={\n                        slideResult === 'right' \n                        ? {transform: `translateX(-${slideSize+2}px)`}\n                        : {transform: `translateX(-0px)`}\n                    }\n                    >\n\n                    {/* input header */}\n                    <div className=\"show_input_header\">\n                        {/* header text */}\n                            <p>Create Post</p>\n                        {/* btn close */}\n                        <div className=\"btn_close_input\">\n                            {/* close input post */}\n                            <AiFillCloseCircle\n                                onClick={closeInputPost}\n                                className=\"icon_close_input\"\n                            />\n                        </div>\n                    </div>\n\n                    {/* feeling status */}\n                    <div className=\"feeling_status\">\n                        <p>{inputProfileName} feeling : <span>{feelingStatus}</span></p>\n                    </div> \n\n                    {/* input main */}\n                    <div className=\"show_input_main\">\n                        <TextareaAutosize\n                            minRows={6}\n                            maxRows={15}\n                            className=\"input_textarea\"\n                            placeholder={\n                              !inputProfileName\n                                ? \"thinking ?\"\n                                : `thinking ? ${inputProfileName}`\n                            }\n                            ref={inputPostRef}\n                            onChange={rowCount}\n                            value={textInputPost}\n                            style={{\n                              fontSize: fontSizeInput === \"big\" ? \"1.3em\" : \"0.9em\",\n                            }}\n                        />\n                        {/*//! emoji toggle */}\n                        {emojiToggle} {/* small component */}\n                    </div>\n                    {/*//! Show image Input Post */}\n                    <ImageUploading\n                        multiple\n                        value={images}\n                        onChange={handleImageChange}\n                        maxNumber={maxNumber}\n                        dataURLKey=\"data_url\"\n                        acceptType={acceptType}\n                        maxFileSize={4194304}\n                    >\n                        {({\n                            imageList,\n                            onImageUpload,\n                            onImageRemoveAll,\n                            onImageUpdate,\n                            onImageRemove,\n                            isDragging,\n                            dragProps,\n                        }) => (\n                            <>\n                                <ul className=\"image_input_post\">\n                                    {images.length <= 4 \n                                        ? \n                                        images.map((image, index) => \n                                            <li \n                                                className=\"li_images\"\n                                                key={index} \n                                                id={index} \n                                                style={{background: `url(${image.data_url}) no-repeat center/cover`}}\n                                            >\n                                                <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                            </li>\n                                        )\n                                        : \n                                        images.map((image, index) =>\n                                        <> \n                                            <li \n                                                className={images.length > 4 ? \"li_images checkLength nPlus5CLose\" : \"li_images\"} \n                                                key={index} \n                                                id={index} \n                                                style={{background: `url(${image.data_url}) no-repeat center/cover`}}>\n                                                    <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                            </li>\n                                            {/* image counting and remove all image list */}\n                                            <div onClick={() => setWindowRemoveAllImg(true)} className=\"images_counting\">{`+${images.length - 4}`}</div>\n                                        </>\n                                        )\n                                    }\n                                </ul>    \n                                {/*//! input addon wrapper */}\n                                <div className=\"input_addon_wrapper\">\n                                    {/* image */}\n                                    <span>\n                                        {/* button upload image */}\n                                        <BsImages \n                                            className=\"input_image\"\n                                            onClick={onImageUpload}\n                                            // tooltip\n                                            data-delay-show=\"300\" \n                                            data-effect=\"solid\" \n                                            data-type=\"light\" \n                                            data-tip=\"image\" \n                                            data-border=\"true\"\n                                            data-text-color=\"#000\"\n                                            data-background-color=\"rgb(209, 208, 208, 1)\"\n                                            data-border-color=\"rgb(109, 109, 109)\"\n                                        />\n                                        <ReactTooltip />\n                                    </span>\n                                    {/* feeling */}\n                                    <span>\n                                        {/* button feeling */}\n                                        <RiEmotionLaughLine \n                                            onClick={slideRightFunc}\n                                            className=\"input_feeling\" \n                                            // tootip\n                                            data-delay-show=\"300\" \n                                            data-effect=\"solid\" \n                                            data-type=\"light\" \n                                            data-tip=\"feelings\" \n                                            data-border=\"true\"\n                                            data-text-color=\"#000\"\n                                            data-background-color=\"rgb(209, 208, 208, 1)\"\n                                            data-border-color=\"rgb(109, 109, 109)\"\n                                        />\n                                        <ReactTooltip />\n                                    </span>\n                                </div>\n                                {/*//! Window Remove All Images List */}\n                                <div className={windowRemoveAllImg !== false ? \"removeALl_wrapper show\" : \"removeALl_wrapper close\"}>\n                                    <button onClick={() => { \n                                        onImageRemoveAll() \n                                        setWindowRemoveAllImg(false) \n                                    }}>Remove All</button>\n                                    <button onClick={() => setWindowRemoveAllImg(false)}>cancle</button>\n                                </div>\n                                <div className={windowRemoveAllImg !== false ? \"box_removeAll show\" : \"box_removeAll close\"}></div>\n                            </>\n                        )}\n                    </ImageUploading>\n                </div>\n\n                {/*//! Slide Item */}\n                <div \n                    className=\"slide_item\"\n                    style={\n                        slideResult === 'right' \n                        ? {transform: `translateX(-${slideSize}px)`}\n                        : {transform: `translateX(${slideSize+2}px)`}\n                    }\n                >\n                    {/*//! Feeling Window Input Post */}\n                    {/* header */}\n                    <div className=\"feeling_header\">\n                        {/* Button Slide Left / Previous */}\n                        <div className=\"feeling_slide_back_wrapper\">\n                            <IoArrowBackOutline\n                                onClick={slideLeftFunc}\n                                className=\"feeling_slide_back\"\n                            />\n                        </div>\n                        {/* text header */}\n                        <p className=\"text_header\">Feelings</p>\n                    </div>\n\n                    {/* search feeling */}\n                    <div className=\"search_feeling_wrapper\">\n                        <input \n                            onChange={(e) => setSearchTerm(e.target.value)}\n                            className=\"search_feeling\" \n                            type=\"text\" \n                            placeholder=\"Search\" \n                        />\n                        <BiSearchAlt className=\"search_icon_feeling\"/>\n                    </div>\n\n                    {/* feeling items */}\n                    <ul className=\"feelings_items_wrapper\">\n                        {/* Search filter */}\n                        {feelingItems.filter((value) => {\n                            if(searchTerm === \"\") {\n                                return value;\n                            } else if (value.feeling_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                return value;\n                            } \n                        }).map((value, key) => {\n                            // console.log(value);\n                            return (\n                                <li \n                                    className=\"feeling_item\"\n                                    key={key}\n                                    onClick={() => {\n                                        setFeelingStatus(value.feeling_name)\n                                        setSlideResult('left');\n                                    }}\n                                >   \n                                    <span className=\"feeling_icon\">\n                                        <img src={value.icon} alt=\"feeling-icon\" />\n                                    </span> \n                                    {value.feeling_name}\n                                </li>\n                            )    \n                            }\n                        )}\n                    </ul>\n                </div>\n\n            </div>\n        </div>\n    )   \n    \n\n\n\n\n  //! Main Component\n  return (\n    //! App\n    <div className=\"App\">\n        {/* Navbar */}\n        <Navbar \n            getInfoNavbar={getInfoNavbar} \n            getStatusInputPost={getStatusInputPost}\n        />\n        {/* Input */}\n        <Input\n            onClickShowImage={onClickShowImage}\n            inputProfileImg={inputProfileImg}\n            inputProfileName={inputProfileName}\n            windowInputPost={windowInputPost}\n            getWindowInput={getWindowInput}\n            textInputPost={textInputPost}\n            getUploadImage={getUploadImage}\n            images={images}\n            getStatusFeeling={getStatusFeeling}  \n            statusInputMain={statusInputMain}\n        />\n        {/*//! main show background and image */}\n        {showBackgroundAndImage} {/* small component */}\n\n        {/* //! main show input */}\n        {showInputPost} {/* small component */}\n    </div>\n  );\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//! React Alert Message\nimport { positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\n\n//! Variable\n// config alert message\nconst options = {\n  timeout: 3000,\n  position: positions.TOP_CENTER\n};\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider  template={AlertTemplate} {...options}>\n      <App />\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}