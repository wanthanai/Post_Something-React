{"version":3,"sources":["component/Navbar.js","component/Input.js","component/PostHasImg.js","actions/index.js","App.js","reducers/deleteImgOne.js","index.js"],"names":["Navbar","getInfoNavbar","getStatusInputPost","clearStatusFeeling","clearImagesPost","toggleWindowOptionPost","isWindowNavbar","toggleWindowNavbar","onClickCloseImage","useState","imgURL","setImgURL","imgPreview","setImgPreview","reserveImgURL","setReserveImgURL","inputName","setInputName","profileName","setProfileName","error","setError","length5Error","setLength5Error","length15Error","setLength15Error","className","href","onClick","id","style","background","length","rel","target","class","display","onChange","evt","resultName","value","type","placeholder","htmlFor","e","selected","files","includes","reader","FileReader","readAsDataURL","onloadend","result","acceptType","Input","inputProfileImg","onClickShowImage","inputProfileName","getWindowInput","textInputPost","getUploadImage","imagesPosts","getStatusFeeling","countTextInputPost","toggleInput","multiple","imageList","addUpdateIndex","maxNumber","dataURLKey","maxFileSize","onImageUpload","onImageRemoveAll","onImageUpdate","onImageRemove","isDragging","dragProps","onClickCapture","marginRight","color","fontSize","idImagesPost","hour","minute","PostHasImg","idPost","img","title","feelingStatus","feelingIcon","strTime","setListImagesPost","timeNow","openWindowListImagesPost","receiveIdPost","setIndexListImages","hourPost","minutePost","deletePhotoOnPost","deletePost","EditPost","postMinute","setPostMinute","postHour","setPostHour","dayAllow","setDayAllow","useEffect","console","log","runCountMinutePost","refTextPost","useRef","statusWindowOptionPost","useSelector","state","isWindowOptionPost","idOptionPost","openListImagesPost","a","countMinute","setInterval","clearInterval","runCountHourPost","second","countHour","deletePhoto","whenClickEditPost","alt","src","ref","map","data_url","image","prototype","PropTypes","string","isRequired","func","number","object","isRequire","allowDay","bool","increment_index_list_images","index","indexIncrement","decrement_index_list_images","status","indexDecrement","statusDecrementIndex","set_list_images_post","images","listImagesPost","set_list_image_deleted","imgDeleted","set_text_input_post","text","set_images_posts","set_count_text_input_post","set_feeling_status","set_feeling_icon","url","set_idPost_showing","idPostShowing","set_status_post_button","statusPostButton","toggle_window_input_post","statusWindowInputPost","toggle_window_list_imagesPost","note","noteWindowListImagesPost","toggle_window_delete_img","toggle_window_option_post","toggle_window_navbar","statusWindowNavbar","toggle_window_editPost","statusWindowEditPost","toggle_window_removeAllimg","statusWindowRemoveAllImg","toggle_window_emoji","statusWindowEmoji","connect","data","props","setInputProfileImg","urlShowImage","setUrlShowImage","setInputProfileName","fontSizeInput","setFontSizeInput","slideResult","setSlideResult","slideSize","setSlideSize","slideSizeEditPost","setSlideSizeEditPost","slideResultEditPost","setSlideResultEditPost","feelingItems","setFeelingItems","searchTerm","setSearchTerm","alert","useAlert","inputPostRef","slideItem","slideItemEditPost","urlImg","dispatch","document","querySelector","overflow","rowCount","myStringInputPost","enterCount","match","spaceCount","split","row","offsetHeight","handleImageChange","idImgPost","imageListTemp","push","slideRightFunc","feelingJSON","feelings","current","clientWidth","slideRightEditPost","statusBool","addPost","ampm","month","Date","toLocaleString","day","getDate","postHours","getHours","postMinutes","getMinutes","getState","posts","set_posts","thunk_action_setPosts","i","q","splice","thunk_action_deletePhoto","thunk_action_deletePost","thunk_action_editPost","showBackgroundAndImage","emojiToggle","emojiPicker","isWindowEmoji","bottom","onSelect","native","showInputPost","isWindowInputPost","top","right","height","transform","minRows","maxRows","isWindowRemoveAllImg","filter","feeling_name","toLowerCase","key","icon","ShowListImagePost","isWindowListImagesPost","isLoadingDeleteOne","isDeleteLastImg","indexListImages","isWindowDeleteImg","store","setTimeout","isDeleteSuccess","showEditPost","isWindowEditPost","copyright","imgURLtoInput","post","initialstate","listImageDeleted","getTime","asyncDeleteImgOnWindowReducer","action","Object","assign","options","timeout","position","positions","TOP_CENTER","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","template","AlertTemplate","getElementById"],"mappings":"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","file":"static/js/main.f90d1598.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// style css\r\nimport './Navbar.css';\r\nimport './responsive.css'\r\n\r\n\r\n//! Function Component\r\nexport default function Navbar({ getInfoNavbar, getStatusInputPost, clearStatusFeeling, clearImagesPost, toggleWindowOptionPost, isWindowNavbar, toggleWindowNavbar, onClickCloseImage }) {\r\n    //! State Image\r\n    const [imgURL, setImgURL] = useState(null);    \r\n    const [imgPreview, setImgPreview] = useState(null);\r\n    const [reserveImgURL, setReserveImgURL] = useState(null);\r\n    //! State Name\r\n    const [inputName, setInputName] = useState('');\r\n    const [profileName, setProfileName] = useState('');\r\n    //! State Error\r\n    const [error, setError] = useState(false);\r\n    const [length5Error, setLength5Error] = useState(false);\r\n    const [length15Error, setLength15Error] = useState(false);\r\n\r\n\r\n    //! handle image change \r\n    const handleImageChange = (e) => {\r\n        const selected = e.target.files[0];\r\n        const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\r\n\r\n        // matching types\r\n        if(selected && ALLOWED_TYPES.includes(selected.type)) {\r\n            let reader = new FileReader(); // constructor method or object property\r\n            reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\r\n            reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\r\n                setImgURL(reader.result);\r\n                setReserveImgURL(reader.result);\r\n                setError(false);\r\n            }\r\n        } else { // if they don't match, they will be set error.\r\n            setError(true);\r\n            // setLength5Error(false);\r\n            // setLength15Error(false);\r\n        }\r\n    }\r\n    //! check image change\r\n    const checkImageChange = (e) => {\r\n        if(imgURL === null) {\r\n            setImgURL(reserveImgURL);\r\n        }\r\n    }\r\n\r\n\r\n    //! show custom profile\r\n    const showCustomProfile = () => {\r\n        toggleWindowNavbar('toggle');\r\n        // Do not open Window Input Post\r\n        getStatusInputPost(false);\r\n        // close window option post\r\n        toggleWindowOptionPost('close', 0);\r\n        // close image showing\r\n        onClickCloseImage();\r\n    }\r\n    //! close custom profile\r\n    const closeCustomProfile = () => {\r\n        toggleWindowNavbar('close');\r\n        // close error when window closed\r\n        setError(false);\r\n        setLength5Error(false);\r\n        setLength15Error(false);\r\n        // setInputName = '' when window closed \r\n        setInputName('');\r\n    }\r\n\r\n    //! Set Name\r\n    const onChangeSetName = (evt) => {\r\n        let resultName = evt.target.value;\r\n        if(resultName.length > 0 && resultName.length < 5) {\r\n            setInputName(resultName);\r\n            setLength5Error(true);\r\n            setLength15Error(false);\r\n        } else if(resultName.length > 15) {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(true);\r\n        } else if(resultName.length === 0) {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(false);\r\n        } else {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(false);\r\n        }\r\n    }\r\n\r\n    //! Save profile \r\n    const onClickSaveProfile = () => {\r\n        if(inputName !== '') {\r\n            if(inputName.length < 5) {\r\n                setLength5Error(true);\r\n                setLength15Error(false);\r\n            } else if(inputName.length > 15) {\r\n                setLength5Error(false);\r\n                setLength15Error(true);\r\n            } else if(error === true || length5Error === true || length15Error === true) {\r\n                // can't close\r\n                toggleWindowNavbar('show');\r\n            }  \r\n            else {\r\n                // set name\r\n                setProfileName(inputName);\r\n                // set image\r\n                setImgPreview(imgURL);\r\n                // clear state\r\n                setInputName('');\r\n                // close window custom profile\r\n                toggleWindowNavbar('close');\r\n                // set Error\r\n                setLength5Error(false);\r\n                setLength15Error(false);\r\n                setError(false);\r\n                // call function getInfoNavbar at Input component\r\n                getInfoNavbar(imgURL, inputName);\r\n            } \r\n        } else if(error === true || length5Error === true || length15Error === true) {\r\n            toggleWindowNavbar('show');\r\n        } else {\r\n            // set name\r\n            setProfileName(profileName);\r\n            // set image\r\n            setImgPreview(imgURL);\r\n            // clear state\r\n            setInputName('');\r\n            // close window custom profile\r\n            toggleWindowNavbar('close');\r\n            // call function getInfoNavbar at Input component\r\n            getInfoNavbar(imgURL, profileName);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //! clear profile\r\n    const clearProfile = () => {\r\n        toggleWindowNavbar('close');\r\n        setProfileName('');\r\n        setInputName('');\r\n        setImgPreview(null);\r\n        setImgURL(null);\r\n        //error\r\n        setLength5Error(false);\r\n        setLength15Error(false);\r\n        setError(false);\r\n        // call function getInfoNavbar at Input component\r\n        getInfoNavbar(null, '');\r\n        // Do not open Window Input Post\r\n        getStatusInputPost(true);\r\n        // Clear ImagesPost in Input Post\r\n        clearImagesPost();\r\n        // Clear Status Feeling in Input Post\r\n        clearStatusFeeling();\r\n    }\r\n\r\n\r\n    //! Component\r\n    return (\r\n        //! container\r\n        <div className=\"navbar_container\">\r\n            <div className=\"navbar_wrapper\">\r\n                {/* //! Navbar */}\r\n                <header className=\"navbar_header\">\r\n                    {/* logo */}\r\n                    <a href=\"/\">Post Something</a>\r\n\r\n                    {/* profile */}\r\n                    <div onClick={showCustomProfile} className=\"navbar_profile_wrapper\">\r\n                        <div id=\"customProfile\" className=\"customFileUpload\">\r\n                            {/* profile image */}\r\n                            <div className=\"navbar_profile_img\" style={{\r\n                                background: imgPreview \r\n                                ? `url('${imgPreview}') no-repeat center/cover`\r\n                                : `#fff`\r\n                            }}>\r\n                            </div>\r\n                            {/* profile name */}\r\n                            <div className=\"nav_profile_name\">\r\n                                {typeof profileName && profileName.length <= 15 && profileName.length >= 5\r\n                                    ? <p>{profileName}</p>\r\n                                    : <p>Enter name</p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* icon social media */}\r\n                    <div className=\"navbar_icon\">\r\n                        <a rel=\"noopener noreferrer\" href=\"https://github.com/wanthanai\" target=\"_blank\"><i class=\"fab fa-github\"></i></a>\r\n                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/wanthanaiK/\" target=\"_blank\"><i class=\"fab fa-facebook\"></i></a>\r\n                        <a rel=\"noopener noreferrer\" href=\"https://mail.google.com/mail/u/1/?hl=th&view=cm&tf=1&fs=1&to=%22wanthanai%20kaiphet%22%20%3Cwanthanai4Work%40gmail.com%3E\" target=\"_blank\"><i class=\"fas fa-envelope\"></i></a>\r\n                    </div>\r\n                </header>\r\n\r\n                {/*//! window custom profile */}\r\n                <div className=\"window_profile\" style={{\r\n                    display: isWindowNavbar === true\r\n                    ? 'flex'\r\n                    : 'none'\r\n                }}> \r\n                    {/*//! close custom profile */}\r\n                    <button onClick={closeCustomProfile} className=\"closeWindow\">close</button>\r\n                    {/*//! error message */}\r\n                    <p className=\"errorMsg\">{error && `Supported Types (jpeg, jpg, png)`}</p>\r\n                    {length5Error && <p className=\"errorMsg\">Name' must be at least 5 char.</p>}\r\n                    {length15Error && <p className=\"errorMsg\">Name' cannot exceed 15 char.</p>}\r\n                    {/*//! set name */}\r\n                    <input onChange={onChangeSetName} value={inputName} type=\"text\" className=\"set_name\" placeholder=\"please enter name...\" />\r\n                    {/*//! upload file */}\r\n                    <label htmlFor=\"fileUpdate\" className=\"window_uploadFile\">change image</label>\r\n                    <input onClick={checkImageChange} onChange={handleImageChange} type=\"file\" id=\"fileUpdate\" />\r\n                    {/*//! save profile */}\r\n                    <button onClick={onClickSaveProfile} className=\"btn_save_profile\">save</button>\r\n                    {/*//! clear profile */}\r\n                    <button onClick={clearProfile} className=\"btn_clear\">clear</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nNavbar.propTypes = {\r\n    getInfoNavbar: PropTypes.func.isRequired, \r\n    getStatusInputPost: PropTypes.func.isRequired,\r\n    clearStatusFeeling: PropTypes.func.isRequired,\r\n    toggleWindowOptionPost: PropTypes.func.isRequired, \r\n    isWindowNavbar: PropTypes.bool.isRequired,\r\n    toggleWindowNavbar: PropTypes.func.isRequired, \r\n    onClickCloseImage: PropTypes.func.isRequired\r\n}","//! Import\r\nimport React from 'react'\r\nimport './Input.css'\r\nimport './responsive.css'\r\n// PropTypes\r\nimport PropTypes from 'prop-types'\r\n// Icon \r\nimport { BsImages } from \"react-icons/bs\";\r\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\r\n// Images uploading\r\nimport ImageUploading from 'react-images-uploading';\r\n\r\n\r\n\r\n\r\n\r\n//! Variable\r\n// Images Uploading\r\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\r\nconst maxNumber = 69;\r\n\r\n\r\n//! Function Component\r\nexport default function Input({ inputProfileImg, onClickShowImage, inputProfileName, getWindowInput, textInputPost, getUploadImage, imagesPosts, getStatusFeeling , countTextInputPost, toggleWindowOptionPost }) {\r\n    //! State\r\n    // State Image Input Post\r\n    \r\n    \r\n\r\n\r\n    //! Function Another\r\n    //* 1.Toggle Input Post\r\n    const toggleInput = () => {\r\n        getWindowInput(inputProfileName);\r\n    }\r\n\r\n    //* 2.Handle Image Change\r\n    const handleImageChange = (imageList, addUpdateIndex) => {\r\n        // console.log(imageList, addUpdateIndex);\r\n        getUploadImage(imageList, addUpdateIndex, true);\r\n    }; \r\n\r\n    //* 3.Do not open Window Input Post\r\n\r\n\r\n\r\n\r\n\r\n    //! Main Component\r\n    return(\r\n        //! Container \r\n        <div className=\"container\">\r\n            {/*//! header image */}\r\n            <div className=\"header_img\">\r\n               {/* background image  */}\r\n            </div>\r\n\r\n            {/*//! input main */}\r\n            <div className=\"input_main_wrapper\">\r\n                {/*//! main top */}\r\n                <div className=\"main_top\">\r\n\r\n                    {/* top profile */}\r\n                    <div className=\"top_profile_wrapper\">\r\n                        <div onClick={() => onClickShowImage(inputProfileImg)} className=\"top_profile\" style={{\r\n                            background: inputProfileImg !== null\r\n                            ? `url('${inputProfileImg}') no-repeat center/cover`\r\n                            : `#fff`\r\n                        }}>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {countTextInputPost !== 0 \r\n                        ? <div onClick={toggleInput} className=\"LinesEllipsis top_input\">{textInputPost.length > 40 ? `${textInputPost}...` : `${textInputPost}`}</div>   \r\n                        : <div onClick={toggleInput} className=\"top_input\">{inputProfileName !== '' ? `What are you thinking? ${inputProfileName}` : 'What are you thinking? ...'}</div>\r\n                    }\r\n                </div>\r\n                {/*//! main bottom */}\r\n                <div className=\"main_bottom\">\r\n                    {/* bottom image */}\r\n                    <ImageUploading\r\n                        multiple\r\n                        value={imagesPosts}\r\n                        onChange={handleImageChange}\r\n                        maxNumber={maxNumber}\r\n                        dataURLKey=\"data_url\"\r\n                        acceptType={acceptType}\r\n                        maxFileSize={4194304}\r\n                    >\r\n                        {({\r\n                            imageList,\r\n                            onImageUpload,\r\n                            onImageRemoveAll,\r\n                            onImageUpdate,\r\n                            onImageRemove,\r\n                            isDragging,\r\n                            dragProps,\r\n                        }) => (\r\n                            <div \r\n                                className=\"bottom_image\"\r\n                                onClick={onImageUpload}\r\n                                onClickCapture={() => toggleWindowOptionPost('close', 0)}\r\n                            >\r\n                                <BsImages \r\n                                    style={{\r\n                                    marginRight: '10px',\r\n                                    color: '#45bd62',\r\n                                    fontSize: '23px'\r\n                                }}/>\r\n                                Image\r\n                            </div>    \r\n                        )}\r\n                    </ImageUploading>\r\n\r\n                    {/* bottom feeling */}\r\n                    <div \r\n                        className=\"bottom_feeling\"\r\n                        onClick={() => getStatusFeeling(true)}\r\n                    >\r\n                        <RiEmotionLaughLine \r\n                            style={{\r\n                            marginRight: '10px',\r\n                            color: '#f7b928',\r\n                            fontSize: '23px'\r\n                        }}/>\r\n                        Feeling\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nInput.propTypes = {\r\n    inputProfileImg: PropTypes.string,\r\n    onClickShowImage: PropTypes.func.isRequired,\r\n    inputProfileName: PropTypes.string.isRequired,\r\n    getWindowInput: PropTypes.func.isRequired, \r\n    textInputPost: PropTypes.string.isRequired, \r\n    getUploadImage: PropTypes.func.isRequired,\r\n    imagesPosts: PropTypes.array.isRequired, \r\n    getStatusFeeling: PropTypes.func.isRequired, \r\n    countTextInputPost: PropTypes.number.isRequired,\r\n    toggleWindowOptionPost: PropTypes.func.isRequired\r\n}","//! Import\r\nimport React, { useRef, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './Post.css';\r\nimport './responsive.css';\r\n// Icon\r\nimport { HiDotsHorizontal } from \"react-icons/hi\";\r\nimport { BsFillLockFill } from \"react-icons/bs\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { TiDocumentDelete, TiPencil } from \"react-icons/ti\";\r\n// PropTypes\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n//! Variable\r\n// id Images Post\r\nlet idImagesPost = 1;\r\n// Time \r\nconst second = 1000;            // 1 second = 1000 ms\r\nconst minute = second * 60;     // 1 minute = 60,000 ms\r\nconst hour = minute * 60;       // 1 hour = 3,600,000 ms\r\nconst day = hour * 24;          // 1 day = 86,400,000 ms\r\n\r\n//! Main Component\r\nexport default function PostHasImg \r\n// parameters\r\n({\r\n    inputProfileImg, inputProfileName, onClickShowImage, idPost, img, title, feelingStatus, feelingIcon, strTime, timeNow,\r\n    setListImagesPost, openWindowListImagesPost, receiveIdPost, setIndexListImages, hourPost, minutePost,\r\n    toggleWindowOptionPost, deletePhotoOnPost, deletePost, EditPost\r\n}) {\r\n\r\n    //! useState\r\n    const [postMinute, setPostMinute] = useState(minutePost);\r\n    const [postHour, setPostHour] = useState(hourPost);\r\n    const [dayAllow, setDayAllow] = useState(false);\r\n\r\n    //! useEffect\r\n    useEffect(() => {\r\n        console.log(`hahhaa yooow! Post Id: ${idPost}`);\r\n        runCountMinutePost();\r\n    }, [])\r\n\r\n    //! useRef\r\n    const refTextPost = useRef(null);\r\n    \r\n    // if(textInputPost !== '') {\r\n    //     setWidthTextPost(refTextPost.current.children[0].offsetWidth);\r\n    // } \r\n\r\n    //! useSelector\r\n    const statusWindowOptionPost = useSelector(state => state.isWindowOptionPost);\r\n    const idOptionPost = useSelector(state => state.idOptionPost);\r\n\r\n    //! Function\r\n    //* 1. open window show list images post\r\n    const openListImagesPost = async() => {\r\n        // setState\r\n        await setListImagesPost(img);\r\n        await receiveIdPost(idPost);\r\n        await openWindowListImagesPost();\r\n        await setIndexListImages();\r\n    } \r\n\r\n    //* 2. Time Post\r\n    // 2.1 Count Minute\r\n    const countMinutePost = () => {\r\n        minutePost = minutePost + 1;\r\n        // console.log(minutePost);\r\n\r\n        setPostMinute(minutePost);\r\n        // console.log(postMinute);\r\n    }\r\n    // 2.2 Count Hour\r\n    const countHourPost = () => {\r\n        hourPost = hourPost + 1;\r\n        // console.log(hourPost);\r\n\r\n        setPostHour(hourPost);\r\n        // console.log(postHour);\r\n    }\r\n    // 2.3 Run\r\n    const runCountMinutePost = () => {\r\n        var countMinute = setInterval(() => {\r\n            if(minutePost !== 60) {\r\n                countMinutePost();\r\n            } else {\r\n                hourPost = hourPost + 1;\r\n                setPostHour(hourPost);\r\n\r\n                clearInterval(countMinute);\r\n                // console.log(`count minute End Post id: ${idPost}`);\r\n\r\n                // next Function\r\n                runCountHourPost();\r\n            } \r\n        }, minute);\r\n    }\r\n    // 2.4 Run\r\n    const runCountHourPost = () => {\r\n        var countHour = setInterval(() => {\r\n            if(hourPost > 0 && hourPost !== 24) {\r\n                countHourPost();\r\n            } else {\r\n                clearInterval(countHour);\r\n                setDayAllow(true);\r\n                // console.log(`count hour End Post id: ${idPost}`);\r\n            }\r\n        }, hour); \r\n    }\r\n    //* End - ( Time Post )\r\n\r\n    //* 3. Delete Photo \r\n    const deletePhoto = () => {\r\n        deletePhotoOnPost(idPost, img, title);\r\n    }\r\n\r\n    //* 4. Edit Post\r\n    const whenClickEditPost = () => {\r\n        EditPost(title, idPost, feelingStatus, img, feelingIcon);\r\n    }\r\n\r\n\r\n    //! Component\r\n    return (\r\n        <div className=\"post_container\">\r\n            <div className=\"post_wrapper\">\r\n\r\n                {img.length === 0\r\n                    ?\r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length === 1 \r\n                    ? \r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true \r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image\">\r\n                                {img.map((img) => {\r\n                                    return(\r\n                                        <li>\r\n                                            <img onClick={() => onClickShowImage(img.data_url)} src={img.data_url} alt=\"post-img\" />\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length === 2 \r\n                    ? \r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true \r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image twoImg\">\r\n                                {img.map((img) => {\r\n                                    idImagesPost++\r\n                                    return(\r\n                                        <li key={idImagesPost}>\r\n                                            <img onClick={() => onClickShowImage(img.data_url)} src={img.data_url} alt=\"post-img\" />\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length > 2 \r\n                    ?\r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name - feeling Wrapper */}\r\n                                <div className=\"name_feeling-wrapper\">\r\n                                    {/* name */}\r\n                                    <span className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</span>\r\n                                    {/* feeling is */}\r\n                                    <span className=\"post_feeling-is\">{feelingStatus !== '?' ? `is` : null}</span>\r\n                                    {/* feeling Icon */}\r\n                                    <span className=\"post_feeling-icon\">{feelingIcon !== '' ? <img alt=\"feeling-icon\" src={feelingIcon !== '' ? feelingIcon : null} /> : null}</span>\r\n                                    {/* feeling status */}\r\n                                    <span className=\"post_feeling\">{feelingStatus !== '?' ? `feeling ${feelingStatus}.` : null}</span>\r\n                                </div>\r\n                                {/* time */}\r\n                                {postMinute < 60\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postMinute === 0 ? 'Just now' : `${postMinute}m`}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {postHour > 0 && postHour < 23\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{postHour}h</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }\r\n                                {dayAllow === true\r\n                                    ? <p className=\"post_time\"><span className=\"post_strTime\">{strTime}</span><span> · <BsFillLockFill/></span></p>\r\n                                    : null\r\n                                }                                \r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            {/* three dot / button option */}\r\n                            <div className=\"post_top_right\" onClick={() => toggleWindowOptionPost('toggle', idPost)}>\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n\r\n                            {/* box */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true\r\n                                    ? \"box-option show\"\r\n                                    : \"box-option close\"\r\n                                }\r\n                            ></div>\r\n\r\n                            {/* window option post */}\r\n                            <div \r\n                                className={idOptionPost === idPost && statusWindowOptionPost === true \r\n                                    ? \"window_option-post show\"\r\n                                    : \"window_option-post close\"\r\n                                }\r\n                            >\r\n                                {/* edit post button */}\r\n                                <button \r\n                                    className=\"btn_edit_post\"\r\n                                    onClick={whenClickEditPost}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiPencil className=\"btn_icon\" style={{color: '#e2e1e1'}} />\r\n                                    <span className=\"edit_post-text\">Edit post</span>\r\n                                </button>\r\n                                {/* delete post button */}\r\n                                <button \r\n                                    className=\"btn_delete_post\"\r\n                                    onClick={() => deletePost(idPost)}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <RiDeleteBin5Line className=\"btn_icon\"/>\r\n                                    <span className=\"delete_post-text\">Delete post</span>\r\n                                </button>\r\n                                {/* delete image button */}\r\n                                <button \r\n                                    className={img.length !== 0 ? \"btn_delete_img show\" : \"btn_delete_img close\"}\r\n                                    onClick={deletePhoto}\r\n                                >\r\n                                    {/* icon & span */}\r\n                                    <TiDocumentDelete className=\"btn_icon\"/>\r\n                                    <span className=\"delete_img-text\">Delete photo</span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image moreThanTwo\">\r\n                                {img.map((image) => {\r\n                                    idImagesPost++\r\n                                    return(\r\n                                        <li key={idImagesPost}>\r\n                                            <div onClick={() => openListImagesPost()}>\r\n                                                <img src={image.data_url} alt=\"post-img\" />\r\n                                            </div>\r\n                                            <span className=\"number_moreThanTwo\">+{img.length - 2}</span>\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n                \r\n\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nPostHasImg.prototype = {\r\n    inputProfileImg: PropTypes.string.isRequired,\r\n    inputProfileName: PropTypes.string.isRequired, \r\n    onClickShowImage: PropTypes.func.isRequired, \r\n    id: PropTypes.number.isRequired,\r\n    img: PropTypes.object.isRequired,\r\n    title: PropTypes.string.isRequired, \r\n    setListImagesPost: PropTypes.func.isRequired,\r\n    openWindowListImagesPost: PropTypes.func.isRequired,\r\n    receiveIdPost: PropTypes.func.isRequired,\r\n    setIndexListImages: PropTypes.func.isRequired,\r\n    feelingStatus: PropTypes.string.isRequired,\r\n    strTime: PropTypes.string.isRequired,\r\n    timeNow: PropTypes.string.isRequire,\r\n    allowDay: PropTypes.bool.isRequire,\r\n    hourPost: PropTypes.number.isRequire,\r\n    minutePost: PropTypes.number.isRequire,\r\n    deletePhotoOnPost: PropTypes.func.isRequired,\r\n    deletePost: PropTypes.func.isRequired,\r\n    EditPost: PropTypes.func.isRequired\r\n}","import store from '../index';\r\n\r\n\r\n//! Action\r\n\r\n//! ( delete image ) - action \r\n// Delete Last Image\r\nexport const delete_last_img = () => {\r\n    return {\r\n        type: \"DELETE_LAST_IMG\"\r\n    }\r\n}\r\n// Loading Delete One\r\nexport const loading_deleteOne = () => {\r\n    return {\r\n        type: \"LOADING_DELETE_ONE\"\r\n    }\r\n}\r\n// Loading Delete Success\r\nexport const loading_deleteOne_success = () => {\r\n    return {\r\n        type: \"LOADING_DELETE_ONE_SUCCESS\"\r\n    }\r\n}\r\n// Loading Delete Last Image Success\r\nexport const loading_deleteLastImg_success = () => {\r\n    return {\r\n        type: \"LOADING_DELETE_LAST_IMG_SUCCESS\"\r\n    }\r\n}\r\n// Close Delete Success\r\nexport const close_delete_one_success = () => {\r\n    return {\r\n        type: \"CLOSE_DELETE_SUCCESS\"\r\n    }\r\n}\r\n// Index List Images { increment, decrement }\r\n// Increment +\r\nexport const increment_index_list_images = (index) => {\r\n    return {\r\n        type: \"INCREMENT_INDEX_LIST_IMAGES\",\r\n        indexIncrement: index\r\n    }\r\n}\r\n// Decrement - \r\nexport const decrement_index_list_images = (status, index) => {\r\n    return {\r\n        type: \"DECREMENT_INDEX_LIST_IMAGES\",\r\n        indexDecrement: index,\r\n        statusDecrementIndex: status\r\n    }\r\n}\r\n// Set Index List Images \r\nexport const set_index_list_images = () => {\r\n    return {\r\n        type: \"SET_INDEX_LIST_IMAGES\",\r\n    }\r\n}\r\n\r\n// Receive Img For Set List Images \r\nexport const set_list_images_post = (images) => {\r\n    return {\r\n        type: \"SET_LIST_IMAGE_POST\",\r\n        listImagesPost: images\r\n    }\r\n}\r\n\r\n// Set List Image Deleted\r\nexport const set_list_image_deleted = (img) => {\r\n    return {\r\n        type: \"SET_LIST_IMAGE_DELETED\",\r\n        imgDeleted: img\r\n    }\r\n}\r\n// ( delete all ) set list images post \r\nexport const set_list_images_post_deleteAll = () => {\r\n    return{\r\n        type: \"SET_LIST_IMAGES_DELETEALL\"\r\n    }\r\n}\r\n//! ( End ) - Delete image\r\n\r\n//! ( Posts ) - action\r\n// setPosts \r\nexport const set_posts = (posts) => {\r\n    return{\r\n        type: \"SET_POSTS\",\r\n        posts: posts\r\n    }\r\n}\r\n// Set Text Input Post \r\nexport const set_text_input_post = (text) => {\r\n    return{\r\n        type: \"SET_TEXT_INPUT_POST\",\r\n        textInputPost: text\r\n    }\r\n}\r\n// Set Images Posts\r\nexport const set_images_posts = (img) => {\r\n    return{\r\n        type: \"SET_IMAGES_POSTS\",\r\n        imagesPosts: img\r\n    }\r\n}\r\n// Set Count Text Input Post\r\nexport const set_count_text_input_post = (result) => {\r\n    return{\r\n        type: \"SET_COUNT_TEXT_INPUT_POST\",\r\n        countTextInputPost: result\r\n    }\r\n}\r\n// Set Feeling Status \r\nexport const set_feeling_status = (status) => {\r\n    return{\r\n        type: \"SET_FEELING_STATUS\",\r\n        feelingStatus: status\r\n    }\r\n}\r\n// Set Feeling Icon \r\nexport const set_feeling_icon = (url) => {\r\n    return{\r\n        type: \"SET_FEELING_ICON\",\r\n        feelingIcon: url\r\n    }\r\n}\r\n// Set Id Post Showing\r\nexport const set_idPost_showing = (id) => {\r\n    return{\r\n        type: \"SET_IDPOST_SHOWING\",\r\n        idPostShowing: id\r\n    }\r\n}\r\n// Set Status Post Button\r\nexport const set_status_post_button = (status) => {\r\n    return{\r\n        type: \"SET_STATUS_POST_BUTTON\",\r\n        statusPostButton: status\r\n    }\r\n}\r\n//! ( End ) - Post\r\n\r\n//! ( Window ) - action\r\n// toggle window input post\r\nexport const toggle_window_input_post = (status) => {\r\n    return{\r\n        type: \"TOGGLE_WINDOW_INPUT_POST\",\r\n        statusWindowInputPost: status\r\n    }\r\n}\r\n// Toggle Window List Images Post\r\nexport const toggle_window_list_imagesPost = (note) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_LIST_IMAGES_POST\",\r\n        noteWindowListImagesPost: note\r\n    }\r\n}\r\n// Toggle Window Delete Image\r\nexport const toggle_window_delete_img = (status) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_DELETE_IMG\",\r\n        status: status \r\n    }\r\n}\r\n// Toggle Window Option Post\r\nexport const toggle_window_option_post = (status, id) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_OPTION_POST\",\r\n        statusWindowOptionPost: status,\r\n        idOptionPost: id\r\n    }\r\n}\r\n// Toggle Window Navbar\r\nexport const toggle_window_navbar = (status) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_NAVBAR\",\r\n        statusWindowNavbar: status \r\n    }\r\n}\r\n// Toggle Window Edit Post\r\nexport const toggle_window_editPost = (status) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_EDITPOST\",\r\n        statusWindowEditPost: status\r\n    }\r\n}\r\n// Toggle Window Remove All Img\r\nexport const toggle_window_removeAllimg = (status) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_REMOVEALLIMG\",\r\n        statusWindowRemoveAllImg: status\r\n    }\r\n}\r\n// Toggle window Emoji\r\nexport const toggle_window_emoji = (status) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_EMOJI\",\r\n        statusWindowEmoji: status\r\n    }\r\n}\r\n//! ( End ) - Window\r\n\r\n\r\n\r\n//! Redux Thunk Middleware\r\n\r\n// delete one\r\nexport const thunk_action_deleteOne = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { indexListImages, listImagesPost, posts, idPostShowing } = getState();\r\n        // setListImageDeleted\r\n        dispatch(set_list_image_deleted(listImagesPost.filter(img => img.data_url === listImagesPost[indexListImages].data_url)));\r\n\r\n        // loading success\r\n        setTimeout(() => {\r\n            dispatch(toggle_window_delete_img('close'));\r\n            dispatch(loading_deleteOne_success());\r\n            dispatch(set_list_images_post(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    for(let q = 0; q < posts[i].imagesPosts.length; q++) {\r\n                        if(q === indexListImages) {\r\n                            posts[i].imagesPosts.splice(indexListImages, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }     \r\n            \r\n            // if only pictures - ( ถ้ามีแต่รูป ) => ก็จะให้ลบโพสไปด้วย\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    if(posts[i].textInputPost === '') {\r\n                        if(posts[i].imagesPosts.length === 0) {\r\n                            posts.splice(i, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }, 1200)\r\n        setTimeout(() => {\r\n            dispatch(close_delete_one_success());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// delete one - ( Delete Last Image )\r\nexport const thunk_action_deleteLastImg = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { indexListImages, listImagesPost, posts, idPostShowing } = getState();\r\n        // setListImageDeleted\r\n        dispatch(set_list_image_deleted(listImagesPost.filter(img => img.data_url === listImagesPost[indexListImages].data_url)));\r\n        // delete last image\r\n        dispatch(delete_last_img());\r\n\r\n        setTimeout(() => {\r\n            // set list image post\r\n            dispatch(set_list_images_post(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\r\n            // toggle window delete image\r\n            dispatch(toggle_window_delete_img('close'));\r\n            // loading delete success\r\n            dispatch(loading_deleteLastImg_success());\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    for(let q = 0; q < posts[i].imagesPosts.length; q++) {\r\n                        if(q === indexListImages) {\r\n                            posts[i].imagesPosts.splice(indexListImages, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }      \r\n            \r\n            // if only pictures - ( ถ้ามีแต่รูป ) => ก็จะให้ลบโพสไปด้วย\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    if(posts[i].textInputPost === '') {\r\n                        if(posts[i].imagesPosts.length === 0) {\r\n                            posts.splice(i, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }, 1200)\r\n        setTimeout(() => {\r\n            // close delete success\r\n            dispatch(close_delete_one_success());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// delete one - ( one image left )\r\nexport const thunk_action_oneImageLeft = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { indexListImages, listImagesPost, posts, idPostShowing } = getState();\r\n        // setListImageDeleted\r\n        dispatch(set_list_image_deleted(listImagesPost.filter(img => img.data_url === listImagesPost[indexListImages].data_url)));\r\n\r\n        setTimeout(() => {\r\n            // set list image post\r\n            dispatch(set_list_images_post(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\r\n            // toggle window delete image\r\n            dispatch(toggle_window_delete_img('close'));\r\n            // loading delete success\r\n            dispatch(loading_deleteOne_success());\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    for(let q = 0; q < posts[i].imagesPosts.length; q++) {\r\n                        if(q === indexListImages) {\r\n                            posts[i].imagesPosts.splice(indexListImages, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }             \r\n            \r\n            // if only pictures - ( ถ้ามีแต่รูป ) => ก็จะให้ลบโพสไปด้วย\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    if(posts[i].textInputPost === '') {\r\n                        if(posts[i].imagesPosts.length === 0) {\r\n                            posts.splice(i, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }, 1200)\r\n        setTimeout(() => {\r\n            // close delete success\r\n            dispatch(close_delete_one_success());\r\n            // close window\r\n            dispatch(toggle_window_list_imagesPost());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// delete all \r\nexport const thunk_action_deleteAll = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { posts, idPostShowing } = getState();\r\n\r\n        // loading success\r\n        setTimeout(() => {\r\n            dispatch(toggle_window_delete_img('close'));\r\n            dispatch(loading_deleteOne_success());\r\n            dispatch(set_list_images_post_deleteAll());\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    posts[i].imagesPosts.splice(0, posts[i].imagesPosts.length);\r\n                }\r\n            }\r\n            \r\n            // if only pictures - ( ถ้ามีแต่รูป ) => ก็จะให้ลบโพสไปด้วย\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    if(posts[i].textInputPost === '') {\r\n                        posts.splice(i, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }, 1200)\r\n        setTimeout(() => {\r\n            // close delete success\r\n            dispatch(close_delete_one_success());\r\n            // close window\r\n            dispatch(toggle_window_list_imagesPost());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// Set Posts ( thunk middleware )\r\nlet idPost = 1;\r\nexport const thunk_action_setPosts = () => {\r\n\r\n    const month = new Date().toLocaleString('default', {month: 'long'});\r\n    const day = new Date().getDate();\r\n    var postHours = new Date().getHours();\r\n    var postMinutes = new Date().getMinutes();\r\n\r\n    var ampm;\r\n    if(postHours => 12) ampm = 'PM'\r\n    else ampm = 'AM' \r\n\r\n    postHours = postHours % 12;\r\n    postHours = postHours ? postHours : 12; // ถ้า Hours = 0 จะให้เท่ากับ 12 / สมติว่าเที่ยงคือ 00:00 ก็จะเปลี่ยนเป็น 12\r\n    postMinutes = postMinutes < 10 ? '0'+postMinutes : postMinutes;\r\n    var strTime = `${month} ${day} at ${postHours}:${postMinutes} ${ampm}`\r\n\r\n    // state\r\n    var minutePost = 0;\r\n    var hourPost = 0;\r\n\r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const {textInputPost, imagesPosts, posts, feelingStatus, feelingIcon} = getState();\r\n    \r\n        // new Post\r\n        const newPost = {idPost, textInputPost, imagesPosts, feelingStatus, feelingIcon, strTime, minutePost, hourPost};\r\n        dispatch(set_posts([newPost, ...posts]));\r\n        idPost++\r\n        // close window input post\r\n        // clear text input component\r\n        dispatch(toggle_window_input_post(false));\r\n        dispatch(set_count_text_input_post(0));\r\n\r\n        // clear item in textarea\r\n        dispatch(set_text_input_post(''));\r\n        dispatch(set_images_posts([]));\r\n        dispatch(set_feeling_status('?'));\r\n        dispatch(set_feeling_icon(''));\r\n    }\r\n}\r\n\r\n//! Delete Photo - ( Middleware )\r\nexport const thunk_action_deletePhoto = (idPost, img, title) => {\r\n    return (dispatch, getState) => {\r\n        const { posts } = getState();\r\n\r\n        // img < = 2\r\n        if(img.length <= 2) {\r\n            // title = 0\r\n            if(title.length !== 0) {\r\n                for(let i = 0; i < posts.length; i++) {\r\n                    if(posts[i].idPost === idPost) {\r\n                        for(let q = 0; q < posts[i].imagesPosts.length; q++) {\r\n                            if(posts[i].imagesPosts[q].id === img[q].id) {\r\n                                posts[i].imagesPosts.splice(q, posts[i].imagesPosts.length);\r\n\r\n                                //close window option post\r\n                                dispatch(toggle_window_option_post('close', 0));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for(let i = 0; i < posts.length; i++) {\r\n                    if(posts[i].idPost === idPost) {\r\n                        posts.splice(i, 1);\r\n\r\n                        //close window option post\r\n                        dispatch(toggle_window_option_post('close', 0));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // img > 2\r\n        if(img.length > 2) {\r\n            dispatch(set_list_images_post(img));\r\n            dispatch(toggle_window_list_imagesPost('onBtn-optionPost'));\r\n        }\r\n    }\r\n} \r\n\r\n//! Delete Post - ( Middleware )\r\nexport const thunk_action_deletePost = (idPost) => {\r\n    return (dispatch, getState) => {\r\n        const { posts } = getState();\r\n\r\n        for(let i = 0; i < posts.length; i++) {\r\n            if(posts[i].idPost === idPost) {\r\n                posts.splice(i, 1);\r\n\r\n                // close window Option Post\r\n                dispatch(toggle_window_option_post('close', 0));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//! Edit Post - ( Middleware )\r\n// window\r\nexport const thunk_action_editPost = (title, idPost, feelingStatus, img, feelingIcon) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(toggle_window_editPost('toggle'));\r\n        dispatch(set_text_input_post(title));\r\n        dispatch(set_feeling_status(feelingStatus));\r\n        dispatch(set_images_posts(img));\r\n        dispatch(set_idPost_showing(idPost));\r\n        dispatch(set_feeling_icon(feelingIcon));\r\n    }\r\n}\r\n// Save Edit Post\r\nexport const thunk_action_save_editPost = () => {\r\n    return (dispatch, getState) => {\r\n        const { posts, imagesPosts, textInputPost, feelingStatus, idPostShowing, feelingIcon } = getState();\r\n\r\n        for(let i = 0; i < posts.length; i++) {\r\n            if(posts[i].idPost === idPostShowing) {\r\n                if(imagesPosts.length === 0 && textInputPost.length === 0) {\r\n                    posts.splice(i, 1);\r\n                    // close window Edit Post\r\n                    dispatch(toggle_window_editPost('close'));\r\n                } else {\r\n                    posts[i].textInputPost = textInputPost;\r\n                    posts[i].feelingStatus = feelingStatus;\r\n                    // posts[i].imagesPosts.splice(0, posts[i].imagesPosts.length);\r\n                    posts[i].imagesPosts = imagesPosts;  \r\n                    posts[i].feelingIcon = feelingIcon   \r\n                    \r\n                    // close window Edit Post\r\n                    dispatch(toggle_window_editPost('close'));\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log('Save Edit!');\r\n    }\r\n}","//! Import\n// React \nimport React, { useRef, useState, useEffect } from \"react\";\n// Style\nimport \"./App.css\";\nimport \"./component/responsive.css\"\nimport feelingJSON from './feeling';\n// Component\nimport Navbar from \"./component/Navbar\";\nimport Input from \"./component/Input\";\nimport PostHasImg from \"./component/PostHasImg\"\n// Icon\nimport { AiFillCloseCircle, AiOutlineLeft, AiOutlineRight } from \"react-icons/ai\";\nimport { GrEmoji } from \"react-icons/gr\";\nimport { BsImages } from \"react-icons/bs\";\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\nimport { IoClose, IoArrowBackOutline, IoConstructOutline } from \"react-icons/io5\";\nimport { BiSearchAlt } from \"react-icons/bi\";\nimport { HiDotsHorizontal } from \"react-icons/hi\";\n// Textarea auto-resize\nimport TextareaAutosize from \"react-textarea-autosize\";\n// Emoji-picker\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n// Images uploading\nimport ImageUploading from 'react-images-uploading';\n// Alert Message\nimport { useAlert } from \"react-alert\";\nimport { any, func } from \"prop-types\";\n// Redux\nimport { connect } from 'react-redux';\n// Redux Action\nimport \n{   thunk_action_deleteOne, thunk_action_deleteLastImg, toggle_window_delete_img, increment_index_list_images, decrement_index_list_images, set_index_list_images,\n    set_list_images_post, thunk_action_oneImageLeft, toggle_window_list_imagesPost, thunk_action_deleteAll, thunk_action_setPosts, set_text_input_post, set_images_posts,\n    toggle_window_input_post, set_count_text_input_post, set_feeling_status, set_idPost_showing, set_feeling_icon, set_status_post_button, toggle_window_option_post,\n    toggle_window_navbar, thunk_action_deletePhoto, thunk_action_deletePost, thunk_action_editPost, toggle_window_editPost, thunk_action_save_editPost, toggle_window_removeAllimg,\n    toggle_window_emoji\n} \nfrom './actions/index';\n\n\n\n//! Variable\n// Images Uploading\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\nconst maxNumber = 69;\n\n// Id Post\nlet idPost = 1;\n\n\n\n//! Function Component\nfunction App(props) {\n    //! State\n    // State Image Profile\n    const [inputProfileImg, setInputProfileImg] = useState(null);\n    const [urlShowImage, setUrlShowImage] = useState(\"\");\n    // State Name\n    const [inputProfileName, setInputProfileName] = useState(\"\");\n    // State Text Input Post\n    const [fontSizeInput, setFontSizeInput] = useState(\"big\");\n    // State Slide \n    const [slideResult, setSlideResult] = useState('');\n    const [slideSize, setSlideSize] = useState('');\n    const [slideSizeEditPost, setSlideSizeEditPost] = useState('');\n    const [slideResultEditPost, setSlideResultEditPost] = useState('');\n    // State Feeling\n    const [feelingItems, setFeelingItems] = useState([]);\n    // Search Term\n    const [searchTerm, setSearchTerm] = useState('');\n\n\n    //! useAlert();\n    const alert = useAlert();\n\n    //! useRef\n    const inputPostRef = useRef(null);\n    const slideItem = useRef(null);\n    const slideItemEditPost = useRef(null);\n\n    //! useEffect\n    useEffect(() => {});\n\n\n    //! Function Another\n    //* 1. get info from Navbar\n    const getInfoNavbar = (imgURLtoInput, profileName) => {\n      setInputProfileImg(imgURLtoInput);\n      setInputProfileName(profileName);\n    };\n\n    //* 2. onClick show image\n    const onClickShowImage = (urlImg) => {\n      setUrlShowImage(urlImg);\n      // close window option post\n      props.dispatch(toggle_window_option_post('close', 0));\n      // clse window Navbar\n      props.dispatch(toggle_window_navbar('close'));\n      // html overflow hidden\n      document.querySelector('html').style.overflow = 'hidden';\n    };\n  \n    //* 3. onClick close image\n    const onClickCloseImage = () => {\n      setUrlShowImage(\"\");\n        // html overflow unset\n        document.querySelector('html').style.overflow = 'unset';\n    };\n\n    //* 4. Change font size input Post\n    const rowCount = (evt) => {\n        props.dispatch(set_text_input_post(evt.target.value));\n        // console.log(evt.target.value);\n        \n        // count number of characters without spaces and enters\n        let myStringInputPost = evt.target.value;\n        let enterCount = (myStringInputPost.match(/\\n/g) || []).length; \n        let spaceCount = (myStringInputPost.split(\" \").length - 1);\n        // console.log(`Enter Count:- ${enterCount}`);\n        // console.log(`Space Count:- ${spaceCount}`);\n        // console.log(`total count:- ${(myStringInputPost.length - spaceCount) - enterCount}`);\n        props.dispatch(set_count_text_input_post((myStringInputPost.length - spaceCount)- enterCount));\n\n        let row = evt.target.offsetHeight;\n        //   console.log(evt.target.offsetHeight);\n        \n        if (fontSizeInput === \"big\") { //big font\n          if (row > 172) {\n            setFontSizeInput(\"small\");\n          } \n        }\n        if (fontSizeInput === \"small\") { //small font\n          if (evt.target.value.length === 0) {\n            setFontSizeInput(\"big\");\n          } \n        }\n        \n        // set status post button\n        if(evt.target.value.length !== 0) {\n            props.dispatch(set_status_post_button(true));\n        } else props.dispatch(set_status_post_button(false));\n\n        if(evt.target.value.length === 0) {\n            if(props.data.imagesPosts.length !== 0) {\n                props.dispatch(set_status_post_button(true));\n            } else props.dispatch(set_status_post_button(false));            \n        } \n    };\n  \n    //* 5. Add Emoji\n    const addEmoji = (e) => {\n      // console.log(e);\n    \n      // emoji concat text\n      props.dispatch(set_text_input_post(`${props.data.textInputPost}${e.native}`));\n    };\n  \n    //* 6. Emoji Toggle\n    const toggleEmoji = () => {\n        props.dispatch(toggle_window_emoji('toggle'));\n    };\n  \n    //* 7. Get Status and Open Window Input Post\n    const getWindowInput = (inputProfileName) => {\n        // set Status Post Button \n        if(props.data.imagesPosts.length !== 0) {\n            props.dispatch(set_status_post_button(true));\n        }\n        if(props.data.imagesPosts.length === 0) {\n            if(props.data.countTextInputPost !== 0) {\n                props.dispatch(set_status_post_button(true));\n            } else props.dispatch(set_status_post_button(false)); \n        } \n        \n        // alert error \n        if (inputProfileName !== \"\") {\n            props.dispatch(toggle_window_input_post(true));\n            document.querySelector('html').style.overflow = 'hidden';\n        }\n        else {\n          alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n          props.dispatch(toggle_window_input_post(false));\n        } \n    };\n  \n    //* 8. Close Input Post\n    const closeInputPost = () => {  \n        props.dispatch(toggle_window_input_post(false));\n        props.dispatch(toggle_window_removeAllimg('close'));\n    };\n  \n    //* 9. handle image change  \n    // const handleImageChange = (e) => { //! ไม่ใช้เเล้ว เพราะมีข้อจำกัดในด้านการอัพโหลดที่ไม่สามารถอัพโหลดรูปซ้ำได้\n    //     const selected = e.target.files[0];\n    //     const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\n\n    //     // matching types\n    //     if(selected && ALLOWED_TYPES.includes(selected.type)) {\n    //         let reader = new FileReader(); // constructor method or object property\n    //         reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\n    //         reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\n    //             let imgURL = reader.result;\n    //             let result = {imgURL, id};\n\n    //             setInputPostImgURL([result, ...inputPostImgURL]);\n                \n    //             id++\n    //         }\n    //     } else { // if they don't match, they will be set error.\n    //         console.log('file not supported.');            \n    //     }\n    // }\n\n    //* 10. Evolution handle image change #1\n    const handleImageChange = (imageList, addUpdateIndex) => {\n        // Id Image Post\n        let idImgPost = 1;\n        // console.log(imageList, addUpdateIndex);\n        const imageListTemp = [];\n\n        //setState ImagesPosts\n        imageList.map((img) => {\n            imageListTemp.push({ data_url:img.data_url, id:idImgPost });\n            idImgPost++\n        }) //! บัค id image เพราะ เมือใช้ function onImageRemove มันจะทำการ +idImage เพราะมันต้องผ่าน function นี้เสมอ แต่ยังไม่มีผลเสียอะไร \n\n        props.dispatch(set_images_posts(imageListTemp));\n\n        // set status post button\n        if(imageList.length !== 0) {\n            props.dispatch(set_status_post_button(true));\n        }\n        if(imageList.length === 0) {\n            if(props.data.countTextInputPost !== 0) {\n                props.dispatch(set_status_post_button(true));\n            } else props.dispatch(set_status_post_button(false)); \n        } \n    }; \n\n\n    //* 11 Slide Next\n    // async important!\n    const slideRightFunc = async() => {\n        // console.log(slideItem.current.clientWidth);\n        setFeelingItems(feelingJSON.feelings);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('right');\n        props.dispatch(toggle_window_emoji('close'));\n        // close window remove all img\n        props.dispatch(toggle_window_removeAllimg('close'));\n    }\n    //* 11.1 slide Next - ( Edit Post )\n    const slideRightEditPost = async() => {\n        // console.log(slideItem.current.clientWidth);\n        setFeelingItems(feelingJSON.feelings);\n        setSlideSizeEditPost(slideItemEditPost.current.clientWidth);\n        setSlideResultEditPost('right');\n        props.dispatch(toggle_window_emoji('close'));\n    }\n\n    //* 12. Slide Previous\n    const slideLeftFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('left');\n    }\n    //* 12.1 slide Previous\n    const slideLeftEditPost = () => {\n        // console.log(slideItem.current.clientWidth);\n        setSlideSizeEditPost(slideItemEditPost.current.clientWidth);\n        setSlideResultEditPost('left');\n    }\n\n    //* 13. Get Status Upload Image from PostHasImg Component\n    const getUploadImage = (imageList, addUpdateIndex, statusBool) => {\n        // Id Image Post\n        let idImgPost = 1;\n\n        const imageListTemp = [];\n\n        //setState ImagesPosts\n        imageList.map((img) => {\n            imageListTemp.push({ data_url:img.data_url, id:idImgPost });\n            idImgPost++\n        }) //! บัค id image เพราะ เมือใช้ function onImageRemove มันจะทำการ +idImage เพราะมันต้องผ่าน function นี้เสมอ แต่ยังไม่มีผลเสียอะไร \n        props.dispatch(set_images_posts(imageListTemp));\n\n        // alert error\n        if(inputProfileName === '') {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n            props.dispatch(set_images_posts([]));\n        } else {\n            props.dispatch(toggle_window_input_post(statusBool));\n        }\n        \n        // allow status post button\n        props.dispatch(set_status_post_button(true));\n\n    }\n    //* 14. Get Status Feeling\n    const getStatusFeeling = async(statusBool) => {\n        if(statusBool === true && inputProfileName !== '') {\n            await props.dispatch(toggle_window_input_post(statusBool));\n            await slideRightFunc();\n        } else {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        }\n    }\n\n    //* 15. Do not open Window Input Post\n    const getStatusInputPost = (statusBool) => {\n        if(statusBool === true) {\n            props.dispatch(set_text_input_post(''));\n            props.dispatch(set_count_text_input_post(0));\n        }\n    } \n\n    //* 16. onclick button Post\n    const addPost = () => {\n        props.dispatch(thunk_action_setPosts());\n    }\n\n    //* 17. Increment Index List Images +\n    const incrementIndexListImg = () => {\n        if(props.data.indexListImages === props.data.listImagesPost.length - 1) {\n            props.dispatch(increment_index_list_images('lastIndex'));\n            props.dispatch(toggle_window_delete_img('close'));\n        } else {\n            props.dispatch(increment_index_list_images('next'));\n            props.dispatch(toggle_window_delete_img('close'));\n        } \n    }\n    //* 18. Decrement Index List Images -\n    const decrementIndexListImg = () => {\n        if(props.data.indexListImages === 0) {\n            props.dispatch(decrement_index_list_images(true, props.data.listImagesPost.length - 1));\n            props.dispatch(toggle_window_delete_img('close'));\n        } else {\n            props.dispatch(decrement_index_list_images(false, null));\n            props.dispatch(toggle_window_delete_img('close'));\n        } \n    }\n\n    //* 19. Delete One, List Images Post or Filter\n    const deleteOneListImagesPost = () => {\n        // listImages !== 0\n        if(props.data.listImagesPost.length - 1 !== 0) {\n            //- != last img\n            if(props.data.indexListImages !== props.data.listImagesPost.length -1) {\n                props.dispatch(thunk_action_deleteOne())\n            } else {\n                // = last img\n                props.dispatch(thunk_action_deleteLastImg());\n            }\n        } else {\n            // รูปสุดท้าย ลบแล้ว close window\n            props.dispatch(thunk_action_oneImageLeft());\n        }\n    }\n\n    //* 20. Delete All, List Images Post\n    const deleteAllListImagesPost = () => {\n        props.dispatch(thunk_action_deleteAll());\n    }\n\n    //* 21. close window show list image post\n    const closeWindowListImagesPost = () => {\n        props.dispatch(toggle_window_list_imagesPost());\n    }\n    //* 21.1 open window show list image post\n    const openWindowListImagesPost = () => {\n        props.dispatch(toggle_window_list_imagesPost());\n    }\n\n    //* 22. Receive idPost from Post Componenet\n    const receiveIdPost = (id) => {\n        props.dispatch(set_idPost_showing(id));\n    }\n\n    //* 23. Set Index List Images = 0\n    const setIndexListImages = () => {\n       props.dispatch(set_index_list_images());\n    }\n\n    //* 24. dispatch list image post - receive img from PostHasImg Component\n    const setListImagesPost = (images) => {\n        props.dispatch(set_list_images_post(images));\n    }\n\n    //* 25. when Clear button is CLicked on Navbar, it will Clear Input Post\n    const clearStatusFeeling = () => {\n        props.dispatch(set_feeling_status('?'));\n    } \n    const clearImagesPost = () => {\n        props.dispatch(set_images_posts([]));\n    }\n\n    //* 26. Toggle window Option Post\n    const toggleWindowOptionPost = (status, id) => {\n        props.dispatch(toggle_window_option_post(status, id));\n    }\n\n    //* 27. Toggle Window Navbar\n    const toggleWindowNavbar = (status) => {\n        props.dispatch(toggle_window_navbar(status));\n    }\n\n    //* 28. Delete Photo on Post\n    const deletePhotoOnPost = (idPost, img, title) => {\n        props.dispatch(thunk_action_deletePhoto(idPost, img, title));\n    }\n\n    //* 29. Delete Post\n    const deletePost = (idPost) => {\n        props.dispatch(thunk_action_deletePost(idPost));\n    }\n\n    //* 30. Edit Post\n    const EditPost = (title, idPost, feelingStatus, img, feelingIcon) => {\n        props.dispatch(thunk_action_editPost(title, idPost, feelingStatus, img, feelingIcon));\n    }\n\n    //* 31. Close Edit Post \n    const closeEditPost = () => {\n        props.dispatch(toggle_window_editPost('close'));\n        props.dispatch(toggle_window_removeAllimg('close'));\n    }\n\n    //* 32. Save Edit Post\n    const saveEditPost = () => {\n        props.dispatch(thunk_action_save_editPost());\n    }\n\n\n    //! Small Component\n    //* 1. Show background and image\n    const showBackgroundAndImage = (\n      <div\n        onClick={onClickCloseImage}\n        className={\n          urlShowImage === \"\" ? \"main_show_image close\" : \"main_show_image show\"\n        }\n      >\n        '{/* show image */}\n        <div\n          className=\"show_image\"\n          style={{\n            background:\n              urlShowImage !== null\n                ? `url('${urlShowImage}') no-repeat center/contain`\n                : \"#fff\",\n          }}\n        ></div>\n      </div>\n    );\n        \n    //* 2.1 Emoji Toggle\n    const emojiToggle = (\n        <>\n            <GrEmoji \n                onClick={toggleEmoji} \n                className=\"emoji_toggle\" \n            />\n        </>\n    );\n    \n    //* 2.2 Emoji Picker\n    const emojiPicker = (\n      <span\n        className={\n          !props.data.isWindowEmoji\n            ? \"emoji_picker_wrapper close\"\n            : \"emoji_picker_wrapper show\"\n        }\n        style={props.data.imagesPosts.length !== 0 ? {bottom: '59%'} : {bottom: '44%'}}\n      >\n        <Picker className=\"emoji_picker\" onSelect={addEmoji} />\n      </span>\n    );\n\n\n    //* 2. Show Input Post\n    const showInputPost = (\n        //! show input post \n        <div className={!props.data.isWindowInputPost ? \"main_show_input close\" : \"main_show_input show\"\n        }>  \n            <div className=\"main_show_input_container\">\n\n                {/*//! emoji picker */}\n                <div className=\"emoji_picker_container\">\n                    {emojiPicker} {/* small component */}\n\n                    {/* box */}\n                    <div \n                        className={\n                            !props.data.isWindowEmoji\n                              ? \"box-emojiPicker close\"\n                              : \"box-emojiPicker show\"\n                        }                          \n                        style={props.data.imagesPosts.length !== 0 ? {top: '38.6%', right: '4.7%'} : {top: '54%', right: '4.7%'}}\n                    ></div>\n                </div>\n\n                {/* //! Slide / main show input wrapper */}\n                <div className=\"main_show_input_wrapper\"\n                    // Balance of height \n                    style={slideResult === 'right' ? {height: '329px'} : {height: 'auto'}}\n                >\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\" \n                        ref={slideItem}\n                        style={\n                            slideResult === 'right' \n                            ? {transform: `translateX(-${slideSize+2}px)`}\n                            : {transform: `translateX(-0px)`}\n                        }\n                        >\n\n                        {/* input header */}\n                        <div className=\"show_input_header\">\n                            {/* header text */}\n                                <p>Create Post</p>\n                            {/* btn close */}\n                            <div className=\"btn_close_input\">\n                                {/* close input post */}\n                                <AiFillCloseCircle\n                                    onClick={closeInputPost}\n                                    className=\"icon_close_input\"\n                                />\n                            </div>\n                        </div>\n\n                        {/* feeling status */}\n                        <div className=\"feeling_status\">\n                            <p>{inputProfileName} feeling : <span>{props.data.feelingStatus}</span></p>\n                        </div> \n\n                        {/* input main */}\n                        <div className=\"show_input_main\">\n                            <TextareaAutosize\n                                minRows={fontSizeInput === 'big' ? 6 : 9}\n                                maxRows={15}\n                                className=\"input_textarea\"\n                                placeholder={\n                                  !inputProfileName\n                                    ? \"your mind?\"\n                                    : `your mind ${inputProfileName}?`\n                                }\n                                ref={inputPostRef}\n                                onChange={rowCount}\n                                value={props.data.textInputPost}\n                                style={{\n                                  fontSize: fontSizeInput === \"big\" ? \"1.3em\" : \"0.9em\",\n                                }}\n                            />\n                            {/*//! emoji toggle */}\n                            {emojiToggle} {/* small component */}\n                        </div>\n                        {/*//! Show image Input Post */}\n                        <ImageUploading\n                            multiple\n                            value={props.data.imagesPosts}\n                            onChange={handleImageChange}\n                            maxNumber={maxNumber}\n                            dataURLKey=\"data_url\"\n                            acceptType={acceptType}\n                            maxFileSize={4194304}\n                        >\n                            {({\n                                imageList,\n                                onImageUpload,\n                                onImageRemoveAll,\n                                onImageUpdate,\n                                onImageRemove,\n                                isDragging,\n                                dragProps,\n                            }) => (\n                                <>\n                                    <ul className=\"image_input_post\">\n                                        {props.data.imagesPosts.length <= 4 \n                                            ? \n                                            props.data.imagesPosts.map((image, index) => \n                                                <li \n                                                    className=\"li_images\"\n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}\n                                                >\n                                                    <IoClose onClick={() => {\n                                                        onImageRemove(index)\n                                                        props.dispatch(toggle_window_removeAllimg('close'))\n                                                    }} className=\"li_image_close\"/>\n                                                </li>\n                                            )\n                                            : \n                                            props.data.imagesPosts.map((image, index) =>\n                                            <> \n                                                <li \n                                                    className={props.data.imagesPosts.length > 4 ? \"li_images checkLength nPlus5CLose\" : \"li_images\"} \n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}>\n                                                        <IoClose onClick={() => {\n                                                            onImageRemove(index)\n                                                            props.dispatch(toggle_window_removeAllimg('close'))\n                                                        }} className=\"li_image_close\"/>\n                                                </li>\n                                                {/* image counting and remove all image list */}\n                                                <div onClick={() => props.dispatch(toggle_window_removeAllimg('toggle'))} className=\"images_counting\">{`+${props.data.imagesPosts.length - 4}`}</div>\n                                            </>\n                                            )\n                                        }\n                                    </ul>    \n                                    {/*//! input addon wrapper */}\n                                    <div className=\"input_addon_wrapper\">\n                                        {/* image */}\n                                        <span onClick={() => {\n                                            props.dispatch(toggle_window_emoji('close'));\n                                            props.dispatch(toggle_window_removeAllimg('close'))\n                                        }}>\n                                            {/* button upload image */}\n                                            <BsImages \n                                                className=\"input_image\"\n                                                onClick={onImageUpload}\n                                            />\n                                        </span>\n                                        {/* feeling */}\n                                        <span>\n                                            {/* button feeling */}\n                                            <RiEmotionLaughLine \n                                                onClick={slideRightFunc}\n                                                className=\"input_feeling\" \n                                            />\n                                        </span>\n                                    </div>\n                                    {/*//! Window Remove All Images List in window input */}\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"removeALl_wrapper show\" : \"removeALl_wrapper close\"}>\n                                        <button onClick={() => { \n                                            onImageRemoveAll() \n                                            props.dispatch(toggle_window_removeAllimg('close'))\n                                        }}>Remove All</button>\n                                        <button onClick={() => props.dispatch(toggle_window_removeAllimg('toggle'))}>cancle</button>\n                                    </div>\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"box_removeAll show\" : \"box_removeAll close\"}></div>\n                                </>\n                            )}\n                        </ImageUploading>\n\n                        {/* Post Button */}\n                        <div className=\"button_post-wrapper\">\n                            <button \n                                className={props.data.statusPostButton ? 'button_post true' : 'button_post false'} \n                                onClick={props.data.statusPostButton ? () => addPost() : null}\n                            >Post\n                            </button>\n                        </div>\n                    </div>\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\"\n                        style={\n                            slideResult === 'right' \n                            ? {transform: `translateX(-${slideSize}px)`}\n                            : {transform: `translateX(${slideSize+2}px)`}\n                        }\n                    >\n                        {/*//! Feeling Window Input Post */}\n                        {/* header */}\n                        <div className=\"feeling_header\">\n                            {/* Button Slide Left / Previous */}\n                            <div className=\"feeling_slide_back_wrapper\">\n                                <IoArrowBackOutline\n                                    onClick={slideLeftFunc}\n                                    className=\"feeling_slide_back\"\n                                />\n                            </div>\n                            {/* text header */}\n                            <p className=\"text_header\">Feelings</p>\n                        </div>\n\n                        {/* search feeling */}\n                        <div className=\"search_feeling_wrapper\">\n                            <input \n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                className=\"search_feeling\" \n                                type=\"text\" \n                                placeholder=\"Search\" \n                            />\n                            <BiSearchAlt className=\"search_icon_feeling\"/>\n                        </div>\n\n                        {/* feeling items */} \n                        <ul className=\"feelings_items_wrapper\">\n                            {/* Search filter */}\n                            {feelingItems.filter((value) => {\n                                if(searchTerm === \"\") {\n                                    return value;\n                                } else if (value.feeling_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                    return value;\n                                } \n                            }).map((value, key) => {\n                                // console.log(value);\n                                return (\n                                    <li \n                                        className=\"feeling_item\"\n                                        key={key}\n                                        onClick={() => {\n                                            props.dispatch(set_feeling_status(value.feeling_name));\n                                            props.dispatch(set_feeling_icon(value.icon));\n                                            setSlideResult('left');\n                                        }}\n                                    >   \n                                        <span className=\"feeling_icon\">\n                                            <img src={value.icon} alt=\"feeling-icon\" />\n                                        </span> \n                                        {value.feeling_name}\n                                    </li>\n                                )    \n                                }\n                            )}\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    )  \n    \n    //* 3 Show List Images Post \n    const ShowListImagePost = (\n        // container\n        <div className={props.data.isWindowListImagesPost \n            ? \"listImagesPost_container show\"\n            : \"listImagesPost_container close\"\n        }>\n            {/* wrapper */}\n            <div className={props.data.isLoadingDeleteOne === true \n                ? \"listImagesPost_wrapper loading\"\n                : \"listImagesPost_wrapper\"\n            }>\n                {/* slide images */}\n                <div className=\"listImagesPost_img-wrapper\">\n                    {props.data.listImagesPost.length !== 0\n                        ?\n                        <div \n                            className=\"listImagesPost_img\"\n                            style={props.data.isDeleteLastImg \n                                ? { background: `url(${props.data.listImagesPost[0].data_url}) no-repeat center/contain`}\n                                : { background: `url(${props.data.listImagesPost[props.data.indexListImages].data_url}) no-repeat center/contain`}\n                            }\n                        >   \n                            {/* button Prev, Next */}\n                            {/* Prev */}\n                            <div \n                                onClick={decrementIndexListImg}\n                                className=\"listImagesPost_btn_Prev-container\">\n                                    <div className=\"listImagesPost_btn_Prev-wrapper\">\n                                        <AiOutlineLeft className=\"listImagesPost_btn-Prev\" />\n                                    </div>\n                            </div>\n                            {/* Next */}\n                            <div \n                                onClick={incrementIndexListImg}\n                                className=\"listImagesPost_btn_Next-container\">\n                                    <div className=\"listImagesPost_btn_Next-wrapper\">\n                                        <AiOutlineRight className=\"listImagesPost_btn-Next\" />\n                                    </div>\n                            </div>\n                            {/* button edit */}\n                            <div \n                                onClick={() => props.dispatch(toggle_window_delete_img())}\n                                className=\"listImagesPost_btn_Edit-wrapper\">\n                                    <HiDotsHorizontal className=\"listImagesPost_btn-Edit\" /> \n                            </div>\n                            {/* window delete Button Edit*/}\n                            <div className={props.data.isWindowDeleteImg === true \n                                ? \"listImagesPost_btn_Edit_window-delete show\"\n                                : \"listImagesPost_btn_Edit_window-delete close\"\n                            }>\n                                {/* button delete, delete all */}\n                                {/* one */}\n                                <button \n                                    onClick={deleteOneListImagesPost}\n                                    className=\"delete_one\">Delete\n                                    </button>\n                                {/* all */}\n                                <button \n                                    onClick={deleteAllListImagesPost}\n                                    className=\"delete_all\">Delete All\n                                </button>\n                                {/* triangle box */}\n                                <div className=\"box_window-delete\"></div>\n                            </div>\n                        </div>\n                        : null\n                    }\n                </div>\n                {/* delete one loading */}\n                {props.data.isLoadingDeleteOne === true \n                    ? <div className=\"deleteOne_loading-icon\"></div>\n                    : null\n                }\n                {/* delete one Success! */}\n                {props.data.isDeleteSuccess\n                    ? \n                    <div className=\"deleteOne_loading-success\">\n                        <p>Delete Success!</p>\n                        <div className=\"deleteOne_loading_icon-success\"></div>\n                    </div>\n                    : null\n                }\n            </div>\n            {/* button close window or exit */}\n            <div \n                onClick={closeWindowListImagesPost}\n                className=\"listImagesPost_btn_Close-wrapper\">\n                    <IoClose className=\"listImagesPost_btn-Close\" />\n            </div>            \n        </div>\n    )\n\n    //* 4. Show Edit Post\n    const showEditPost = (\n        //! show edit post \n        <div className={!props.data.isWindowEditPost ? \"main_show_input close\" : \"main_show_input show\"\n        }>  \n            <div className=\"main_show_input_container\">\n\n                {/*//! emoji picker */}\n                <div className=\"emoji_picker_container\">\n                    {emojiPicker} {/* small component */}\n\n                    {/* box */}\n                    <div \n                        className={\n                            !props.data.isWindowEmoji\n                              ? \"box-emojiPicker close\"\n                              : \"box-emojiPicker show\"\n                        }                          \n                        style={props.data.imagesPosts.length !== 0 ? {top: '38.6%', right: '4.7%'} : {top: '54%', right: '4.7%'}}\n                    ></div>\n                </div>\n\n                {/* //! Slide / main show input wrapper */}\n                <div className=\"main_show_input_wrapper\"\n                    // Balance of height \n                    style={slideResultEditPost === 'right' ? {height: '329px'} : {height: 'auto'}}\n                >\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\" \n                        ref={slideItemEditPost}\n                        style={\n                            slideResultEditPost === 'right' \n                            ? {transform: `translateX(-${slideSizeEditPost+2}px)`}\n                            : {transform: `translateX(-0px)`}\n                        }\n                        >\n\n                        {/* input header */}\n                        <div className=\"show_input_header\">\n                            {/* header text */}\n                                <p>Edit Post</p>\n                            {/* btn close */}\n                            <div className=\"btn_close_input\">\n                                {/* close input post */}\n                                <AiFillCloseCircle\n                                    onClick={closeEditPost}\n                                    className=\"icon_close_input\"\n                                />\n                            </div>\n                        </div>\n\n                        {/* feeling status */}\n                        <div className=\"feeling_status\">\n                            <p>{inputProfileName} feeling : <span>{props.data.feelingStatus}</span></p>\n                        </div> \n\n                        {/* input main */}\n                        <div className=\"show_input_main\">\n                            <TextareaAutosize\n                                minRows={fontSizeInput === 'big' ? 6 : 9}\n                                maxRows={15}\n                                className=\"input_textarea\"\n                                placeholder={\n                                  !inputProfileName\n                                    ? \"your mind?\"\n                                    : `your mind ${inputProfileName}?`\n                                }\n                                ref={inputPostRef}\n                                onChange={rowCount}\n                                value={props.data.textInputPost}\n                                style={{\n                                  fontSize: fontSizeInput === \"big\" ? \"1.3em\" : \"0.9em\",\n                                }}\n                            />\n                            {/*//! emoji toggle */}\n                            {emojiToggle} {/* small component */}\n                        </div>\n                        {/*//! Show image Input Post */}\n                        <ImageUploading\n                            multiple\n                            value={props.data.imagesPosts}\n                            onChange={handleImageChange}\n                            maxNumber={maxNumber}\n                            dataURLKey=\"data_url\"\n                            acceptType={acceptType}\n                            maxFileSize={4194304}\n                        >\n                            {({\n                                imageList,\n                                onImageUpload,\n                                onImageRemoveAll,\n                                onImageUpdate,\n                                onImageRemove,\n                                isDragging,\n                                dragProps,\n                            }) => (\n                                <>\n                                    <ul className=\"image_input_post\">\n                                        {props.data.imagesPosts.length <= 4 \n                                            ? \n                                            props.data.imagesPosts.map((image, index) => \n                                                <li \n                                                    className=\"li_images\"\n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}\n                                                >\n                                                    <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                                </li>\n                                            )\n                                            : \n                                            props.data.imagesPosts.map((image, index) =>\n                                            <> \n                                                <li \n                                                    className={props.data.imagesPosts.length > 4 ? \"li_images checkLength nPlus5CLose\" : \"li_images\"} \n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}>\n                                                        <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                                </li>\n                                                {/* image counting and remove all image list */}\n                                                <div onClick={() => props.dispatch(toggle_window_removeAllimg('toggle'))} className=\"images_counting\">{`+${props.data.imagesPosts.length - 4}`}</div>\n                                            </>\n                                            )\n                                        }\n                                    </ul>    \n                                    {/*//! input addon wrapper */}\n                                    <div className=\"input_addon_wrapper\">\n                                        {/* image */}\n                                        <span onClick={() => props.dispatch(toggle_window_emoji('close'))}>\n                                            {/* button upload image */}\n                                            <BsImages \n                                                className=\"input_image\"\n                                                onClick={onImageUpload}\n                                            />\n                                        </span>\n                                        {/* feeling */}\n                                        <span>\n                                            {/* button feeling */}\n                                            <RiEmotionLaughLine \n                                                onClick={slideRightEditPost}\n                                                className=\"input_feeling\" \n                                            />\n                                        </span>\n                                    </div>\n                                    {/*//! Window Remove All Images List in window input */}\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"removeALl_wrapper show\" : \"removeALl_wrapper close\"}>\n                                        <button onClick={() => { \n                                            onImageRemoveAll() \n                                            props.dispatch(toggle_window_removeAllimg('close')); \n                                        }}>Remove All</button>\n                                        <button onClick={() => props.dispatch(toggle_window_removeAllimg('close'))}>cancle</button>\n                                    </div>\n                                    <div className={props.data.isWindowRemoveAllImg !== false ? \"box_removeAll show\" : \"box_removeAll close\"}></div>\n                                </>\n                            )}\n                        </ImageUploading>\n\n                        {/* Post Button */}\n                        <div className=\"button_post-wrapper\">\n                            <button \n                                className=\"button_post true\" \n                                onClick={saveEditPost}\n                            >Save\n                            </button>\n                        </div>\n                    </div>\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\"\n                        style={\n                            slideResultEditPost === 'right' \n                            ? {transform: `translateX(-${slideSizeEditPost}px)`}\n                            : {transform: `translateX(${slideSizeEditPost+2}px)`}\n                        }\n                    >\n                        {/*//! Feeling Window Input Post */}\n                        {/* header */}\n                        <div className=\"feeling_header\">\n                            {/* Button Slide Left / Previous */}\n                            <div className=\"feeling_slide_back_wrapper\">\n                                <IoArrowBackOutline\n                                    onClick={slideLeftEditPost}\n                                    className=\"feeling_slide_back\"\n                                />\n                            </div>\n                            {/* text header */}\n                            <p className=\"text_header\">Feelings</p>\n                        </div>\n\n                        {/* search feeling */}\n                        <div className=\"search_feeling_wrapper\">\n                            <input \n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                className=\"search_feeling\" \n                                type=\"text\" \n                                placeholder=\"Search\" \n                            />\n                            <BiSearchAlt className=\"search_icon_feeling\"/>\n                        </div>\n\n                        {/* feeling items */} \n                        <ul className=\"feelings_items_wrapper\">\n                            {/* Search filter */}\n                            {feelingItems.filter((value) => {\n                                if(searchTerm === \"\") {\n                                    return value;\n                                } else if (value.feeling_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                    return value;\n                                } \n                            }).map((value, key) => {\n                                // console.log(value);\n                                return (\n                                    <li \n                                        className=\"feeling_item\"\n                                        key={key}\n                                        onClick={() => {\n                                            props.dispatch(set_feeling_status(value.feeling_name));\n                                            props.dispatch(set_feeling_icon(value.icon));\n                                            setSlideResultEditPost('left');\n                                        }}\n                                    >   \n                                        <span className=\"feeling_icon\">\n                                            <img src={value.icon} alt=\"feeling-icon\" />\n                                        </span> \n                                        {value.feeling_name}\n                                    </li>\n                                )    \n                                }\n                            )}\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    ) \n    \n    //* 5. Footer - ( copyright )\n    const copyright = (\n    \n        <div className=\"footer_copyright\">\n            <p>Wanthanai K. © 2021</p>\n        </div>\n\n    )\n    \n\n\n\n    //! Main Component\n    return (\n        //! App\n        <div className=\"App\">\n            {/* Navbar */}\n            <Navbar \n                getInfoNavbar={getInfoNavbar} \n                getStatusInputPost={getStatusInputPost}\n                clearStatusFeeling={clearStatusFeeling}\n                clearImagesPost={clearImagesPost}\n                toggleWindowOptionPost={toggleWindowOptionPost}\n                isWindowNavbar={props.data.isWindowNavbar}\n                toggleWindowNavbar={toggleWindowNavbar}\n                onClickCloseImage={onClickCloseImage}\n            />\n            {/* Input */}\n            <Input\n                onClickShowImage={onClickShowImage}\n                inputProfileImg={inputProfileImg}\n                inputProfileName={inputProfileName}\n                getWindowInput={getWindowInput}\n                getUploadImage={getUploadImage}\n                imagesPosts={props.data.imagesPosts}\n                getStatusFeeling={getStatusFeeling}  \n                textInputPost={props.data.textInputPost}\n                countTextInputPost={props.data.countTextInputPost}\n                toggleWindowOptionPost={toggleWindowOptionPost}\n            />\n            {/* Post */}\n            {props.data.posts.map((post) => {\n                const feelingStatus = post.feelingStatus.toLowerCase();\n                return(\n                    <PostHasImg \n                    inputProfileImg={inputProfileImg} \n                    inputProfileName={inputProfileName} \n                    onClickShowImage={onClickShowImage} \n                    key={post.idPost}\n                    idPost={post.idPost}\n                    img={post.imagesPosts}\n                    title={post.textInputPost}\n                    feelingStatus={feelingStatus}\n                    feelingIcon={post.feelingIcon}\n                    strTime={post.strTime}\n                    minutePost={post.minutePost}\n                    hourPost={post.hourPost}\n                    timeNow={props.data.timeNow}\n                    setListImagesPost={setListImagesPost}\n                    openWindowListImagesPost={openWindowListImagesPost}\n                    receiveIdPost={receiveIdPost}\n                    setIndexListImages={setIndexListImages}\n                    toggleWindowOptionPost={toggleWindowOptionPost}\n                    deletePhotoOnPost={deletePhotoOnPost}\n                    deletePost={deletePost}\n                    EditPost={EditPost}\n                />\n                ) \n            })}\n\n            {/*//! main show background and image */}\n            {showBackgroundAndImage} {/* small component */}\n          \n            {/*//! main show input */}\n            {showInputPost} {/* small component */}\n          \n            {/*//! Show List Images Post */}\n            {ShowListImagePost} {/* small component */}\n\n            {/*//! Show Edit Post */}\n            {showEditPost} {/* small component */}\n\n            {/*//! Footer - (Copyright) */}\n            {copyright}\n        </div>\n    );\n\n}\n\n//! Map State To Props\nconst mapStateToProps = state => {\n    return {\n        data: state\n    }\n}\n\n\nexport default connect(mapStateToProps)(App)\n","const initialstate = {\r\n    // loading\r\n    isLoadingDeleteOne: false,\r\n    isDeleteSuccess: false,\r\n    // window\r\n    isWindowListImagesPost: false,\r\n    isWindowDeleteImg: false,\r\n    isWindowInputPost: false,\r\n    isWindowNavbar: false,\r\n    isWindowOptionPost: false,\r\n    isWindowEditPost: false,\r\n    isWindowRemoveAllImg: false,\r\n    isWindowEmoji: false,\r\n    // delete last img\r\n    isDeleteLastImg: false,\r\n    // index list images\r\n    indexListImages: 0,\r\n    // list images post\r\n    listImagesPost: [],\r\n    listImageDeleted: [],\r\n    // posts\r\n    posts: [],\r\n    textInputPost: '',\r\n    imagesPosts: [],\r\n    countTextInputPost: 0,\r\n    feelingStatus: \"?\",\r\n    feelingIcon: '',\r\n    idPostShowing: 0,\r\n    // posts Time\r\n    timeNow: new Date().getTime(),\r\n    // status \r\n    statusPostButton: false,\r\n    idOptionPost: 0\r\n}\r\n\r\nconst asyncDeleteImgOnWindowReducer = (state = initialstate, action) => {\r\n    switch(action.type) {\r\n        // Delete Last Image\r\n        case \"DELETE_LAST_IMG\":\r\n            return Object.assign({}, state, {\r\n                isDeleteLastImg: true\r\n            })\r\n        // Loading Delete One\r\n        case \"LOADING_DELETE_ONE\":\r\n            return Object.assign({}, state, {\r\n                isLoadingDeleteOne: true,\r\n                isWindowDeleteImg: false\r\n            })\r\n        // Loading Delete Success\r\n        case \"LOADING_DELETE_ONE_SUCCESS\":\r\n            return Object.assign({}, state, {\r\n                isDeleteSuccess: true, \r\n                isLoadingDeleteOne: false,\r\n                isDeleteLastImg: false,\r\n            })\r\n        // Loading Delete Last Image Success\r\n        case \"LOADING_DELETE_LAST_IMG_SUCCESS\":\r\n            return Object.assign({}, state, {\r\n                isDeleteSuccess: true, \r\n                isLoadingDeleteOne: false,\r\n                isDeleteLastImg: false,\r\n                indexListImages: state.indexListImages - 1\r\n            })\r\n        // Toggle Window Delete Image\r\n        case \"TOGGLE_WINDOW_DELETE_IMG\":\r\n            if(action.status === 'close') {\r\n                return Object.assign({}, state, {\r\n                    isWindowDeleteImg: false\r\n                })\r\n            } else {\r\n                return Object.assign({}, state, {\r\n                    isWindowDeleteImg: !state.isWindowDeleteImg\r\n                })\r\n            }\r\n        // Index List Images { increment, decrement }\r\n        // Increment +\r\n        case \"INCREMENT_INDEX_LIST_IMAGES\":\r\n            if(action.indexIncrement === 'lastIndex') {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: 0\r\n                })\r\n            }\r\n            else if(action.indexIncrement === 'next') {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: state.indexListImages + 1\r\n                })\r\n            }\r\n        break;\r\n        // Decrement - \r\n        case \"DECREMENT_INDEX_LIST_IMAGES\":\r\n            if(action.statusDecrementIndex === true) {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: action.indexDecrement\r\n                })\r\n            } else {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: state.indexListImages - 1\r\n                })\r\n            }\r\n        // Set Index List Images\r\n        case \"SET_INDEX_LIST_IMAGES\":\r\n            return Object.assign({}, state, {\r\n                indexListImages: 0\r\n            })\r\n        // Delete Success!\r\n        case \"CLOSE_DELETE_SUCCESS\":\r\n            return Object.assign({}, state, {\r\n                isDeleteSuccess: false\r\n            })\r\n        // Set List Images Post\r\n        case \"SET_LIST_IMAGE_POST\":\r\n            return Object.assign({}, state, {\r\n                listImagesPost: action.listImagesPost\r\n            })\r\n        // Set List Images Deleted\r\n        case \"SET_LIST_IMAGE_DELETED\":\r\n            return Object.assign({}, state, {\r\n                listImageDeleted: action.imgDeleted\r\n            })\r\n        // Toggle window list images post\r\n        case \"TOGGLE_WINDOW_LIST_IMAGES_POST\":\r\n            if(state.isWindowListImagesPost === true) {\r\n                document.querySelector('html').style.overflow = 'unset';\r\n            } else {\r\n                document.querySelector('html').style.overflow = 'hidden';\r\n            }\r\n            if(action.noteWindowListImagesPost === 'onBtn-optionPost') {\r\n                return Object.assign({}, state, {\r\n                    isWindowListImagesPost: !state.isWindowListImagesPost,\r\n                    isWindowOptionPost: false,\r\n                    isWindowDeleteImg: true\r\n                })\r\n            }\r\n            return Object.assign({}, state, {\r\n                isWindowListImagesPost: !state.isWindowListImagesPost,\r\n                isWindowDeleteImg: false,\r\n                isWindowOptionPost: false\r\n            })\r\n            \r\n        // ( delete all ) set list images post \r\n        case \"SET_LIST_IMAGES_DELETEALL\":\r\n            return Object.assign({}, state, {\r\n                listImagesPost: []\r\n            })\r\n        //! ( Posts ) - Reducer\r\n        // Set Posts\r\n        case \"SET_POSTS\":\r\n            return Object.assign({}, state, {\r\n                posts: action.posts\r\n            })\r\n        // Set Text Input Post\r\n        case \"SET_TEXT_INPUT_POST\":\r\n            return Object.assign({}, state, {\r\n                textInputPost: action.textInputPost\r\n            })\r\n        // Set Images Posts\r\n        case \"SET_IMAGES_POSTS\":\r\n            return Object.assign({}, state, {\r\n                imagesPosts: action.imagesPosts\r\n            })\r\n        // Set Count Text Input Post \r\n        case \"SET_COUNT_TEXT_INPUT_POST\":\r\n            return Object.assign({}, state, {\r\n                countTextInputPost: action.countTextInputPost\r\n            })\r\n        // Set Feeling Status\r\n        case \"SET_FEELING_STATUS\":\r\n            return Object.assign({}, state, {\r\n                feelingStatus: action.feelingStatus\r\n            })\r\n        // Set Feeling Icon\r\n        case \"SET_FEELING_ICON\":\r\n            return Object.assign({}, state, {\r\n                feelingIcon: action.feelingIcon\r\n            })\r\n        case \"SET_IDPOST_SHOWING\":\r\n            return Object.assign({}, state, {\r\n                idPostShowing: action.idPostShowing\r\n            })\r\n        case \"SET_STATUS_POST_BUTTON\":\r\n            return Object.assign({}, state, {\r\n                statusPostButton: action.statusPostButton\r\n            })\r\n        //! ( End ) - Posts \r\n        // Toggle Window Input Post\r\n        case \"TOGGLE_WINDOW_INPUT_POST\":\r\n            if(action.statusWindowInputPost === true) {\r\n                document.querySelector('html').style.overflow = 'hidden';\r\n                return Object.assign({}, state, {\r\n                    isWindowInputPost: true,\r\n                    isWindowOptionPost: false,\r\n                    isWindowNavbar: false\r\n                })        \r\n            }\r\n            if(action.statusWindowInputPost === false) {\r\n                document.querySelector('html').style.overflow = 'unset';\r\n                return Object.assign({}, state, {\r\n                    isWindowInputPost: false,\r\n                    isWindowOptionPost: false,\r\n                    isWindowNavbar: false\r\n                })        \r\n            }\r\n            if(action.statusWindowInputPost === 'toggle') {\r\n                if(state.isWindowInputPost === true) {\r\n                    document.querySelector('html').style.overflow = 'hidden';\r\n                } else {\r\n                    document.querySelector('html').style.overflow = 'unset';\r\n                }\r\n                return Object.assign({}, state, {\r\n                    isWindowInputPost: !state.isWindowInputPost,\r\n                    isWindowOptionPost: false,\r\n                    isWindowNavbar: false\r\n                })        \r\n            }\r\n        break;\r\n        // Toggle Window Option Post\r\n        case \"TOGGLE_WINDOW_OPTION_POST\":\r\n            if(action.statusWindowOptionPost === \"show\") {\r\n                return Object.assign({}, state, {\r\n                    isWindowOptionPost: true\r\n                })\r\n            } \r\n            if(action.statusWindowOptionPost === 'close') {\r\n                return Object.assign({}, state, {\r\n                    isWindowOptionPost: false,\r\n                    idOptionPost: action.idOptionPost\r\n                })\r\n            }\r\n            if(action.statusWindowOptionPost === 'toggle') {\r\n                if(action.idOptionPost !== 0) {\r\n                    return Object.assign({}, state, {\r\n                        isWindowOptionPost: !state.isWindowOptionPost,\r\n                        idOptionPost: action.idOptionPost,\r\n                        isWindowNavbar: false\r\n                    })\r\n                }\r\n            }\r\n        break;\r\n        // Toggle window Navbar\r\n        case \"TOGGLE_WINDOW_NAVBAR\":\r\n            if(action.statusWindowNavbar === 'show') {\r\n                return Object.assign({}, state, {\r\n                    isWindowNavbar: true,\r\n                    isWindowInputPost: false,\r\n                    isWindowOptionPost: false\r\n                })\r\n            } \r\n            if(action.statusWindowNavbar === 'close') {\r\n                return Object.assign({}, state, {\r\n                    isWindowNavbar: false,\r\n                    isWindowInputPost: false,\r\n                    isWindowOptionPost: false\r\n                })\r\n            }\r\n            if(action.statusWindowNavbar === 'toggle') {\r\n                return Object.assign({}, state, {\r\n                    isWindowNavbar: !state.isWindowNavbar,\r\n                    isWindowInputPost: false,\r\n                    isWindowOptionPost: false\r\n                })\r\n            }\r\n        break;\r\n        // toggle window Edit Post\r\n        case \"TOGGLE_WINDOW_EDITPOST\":\r\n            if(action.statusWindowEditPost === 'close') {\r\n                if(state.isWindowOptionPost === true) {\r\n                    document.querySelector('html').style.overflow = 'hidden';\r\n                } else {\r\n                    document.querySelector('html').style.overflow = 'unset';\r\n                }\r\n                return Object.assign({}, state, {\r\n                    isWindowEditPost: false,\r\n                    isWindowNavbar: false,\r\n                    isWindowOptionPost: false,\r\n                    countTextInputPost: 0,\r\n                    feelingStatus: \"?\",\r\n                    imagesPosts: [],\r\n                    textInputPost: '',\r\n                    feelingIcon: ''\r\n                })\r\n            }\r\n            if(action.statusWindowEditPost === 'toggle') {\r\n                if(state.isWindowOptionPost === true) {\r\n                    document.querySelector('html').style.overflow = 'hidden';\r\n                } else {\r\n                    document.querySelector('html').style.overflow = 'unset';\r\n                }\r\n                return Object.assign({}, state, {\r\n                    isWindowEditPost: !state.isWindowEditPost,\r\n                    isWindowNavbar: false,\r\n                    isWindowOptionPost: false\r\n                })\r\n            }\r\n        break;\r\n        // toggle window Remove All Img\r\n        case \"TOGGLE_WINDOW_REMOVEALLIMG\":\r\n            if(action.statusWindowRemoveAllImg === 'close') {\r\n                return Object.assign({}, state, {\r\n                    isWindowRemoveAllImg: false,\r\n                    isWindowEmoji: false\r\n                })\r\n            }\r\n            if(action.statusWindowRemoveAllImg === 'toggle') {\r\n                return Object.assign({}, state, {\r\n                    isWindowRemoveAllImg: !state.isWindowRemoveAllImg,\r\n                    isWindowEmoji: false\r\n                })\r\n            }\r\n            if(action.statusWindowRemoveAllImg === 'show') {\r\n                return Object.assign({}, state, {\r\n                    isWindowRemoveAllImg: true,\r\n                    isWindowEmoji: false\r\n                })\r\n            }\r\n        break;\r\n        // toggle window Remove All Img\r\n        case \"TOGGLE_WINDOW_EMOJI\":\r\n            if(action.statusWindowEmoji === 'close') {\r\n                return Object.assign({}, state, {\r\n                    isWindowEmoji: false\r\n                })\r\n            }\r\n            if(action.statusWindowEmoji === 'toggle') {\r\n                return Object.assign({}, state, {\r\n                    isWindowEmoji: !state.isWindowEmoji\r\n                })\r\n            }\r\n            if(action.statusWindowEmoji === 'show') {\r\n                return Object.assign({}, state, {\r\n                    isWindowEmoji: true\r\n                })\r\n            }\r\n        break;\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default asyncDeleteImgOnWindowReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//! React Alert Message\nimport { positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n// redux\nimport {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {Provider} from 'react-redux'\nimport asyncDeleteImgOnWindowReducer from './reducers/deleteImgOne'\n\n\n//! Variable\n// config alert message\nconst options = {\n  timeout: 3000,\n  position: positions.TOP_CENTER\n};\n\n//! Redux Store\nconst store = createStore(asyncDeleteImgOnWindowReducer, applyMiddleware(thunk));\nexport default store;\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <Provider store={store}>\n            <AlertProvider  template={AlertTemplate} {...options}>\n                    <App />\n            </AlertProvider>\n        </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}