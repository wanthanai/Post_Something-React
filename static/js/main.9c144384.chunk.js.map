{"version":3,"sources":["component/Navbar.js","component/Input.js","component/PostHasImg.js","actions/index.js","App.js","reducers/deleteImgOne.js","index.js"],"names":["Navbar","getInfoNavbar","getStatusInputPost","useState","imgURL","setImgURL","imgPreview","setImgPreview","reserveImgURL","setReserveImgURL","inputName","setInputName","profileName","setProfileName","windowCustom","setWindowCustom","error","setError","length5Error","setLength5Error","length15Error","setLength15Error","className","href","onClick","id","style","background","length","rel","target","class","display","onChange","evt","resultName","value","type","placeholder","htmlFor","e","selected","files","includes","reader","FileReader","readAsDataURL","onloadend","result","acceptType","Input","inputProfileImg","onClickShowImage","inputProfileName","getWindowInput","textInputPost","getUploadImage","imagesPosts","getStatusFeeling","countTextInputPost","toggleInput","multiple","imageList","addUpdateIndex","maxNumber","dataURLKey","maxFileSize","onImageUpload","onImageRemoveAll","onImageUpdate","onImageRemove","isDragging","dragProps","marginRight","color","fontSize","idImagesPost","PostHasImg","idPost","img","title","setUrlShowImage","setListImagesPost","openWindowListImagesPost","receiveIdPost","setIndexListImages","refTextPost","useRef","openListImagesPost","a","ref","map","data_url","src","alt","image","prototype","PropTypes","string","isRequired","func","number","object","toggle_window_delete_img","status","increment_index_list_images","index","indexIncrement","decrement_index_list_images","indexDecrement","statusDecrementIndex","set_list_images_post","images","listImagesPost","set_list_image_deleted","imgDeleted","set_text_input_post","text","set_images_posts","set_count_text_input_post","set_feeling_status","feelingStatus","toggle_window_input_post","statusWindowInputPost","connect","state","data","props","setInputProfileImg","urlShowImage","setInputProfileName","fontSizeInput","setFontSizeInput","windowEmoji","setWindowEmoji","windowRemoveAllImg","setWindowRemoveAllImg","slideResult","setSlideResult","slideSize","setSlideSize","feelingItems","setFeelingItems","searchTerm","setSearchTerm","statusInputMain","posts","console","log","idPostShowing","alert","useAlert","inputPostRef","slideItem","useEffect","urlImg","slideRightFunc","feelingJSON","feelings","current","clientWidth","statusBool","dispatch","set_idPost_showing","showBackgroundAndImage","emojiToggle","data-tip","data-delay-show","data-effect","data-type","data-border","data-text-color","data-background-color","data-border-color","emojiPicker","bottom","onSelect","native","showInputPost","isWindowInputPost","height","transform","minRows","maxRows","myStringInputPost","enterCount","match","spaceCount","split","row","offsetHeight","idImgPost","imageListTemp","push","getState","set_posts","filter","feeling_name","toLowerCase","key","icon","ShowListImagePost","isWindowListImagesPost","isLoadingDeleteOne","isDeleteLastImg","indexListImages","isWindowDeleteImg","store","setTimeout","i","q","splice","isDeleteSuccess","imgURLtoInput","post","initialstate","listImageDeleted","asyncDeleteImgOnWindowReducer","action","Object","assign","options","timeout","position","positions","TOP_CENTER","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById"],"mappings":"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","file":"static/js/main.9c144384.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// style css\r\nimport './Navbar.css';\r\n\r\n\r\n//! Function Component\r\nexport default function Navbar({ getInfoNavbar, getStatusInputPost }) {\r\n    //! State Image\r\n    const [imgURL, setImgURL] = useState(null);    \r\n    const [imgPreview, setImgPreview] = useState(null);\r\n    const [reserveImgURL, setReserveImgURL] = useState(null);\r\n    //! State Name\r\n    const [inputName, setInputName] = useState('');\r\n    const [profileName, setProfileName] = useState('');\r\n    //! State open and close window custom profile\r\n    const [windowCustom, setWindowCustom] = useState(false);\r\n    //! State Error\r\n    const [error, setError] = useState(false);\r\n    const [length5Error, setLength5Error] = useState(false);\r\n    const [length15Error, setLength15Error] = useState(false);\r\n\r\n\r\n    //! handle image change \r\n    const handleImageChange = (e) => {\r\n        const selected = e.target.files[0];\r\n        const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\r\n\r\n        // matching types\r\n        if(selected && ALLOWED_TYPES.includes(selected.type)) {\r\n            let reader = new FileReader(); // constructor method or object property\r\n            reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\r\n            reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\r\n                setImgURL(reader.result);\r\n                setReserveImgURL(reader.result);\r\n                setError(false);\r\n            }\r\n        } else { // if they don't match, they will be set error.\r\n            setError(true);\r\n            // setLength5Error(false);\r\n            // setLength15Error(false);\r\n        }\r\n    }\r\n    //! check image change\r\n    const checkImageChange = (e) => {\r\n        if(imgURL === null) {\r\n            setImgURL(reserveImgURL);\r\n        }\r\n    }\r\n\r\n\r\n    //! show custom profile\r\n    const showCustomProfile = () => {\r\n        setWindowCustom(true); \r\n        // Do not open Window Input Post\r\n        getStatusInputPost(false);\r\n    }\r\n    //! close custom profile\r\n    const closeCustomProfile = () => {\r\n        setWindowCustom(false);\r\n        // close error when window closed\r\n        setError(false);\r\n        setLength5Error(false);\r\n        setLength15Error(false);\r\n        // setInputName = '' when window closed \r\n        setInputName('');\r\n    }\r\n\r\n    //! Set Name\r\n    const onChangeSetName = (evt) => {\r\n        let resultName = evt.target.value;\r\n        if(resultName.length > 0 && resultName.length < 5) {\r\n            setInputName(resultName);\r\n            setLength5Error(true);\r\n            setLength15Error(false);\r\n        } else if(resultName.length > 15) {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(true);\r\n        } else if(resultName.length === 0) {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(false);\r\n        } else {\r\n            setInputName(resultName);\r\n            setLength5Error(false);\r\n            setLength15Error(false);\r\n        }\r\n    }\r\n\r\n    //! Save profile \r\n    const onClickSaveProfile = () => {\r\n        if(inputName !== '') {\r\n            if(inputName.length < 5) {\r\n                setLength5Error(true);\r\n                setLength15Error(false);\r\n            } else if(inputName.length > 15) {\r\n                setLength5Error(false);\r\n                setLength15Error(true);\r\n            } else if(error === true || length5Error === true || length15Error === true) {\r\n                // can't close\r\n                setWindowCustom(true);\r\n            }  \r\n            else {\r\n                // set name\r\n                setProfileName(inputName);\r\n                // set image\r\n                setImgPreview(imgURL);\r\n                // clear state\r\n                setInputName('');\r\n                // close window custom profile\r\n                setWindowCustom(false);\r\n                // set Error\r\n                setLength5Error(false);\r\n                setLength15Error(false);\r\n                setError(false);\r\n                // call function getInfoNavbar at Input component\r\n                getInfoNavbar(imgURL, inputName);\r\n            } \r\n        } else if(error === true || length5Error === true || length15Error === true) {\r\n            setWindowCustom(true); \r\n        } else {\r\n            // set name\r\n            setProfileName(profileName);\r\n            // set image\r\n            setImgPreview(imgURL);\r\n            // clear state\r\n            setInputName('');\r\n            // close window custom profile\r\n            setWindowCustom(false);\r\n            // call function getInfoNavbar at Input component\r\n            getInfoNavbar(imgURL, profileName);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //! clear profile\r\n    const clearProfile = () => {\r\n        setProfileName('');\r\n        setInputName('');\r\n        setImgPreview(null);\r\n        setImgURL(null);\r\n        setWindowCustom(false);\r\n        //error\r\n        setLength5Error(false);\r\n        setLength15Error(false);\r\n        setError(false);\r\n        // call function getInfoNavbar at Input component\r\n        getInfoNavbar(null, '');\r\n        // Do not open Window Input Post\r\n        getStatusInputPost(true);\r\n    }\r\n\r\n\r\n    //! Component\r\n    return (\r\n        //! container\r\n        <div className=\"navbar_container\">\r\n            <div className=\"navbar_wrapper\">\r\n                {/* //! Navbar */}\r\n                <header className=\"navbar_header\">\r\n                    {/* logo */}\r\n                    <a href=\"/\">Post Something</a>\r\n\r\n                    {/* profile */}\r\n                    <div onClick={showCustomProfile} className=\"navbar_profile_wrapper\">\r\n                        <div id=\"customProfile\" className=\"customFileUpload\">\r\n                            {/* profile image */}\r\n                            <div className=\"navbar_profile_img\" style={{\r\n                                background: imgPreview \r\n                                ? `url('${imgPreview}') no-repeat center/cover`\r\n                                : `#fff`\r\n                            }}>\r\n                            </div>\r\n                            {/* profile name */}\r\n                            <div className=\"nav_profile_name\">\r\n                                {typeof profileName && profileName.length <= 15 && profileName.length >= 5\r\n                                    ? <p>{profileName}</p>\r\n                                    : <p>Enter name</p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* icon social media */}\r\n                    <div className=\"navbar_icon\">\r\n                        <a rel=\"noopener noreferrer\" href=\"https://github.com/wanthanai\" target=\"_blank\"><i class=\"fab fa-github\"></i></a>\r\n                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/wanthanaiK/\" target=\"_blank\"><i class=\"fab fa-facebook\"></i></a>\r\n                        <a rel=\"noopener noreferrer\" href=\"https://mail.google.com/mail/u/1/?hl=th&view=cm&tf=1&fs=1&to=%22wanthanai%20kaiphet%22%20%3Cwanthanai4Work%40gmail.com%3E\" target=\"_blank\"><i class=\"fas fa-envelope\"></i></a>\r\n                    </div>\r\n                </header>\r\n\r\n                {/*//! window custom profile */}\r\n                <div className=\"window_profile\" style={{\r\n                    display: windowCustom === true\r\n                    ? 'flex'\r\n                    : 'none'\r\n                }}> \r\n                    {/*//! close custom profile */}\r\n                    <button onClick={closeCustomProfile} className=\"closeWindow\">close</button>\r\n                    {/*//! error message */}\r\n                    <p className=\"errorMsg\">{error && `Supported Types (jpeg, jpg, png)`}</p>\r\n                    {length5Error && <p className=\"errorMsg\">Name' must be at least 5 char.</p>}\r\n                    {length15Error && <p className=\"errorMsg\">Name' cannot exceed 15 char.</p>}\r\n                    {/*//! set name */}\r\n                    <input onChange={onChangeSetName} value={inputName} type=\"text\" className=\"set_name\" placeholder=\"please enter name...\" />\r\n                    {/*//! upload file */}\r\n                    <label htmlFor=\"fileUpdate\" className=\"window_uploadFile\">change image</label>\r\n                    <input onClick={checkImageChange} onChange={handleImageChange} type=\"file\" id=\"fileUpdate\" />\r\n                    {/*//! save profile */}\r\n                    <button onClick={onClickSaveProfile} className=\"btn_save_profile\">save</button>\r\n                    {/*//! clear profile */}\r\n                    <button onClick={clearProfile} className=\"btn_clear\">clear</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nNavbar.propTypes = {\r\n    getInfoNavbar: PropTypes.func.isRequired, \r\n    getStatusInputPost: PropTypes.func.isRequired\r\n}","//! Import\r\nimport React from 'react'\r\nimport './Input.css'\r\n// PropTypes\r\nimport PropTypes from 'prop-types'\r\n// Icon \r\nimport { BsImages } from \"react-icons/bs\";\r\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\r\n// Images uploading\r\nimport ImageUploading from 'react-images-uploading';\r\n\r\n\r\n\r\n\r\n\r\n//! Variable\r\n// Images Uploading\r\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\r\nconst maxNumber = 69;\r\n\r\n\r\n//! Function Component\r\nexport default function Input({ inputProfileImg, onClickShowImage, inputProfileName, getWindowInput, textInputPost, getUploadImage, imagesPosts, getStatusFeeling , countTextInputPost }) {\r\n    //! State\r\n    // State Image Input Post\r\n    \r\n    \r\n\r\n\r\n    //! Function Another\r\n    //* 1.Toggle Input Post\r\n    const toggleInput = () => {\r\n        getWindowInput(inputProfileName);\r\n    }\r\n\r\n    //* 2.Handle Image Change\r\n    const handleImageChange = (imageList, addUpdateIndex) => {\r\n        // console.log(imageList, addUpdateIndex);\r\n        getUploadImage(imageList, addUpdateIndex, true);\r\n    }; \r\n\r\n    //* 3.Do not open Window Input Post\r\n\r\n\r\n\r\n\r\n\r\n    //! Main Component\r\n    return(\r\n        //! Container \r\n        <div className=\"container\">\r\n            {/*//! header image */}\r\n            <div className=\"header_img\">\r\n               {/* background image  */}\r\n            </div>\r\n\r\n            {/*//! input main */}\r\n            <div className=\"input_main_wrapper\">\r\n                {/*//! main top */}\r\n                <div className=\"main_top\">\r\n\r\n                    {/* top profile */}\r\n                    <div className=\"top_profile_wrapper\">\r\n                        <div onClick={() => onClickShowImage(inputProfileImg)} className=\"top_profile\" style={{\r\n                            background: inputProfileImg !== null\r\n                            ? `url('${inputProfileImg}') no-repeat center/cover`\r\n                            : `#fff`\r\n                        }}>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {countTextInputPost !== 0 \r\n                        ? <div onClick={toggleInput} className=\"LinesEllipsis top_input\">{textInputPost.length > 40 ? `${textInputPost}...` : `${textInputPost}`}</div>   \r\n                        : <div onClick={toggleInput} className=\"top_input\">{inputProfileName !== '' ? `What are you thinking? ${inputProfileName}` : 'What are you thinking? ...'}</div>\r\n                    }\r\n                </div>\r\n                {/*//! main bottom */}\r\n                <div className=\"main_bottom\">\r\n                    {/* bottom image */}\r\n                    <ImageUploading\r\n                        multiple\r\n                        value={imagesPosts}\r\n                        onChange={handleImageChange}\r\n                        maxNumber={maxNumber}\r\n                        dataURLKey=\"data_url\"\r\n                        acceptType={acceptType}\r\n                        maxFileSize={4194304}\r\n                    >\r\n                        {({\r\n                            imageList,\r\n                            onImageUpload,\r\n                            onImageRemoveAll,\r\n                            onImageUpdate,\r\n                            onImageRemove,\r\n                            isDragging,\r\n                            dragProps,\r\n                        }) => (\r\n                            <div \r\n                                className=\"bottom_image\"\r\n                                onClick={onImageUpload}\r\n                            >\r\n                                <BsImages \r\n                                    style={{\r\n                                    marginRight: '10px',\r\n                                    color: '#45bd62',\r\n                                    fontSize: '23px'\r\n                                }}/>\r\n                                Image\r\n                            </div>    \r\n                        )}\r\n                    </ImageUploading>\r\n\r\n                    {/* bottom feeling */}\r\n                    <div \r\n                        className=\"bottom_feeling\"\r\n                        onClick={() => getStatusFeeling(true)}\r\n                    >\r\n                        <RiEmotionLaughLine \r\n                            style={{\r\n                            marginRight: '10px',\r\n                            color: '#f7b928',\r\n                            fontSize: '23px'\r\n                        }}/>\r\n                        Feeling\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nInput.propTypes = {\r\n    inputProfileImg: PropTypes.string,\r\n    onClickShowImage: PropTypes.func.isRequired,\r\n    inputProfileName: PropTypes.string.isRequired,\r\n    getWindowInput: PropTypes.func.isRequired, \r\n    textInputPost: PropTypes.string.isRequired, \r\n    getUploadImage: PropTypes.func.isRequired,\r\n    imagesPosts: PropTypes.array.isRequired, \r\n    getStatusFeeling: PropTypes.func.isRequired, \r\n    countTextInputPost: PropTypes.number.isRequired\r\n}","//! Import\r\nimport React, { useRef, useState } from 'react'\r\nimport './Post.css'\r\n// Icon\r\nimport { HiDotsHorizontal } from \"react-icons/hi\";\r\n// PropTypes\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n//! Variable\r\nlet idImagesPost = 1;\r\n\r\n\r\n//! Main Component\r\nexport default function PostHasImg ({inputProfileImg, inputProfileName, onClickShowImage, idPost, img, title, setUrlShowImage, setListImagesPost, openWindowListImagesPost, receiveIdPost, setIndexListImages }) {\r\n    //! useState\r\n    \r\n    //! useRef\r\n    const refTextPost = useRef(null);\r\n    \r\n\r\n    // if(textInputPost !== '') {\r\n    //     setWidthTextPost(refTextPost.current.children[0].offsetWidth);\r\n    // } \r\n\r\n\r\n    //! Function\r\n    //* 1. open window show list images post\r\n    const openListImagesPost = async() => {\r\n        // setState\r\n        await setListImagesPost(img);\r\n        await receiveIdPost(idPost);\r\n        await openWindowListImagesPost();\r\n        await setIndexListImages();\r\n    } \r\n\r\n\r\n    //! Component\r\n    return (\r\n        <div className=\"post_container\">\r\n            <div className=\"post_wrapper\">\r\n\r\n                {img.length === 0\r\n                    ?\r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name */}\r\n                                <p className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</p>\r\n                                {/* time */}\r\n                                <p className=\"post_time\">now.</p>\r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            <div className=\"post_top_right\">\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length === 1 \r\n                    ? \r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name */}\r\n                                <p className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</p>\r\n                                {/* time */}\r\n                                <p className=\"post_time\">now.</p>\r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            <div className=\"post_top_right\">\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image\">\r\n                                {img.map((img) => {\r\n                                    return(\r\n                                        <li>\r\n                                            <img onClick={() => setUrlShowImage(img.data_url)} src={img.data_url} alt=\"post-img\" />\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length === 2 \r\n                    ? \r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name */}\r\n                                <p className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</p>\r\n                                {/* time */}\r\n                                <p className=\"post_time\">now.</p>\r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            <div className=\"post_top_right\">\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image twoImg\">\r\n                                {img.map((img) => {\r\n                                    idImagesPost++\r\n                                    return(\r\n                                        <li key={idImagesPost}>\r\n                                            <img onClick={() => setUrlShowImage(img.data_url)} src={img.data_url} alt=\"post-img\" />\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {img.length > 2 \r\n                    ?\r\n                    <>\r\n                        {/* Post Top */}\r\n                        <div className=\"post_top\">\r\n                            {/* top left */}\r\n                            <div \r\n                            className=\"image_profile\" \r\n                            style={inputProfileImg ? {background: `url(${inputProfileImg}) no-repeat center/cover`} : {background: `#fff`}}\r\n                            onClick={() => onClickShowImage(inputProfileImg)}\r\n                            >{/* Image Profile */}</div>\r\n\r\n                            {/* top center */}\r\n                            <div className=\"post_top_center\">\r\n                                {/* name */}\r\n                                <p className=\"post_name\">{inputProfileName ? inputProfileName : 'Enter Name..'}</p>\r\n                                {/* time */}\r\n                                <p className=\"post_time\">now.</p>\r\n                            </div>\r\n\r\n                            {/* top right */}\r\n                            <div className=\"post_top_right\">\r\n                                <HiDotsHorizontal className=\"post_dot\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Post Center Content */}\r\n                        <div className=\"post_center\">\r\n                            {/* Text */}\r\n                            {/* <p className=\"post_text\">{textInputPost}</p> */}\r\n                            <p className=\"textPost\" ref={refTextPost}>\r\n                                {title}\r\n                            </p>\r\n\r\n                            {/* Image */}\r\n                            <ul className=\"post_content_image moreThanTwo\">\r\n                                {img.map((image) => {\r\n                                    idImagesPost++\r\n                                    return(\r\n                                        <li key={idImagesPost}>\r\n                                            <div onClick={() => openListImagesPost()}>\r\n                                                <img src={image.data_url} alt=\"post-img\" />\r\n                                            </div>\r\n                                            <span className=\"number_moreThanTwo\">+{img.length - 2}</span>\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </>\r\n                    : null\r\n                }\r\n                \r\n\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//! PropTypes \r\nPostHasImg.prototype = {\r\n    inputProfileImg: PropTypes.string.isRequired,\r\n    inputProfileName: PropTypes.string.isRequired, \r\n    onClickShowImage: PropTypes.func.isRequired, \r\n    id: PropTypes.number.isRequired,\r\n    img: PropTypes.object.isRequired,\r\n    title: PropTypes.string.isRequired, \r\n    setUrlShowImage: PropTypes.func.isRequired,\r\n    setListImagesPost: PropTypes.func.isRequired,\r\n    openWindowListImagesPost: PropTypes.func.isRequired,\r\n    receiveIdPost: PropTypes.func.isRequired,\r\n    setIndexListImages: PropTypes.func.isRequired\r\n}","import store from '../index';\r\n\r\n\r\n//! Action\r\n\r\n// Delete Last Image\r\nexport const delete_last_img = () => {\r\n    return {\r\n        type: \"DELETE_LAST_IMG\"\r\n    }\r\n}\r\n\r\n// Loading Delete One\r\nexport const loading_deleteOne = () => {\r\n    return {\r\n        type: \"LOADING_DELETE_ONE\"\r\n    }\r\n}\r\n// Loading Delete Success\r\nexport const loading_deleteOne_success = () => {\r\n    return {\r\n        type: \"LOADING_DELETE_ONE_SUCCESS\"\r\n    }\r\n}\r\n// Loading Delete Last Image Success\r\nexport const loading_deleteLastImg_success = () => {\r\n    return {\r\n        type: \"LOADING_DELETE_LAST_IMG_SUCCESS\"\r\n    }\r\n}\r\n\r\n\r\n// Toggle Window Delete Image\r\nexport const toggle_window_delete_img = (status) => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_DELETE_IMG\",\r\n        status: status \r\n    }\r\n}\r\n\r\n// Close Delete Success\r\nexport const close_delete_one_success = () => {\r\n    return {\r\n        type: \"CLOSE_DELETE_SUCCESS\"\r\n    }\r\n}\r\n\r\n// Window Show Image\r\nexport const window_list_images_post = () => {\r\n    return {\r\n        type: \"WINDOW_LIST_IMAGES_POST\"\r\n    }\r\n}\r\n\r\n// Index List Images { increment, decrement }\r\n// Increment +\r\nexport const increment_index_list_images = (index) => {\r\n    return {\r\n        type: \"INCREMENT_INDEX_LIST_IMAGES\",\r\n        indexIncrement: index\r\n    }\r\n}\r\n// Decrement - \r\nexport const decrement_index_list_images = (status, index) => {\r\n    return {\r\n        type: \"DECREMENT_INDEX_LIST_IMAGES\",\r\n        indexDecrement: index,\r\n        statusDecrementIndex: status\r\n    }\r\n}\r\n// Set Index List Images \r\nexport const set_index_list_images = () => {\r\n    return {\r\n        type: \"SET_INDEX_LIST_IMAGES\",\r\n    }\r\n}\r\n\r\n// Receive Img For Set List Images \r\nexport const set_list_images_post = (images) => {\r\n    return {\r\n        type: \"SET_LIST_IMAGE_POST\",\r\n        listImagesPost: images\r\n    }\r\n}\r\n\r\n// Set List Image Deleted\r\nexport const set_list_image_deleted = (img) => {\r\n    return {\r\n        type: \"SET_LIST_IMAGE_DELETED\",\r\n        imgDeleted: img\r\n    }\r\n}\r\n\r\n// Toggle Window List Images Post\r\nexport const toggle_window_list_imagesPost = () => {\r\n    return {\r\n        type: \"TOGGLE_WINDOW_LIST_IMAGES_POST\"\r\n    }\r\n}\r\n\r\n// ( delete all ) set list images post \r\nexport const set_list_images_post_deleteAll = () => {\r\n    return{\r\n        type: \"SET_LIST_IMAGES_DELETEALL\"\r\n    }\r\n}\r\n\r\n//! ( Posts ) - action\r\n// setPosts \r\nexport const set_posts = (posts) => {\r\n    return{\r\n        type: \"SET_POSTS\",\r\n        posts: posts\r\n    }\r\n}\r\n// Set Text Input Post \r\nexport const set_text_input_post = (text) => {\r\n    return{\r\n        type: \"SET_TEXT_INPUT_POST\",\r\n        textInputPost: text\r\n    }\r\n}\r\n// Set Images Posts\r\nexport const set_images_posts = (img) => {\r\n    return{\r\n        type: \"SET_IMAGES_POSTS\",\r\n        imagesPosts: img\r\n    }\r\n}\r\n// Set Count Text Input Post\r\nexport const set_count_text_input_post = (result) => {\r\n    return{\r\n        type: \"SET_COUNT_TEXT_INPUT_POST\",\r\n        countTextInputPost: result\r\n    }\r\n}\r\n// Set Feeling Status \r\nexport const set_feeling_status = (status) => {\r\n    return{\r\n        type: \"SET_FEELING_STATUS\",\r\n        feelingStatus: status\r\n    }\r\n}\r\n// Set Id Post Showing\r\nexport const set_idPost_showing = (id) => {\r\n    return{\r\n        type: \"SET_IDPOST_SHOWING\",\r\n        idPostShowing: id\r\n    }\r\n}\r\n\r\n//! ( Window ) - action\r\n// toggle window input post\r\nexport const toggle_window_input_post = (status) => {\r\n    return{\r\n        type: \"TOGGLE_WINDOW_INPUT_POST\",\r\n        statusWindowInputPost: status\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//! Redux Thunk Middleware\r\n\r\n// delete one\r\nexport const thunk_action_deleteOne = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { indexListImages, listImagesPost, posts, idPostShowing } = getState();\r\n        // setListImageDeleted\r\n        dispatch(set_list_image_deleted(listImagesPost.filter(img => img.data_url === listImagesPost[indexListImages].data_url)));\r\n\r\n        // loading success\r\n        setTimeout(() => {\r\n            dispatch(toggle_window_delete_img('close'));\r\n            dispatch(loading_deleteOne_success());\r\n            dispatch(set_list_images_post(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    for(let q = 0; q < posts[i].imagesPosts.length; q++) {\r\n                        if(q === indexListImages) {\r\n                            posts[i].imagesPosts.splice(indexListImages, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        }, 1200)\r\n        setTimeout(() => {\r\n            dispatch(close_delete_one_success());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// delete one - ( Delete Last Image )\r\nexport const thunk_action_deleteLastImg = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { indexListImages, listImagesPost, posts, idPostShowing } = getState();\r\n        // setListImageDeleted\r\n        dispatch(set_list_image_deleted(listImagesPost.filter(img => img.data_url === listImagesPost[indexListImages].data_url)));\r\n        // delete last image\r\n        dispatch(delete_last_img());\r\n\r\n        setTimeout(() => {\r\n            // set list image post\r\n            dispatch(set_list_images_post(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\r\n            // toggle window delete image\r\n            dispatch(toggle_window_delete_img('close'));\r\n            // loading delete success\r\n            dispatch(loading_deleteLastImg_success());\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    for(let q = 0; q < posts[i].imagesPosts.length; q++) {\r\n                        if(q === indexListImages) {\r\n                            posts[i].imagesPosts.splice(indexListImages, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }            \r\n        }, 1200)\r\n        setTimeout(() => {\r\n            // close delete success\r\n            dispatch(close_delete_one_success());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// delete one - ( one image left )\r\nexport const thunk_action_oneImageLeft = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { indexListImages, listImagesPost, posts, idPostShowing } = getState();\r\n        // setListImageDeleted\r\n        dispatch(set_list_image_deleted(listImagesPost.filter(img => img.data_url === listImagesPost[indexListImages].data_url)));\r\n\r\n        setTimeout(() => {\r\n            // set list image post\r\n            dispatch(set_list_images_post(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\r\n            // toggle window delete image\r\n            dispatch(toggle_window_delete_img('close'));\r\n            // loading delete success\r\n            dispatch(loading_deleteOne_success());\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    for(let q = 0; q < posts[i].imagesPosts.length; q++) {\r\n                        if(q === indexListImages) {\r\n                            posts[i].imagesPosts.splice(indexListImages, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }                        \r\n        }, 1200)\r\n        setTimeout(() => {\r\n            // close delete success\r\n            dispatch(close_delete_one_success());\r\n            // close window\r\n            dispatch(toggle_window_list_imagesPost());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// delete all \r\nexport const thunk_action_deleteAll = () => {\r\n    // loading\r\n    store.dispatch(loading_deleteOne());    \r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const { posts, idPostShowing } = getState();\r\n\r\n        // loading success\r\n        setTimeout(() => {\r\n            dispatch(toggle_window_delete_img('close'));\r\n            dispatch(loading_deleteOne_success());\r\n            dispatch(set_list_images_post_deleteAll());\r\n\r\n            // new post when img deleted\r\n            for(let i = 0; i < posts.length; i++) {\r\n                if(posts[i].idPost === idPostShowing) {\r\n                    posts[i].imagesPosts.splice(0, posts[i].imagesPosts.length);\r\n                }\r\n            }                        \r\n        }, 1200)\r\n        setTimeout(() => {\r\n            // close delete success\r\n            dispatch(close_delete_one_success());\r\n            // close window\r\n            dispatch(toggle_window_list_imagesPost());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\n// Set Posts ( thunk middleware )\r\nlet idPost = 1;\r\nexport const thunk_action_setPosts = () => {\r\n    return (dispatch, getState) => {\r\n        // getState\r\n        const {textInputPost, imagesPosts, posts} = getState();\r\n        const newPost = {idPost, textInputPost, imagesPosts};\r\n\r\n        dispatch(set_posts([newPost, ...posts]));\r\n        idPost++\r\n        // close window input post\r\n        // clear text input component\r\n        dispatch(toggle_window_input_post(false));\r\n        dispatch(set_count_text_input_post(0));\r\n\r\n        // clear item in textarea\r\n        dispatch(set_text_input_post(''));\r\n        dispatch(set_images_posts([]));\r\n        dispatch(set_feeling_status('?'));\r\n    }\r\n}\r\n","//! Import\n// React \nimport React, { useRef, useState, useEffect } from \"react\";\n// Style\nimport \"./App.css\";\nimport feelingJSON from './feeling';\n// Component\nimport Navbar from \"./component/Navbar\";\nimport Input from \"./component/Input\";\nimport PostHasImg from \"./component/PostHasImg\"\n// Icon\nimport { AiFillCloseCircle, AiOutlineLeft, AiOutlineRight } from \"react-icons/ai\";\nimport { GrEmoji } from \"react-icons/gr\";\nimport { BsImages } from \"react-icons/bs\";\nimport { RiEmotionLaughLine } from \"react-icons/ri\";\nimport { IoClose, IoArrowBackOutline, IoConstructOutline } from \"react-icons/io5\";\nimport { BiSearchAlt } from \"react-icons/bi\";\nimport { HiDotsHorizontal } from \"react-icons/hi\";\n// Textarea auto-resize\nimport TextareaAutosize from \"react-textarea-autosize\";\n// Emoji-picker\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n// Tooltip\nimport ReactTooltip from 'react-tooltip';\n// Images uploading\nimport ImageUploading from 'react-images-uploading';\n// Alert Message\nimport { useAlert } from \"react-alert\";\nimport { any, func } from \"prop-types\";\n// Redux\nimport { connect } from 'react-redux';\n// Redux Action\nimport \n{   thunk_action_deleteOne, thunk_action_deleteLastImg, toggle_window_delete_img, increment_index_list_images, decrement_index_list_images, set_index_list_images,\n    set_list_images_post, thunk_action_oneImageLeft, toggle_window_list_imagesPost, thunk_action_deleteAll, thunk_action_setPosts, set_text_input_post, set_images_posts,\n    toggle_window_input_post, set_count_text_input_post, set_feeling_status, set_idPost_showing\n} \nfrom './actions/index';\n\n\n\n//! Variable\n// Images Uploading\nconst acceptType = ['jpeg', 'jpg', 'png', 'gif', 'tiff', 'heif', 'webp', 'svg']\nconst maxNumber = 69;\n\n// Id Post\nlet idPost = 1;\n\n\n\n//! Function Component\nfunction App(props) {\n    //! State\n    // State Image Profile\n    const [inputProfileImg, setInputProfileImg] = useState(null);\n    const [urlShowImage, setUrlShowImage] = useState(\"\");\n    // State Name\n    const [inputProfileName, setInputProfileName] = useState(\"\");\n    // State Text Input Post\n    const [fontSizeInput, setFontSizeInput] = useState(\"big\");\n    // State Emoji Toggle\n    const [windowEmoji, setWindowEmoji] = useState(false);\n    // State Window Remove All Images List\n    const [windowRemoveAllImg, setWindowRemoveAllImg] = useState(false);\n    // State Slide \n    const [slideResult, setSlideResult] = useState('');\n    const [slideSize, setSlideSize] = useState('');\n    // State Feeling\n    const [feelingItems, setFeelingItems] = useState([]);\n    // Search Term\n    const [searchTerm, setSearchTerm] = useState('');\n    // Status Input Main\n    const [statusInputMain, setStatusInputMain] = useState(false);\n\n\n    //! Posts\n    const posts = props.data.posts\n    console.log(props.data.posts);\n    console.log(props.data.idPostShowing);\n\n    //! useAlert();\n    const alert = useAlert();\n\n    //! useRef\n    const inputPostRef = useRef(null);\n    const slideItem = useRef(null);\n\n    //! useEffect\n    useEffect(() => {});\n\n    //! Function Another\n    //* 1. get info from Navbar\n    const getInfoNavbar = (imgURLtoInput, profileName) => {\n      setInputProfileImg(imgURLtoInput);\n      setInputProfileName(profileName);\n    };\n\n    //* 2. onClick show image\n    const onClickShowImage = (urlImg) => {\n      setUrlShowImage(urlImg);\n    };\n  \n    //* 3. onClick close image\n    const onClickCloseImage = () => {\n      setUrlShowImage(\"\");\n    };\n\n    //* 4. Change font size input Post\n    const rowCount = (evt) => {\n        props.dispatch(set_text_input_post(evt.target.value));\n        // console.log(evt.target.value);\n\n        \n        // count number of characters without spaces and enters\n        let myStringInputPost = evt.target.value;\n        let enterCount = (myStringInputPost.match(/\\n/g) || []).length; \n        let spaceCount = (myStringInputPost.split(\" \").length - 1);\n        // console.log(`Enter Count:- ${enterCount}`);\n        // console.log(`Space Count:- ${spaceCount}`);\n        // console.log(`total count:- ${(myStringInputPost.length - spaceCount) - enterCount}`);\n        props.dispatch(set_count_text_input_post((myStringInputPost.length - spaceCount)- enterCount));\n\n\n        let row = evt.target.offsetHeight;\n        //   console.log(evt.target.offsetHeight);\n        \n        if (fontSizeInput === \"big\") { //big font\n          if (row > 172) {\n            setFontSizeInput(\"small\");\n          } \n        }\n        if (fontSizeInput === \"small\") { //small font\n          if (evt.target.value.length === 0) {\n            setFontSizeInput(\"big\");\n          } \n        }\n    };\n  \n    //* 5. Add Emoji\n    const addEmoji = (e) => {\n      // console.log(e);\n    \n      // emoji concat text\n      props.dispatch(set_text_input_post(`${props.data.textInputPost}${e.native}`));\n    };\n  \n    //* 6. Emoji Toggle\n    const toggleEmoji = () => {\n      if (!windowEmoji) {\n        setWindowEmoji(true);\n      } else {\n        setWindowEmoji(false);\n      }\n    };\n  \n    //* 7. Get Status and Open Window Input Post\n    const getWindowInput = (inputProfileName) => {\n      //   console.log(statusWindowInput);\n      if (inputProfileName !== \"\") props.dispatch(toggle_window_input_post(true));\n      else {\n        alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        props.dispatch(toggle_window_input_post(false));\n      } \n    };\n  \n    //* 8. Close Input Post\n    const closeInputPost = () => {  \n        props.dispatch(toggle_window_input_post(false));\n    };\n  \n    //* 9. handle image change  \n    // const handleImageChange = (e) => { //! ไม่ใช้เเล้ว เพราะมีข้อจำกัดในด้านการอัพโหลดที่ไม่สามารถอัพโหลดรูปซ้ำได้\n    //     const selected = e.target.files[0];\n    //     const ALLOWED_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\"]\n\n    //     // matching types\n    //     if(selected && ALLOWED_TYPES.includes(selected.type)) {\n    //         let reader = new FileReader(); // constructor method or object property\n    //         reader.readAsDataURL(selected); // read ตัว selected ให้เป็น Data URL แล้วผลลัพธ์จะอยู่ที่ reader.result\n    //         reader.onloadend = () => { // เมื่ออ่านเเละโหลดตัวไฟล์เสร็จเเล้ว ก็จะให้เข้าไปทำใน Arrow function\n    //             let imgURL = reader.result;\n    //             let result = {imgURL, id};\n\n    //             setInputPostImgURL([result, ...inputPostImgURL]);\n                \n    //             id++\n    //         }\n    //     } else { // if they don't match, they will be set error.\n    //         console.log('file not supported.');            \n    //     }\n    // }\n\n    //* 10. Evolution handle image change #1\n    const handleImageChange = (imageList, addUpdateIndex) => {\n        // Id Image Post\n        let idImgPost = 1;\n        // console.log(imageList, addUpdateIndex);\n        const imageListTemp = [];\n\n        //setState ImagesPosts\n        imageList.map((img) => {\n            imageListTemp.push({ data_url:img.data_url, id:idImgPost });\n            idImgPost++\n        }) //! บัค id image เพราะ เมือใช้ function onImageRemove มันจะทำการ +idImage เพราะมันต้องผ่าน function นี้เสมอ แต่ยังไม่มีผลเสียอะไร \n\n        props.dispatch(set_images_posts(imageListTemp));\n    }; \n\n\n    //* 11 Slide Next\n    const slideRightFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setFeelingItems(feelingJSON.feelings);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('right');\n        setWindowEmoji(false);\n    }\n\n    //* 12. Slide Previous\n    const slideLeftFunc = () => {\n        // console.log(slideItem.current.clientWidth);\n        setSlideSize(slideItem.current.clientWidth);\n        setSlideResult('left');\n    }\n\n    //* 13. Get Status Upload Image from PostHasImg Component\n    const getUploadImage = (imageList, addUpdateIndex, statusBool) => {\n        // Id Image Post\n        let idImgPost = 1;\n\n        const imageListTemp = [];\n\n        //setState ImagesPosts\n        imageList.map((img) => {\n            imageListTemp.push({ data_url:img.data_url, id:idImgPost });\n            idImgPost++\n        }) //! บัค id image เพราะ เมือใช้ function onImageRemove มันจะทำการ +idImage เพราะมันต้องผ่าน function นี้เสมอ แต่ยังไม่มีผลเสียอะไร \n        props.dispatch(set_images_posts(imageListTemp));\n\n        // alert error\n        if(inputProfileName === '') {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n            props.dispatch(set_images_posts([]));\n        } else {\n            props.dispatch(toggle_window_input_post(statusBool));\n        }\n        \n    }\n    //* 14. Get Status Feeling\n    const getStatusFeeling = async(statusBool) => {\n        if(statusBool === true && inputProfileName !== '') {\n            props.dispatch(toggle_window_input_post(statusBool));\n            slideRightFunc();\n        } else {\n            alert.error(<div className=\"alert_error\">Please enter your name first.</div>)\n        }\n    }\n\n    //* 15. Do not open Window Input Post\n    const getStatusInputPost = (statusBool) => {\n        if(statusBool === true) {\n            props.dispatch(set_text_input_post(''));\n            props.dispatch(set_count_text_input_post(0));\n        }\n    } \n\n    //* 16. onclick button Post\n    const addPost = () => {\n        props.dispatch(thunk_action_setPosts());\n    }\n\n    //* 17. Increment Index List Images +\n    const incrementIndexListImg = () => {\n        if(props.data.indexListImages === props.data.listImagesPost.length - 1) {\n            props.dispatch(increment_index_list_images('lastIndex'));\n            props.dispatch(toggle_window_delete_img('close'));\n        } else {\n            props.dispatch(increment_index_list_images('next'));\n            props.dispatch(toggle_window_delete_img('close'));\n        } \n    }\n    //* 18. Decrement Index List Images -\n    const decrementIndexListImg = () => {\n        if(props.data.indexListImages === 0) {\n            props.dispatch(decrement_index_list_images(true, props.data.listImagesPost.length - 1));\n            props.dispatch(toggle_window_delete_img('close'));\n        } else {\n            props.dispatch(decrement_index_list_images(false, null));\n            props.dispatch(toggle_window_delete_img('close'));\n        } \n    }\n\n    //* 19. Delete One, List Images Post or Filter\n    // const deleteOneListImagesPost = (timeout, set1, set2, set3) => {\n    //     return new Promise((resolve, reject) => {\n    //         setTimeout(() => {\n    //             if(set1 !== null) {\n    //                 resolve();\n    //             }\n    //         }, timeout)\n    //     })\n    // }\n    //* 19.1 Run\n    // const RundeleteOneListImagesPost = async() => {\n    //     try {\n    //         await deleteOneListImagesPost(0, setListImageDeleted(listImagesPost.filter(img => img.data_url === listImagesPost[indexListImages].data_url)));\n    //         if(listImagesPost.length - 1 !== 0) {\n    //             if(indexListImages === listImagesPost.length -1) {\n    //                 await deleteOneListImagesPost(0, setIndexDeleteLastImage(true));\n    //                 await deleteOneListImagesPost(1000, setWindowLoadingDeleteOne(true));\n    //                 await deleteOneListImagesPost(0, setWindowDeleteImg(false));\n    //                 await deleteOneListImagesPost(0, setListImagesPost(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\n    //                 await deleteOneListImagesPost(0, setWindowLoadingDeleteOne(false))\n    //                 await deleteOneListImagesPost(0, newPostWhenImgDeleted());\n    //                 await deleteOneListImagesPost(500, setWindowLoadingDeleteOneSuccess(true))\n    //                 await deleteOneListImagesPost(0, setWindowLoadingDeleteOneSuccess(false));\n    //                 await deleteOneListImagesPost(0, setIndexListImages(0));\n    //                 await deleteOneListImagesPost(0, setIndexDeleteLastImage(false));\n    //             } else {\n    //                 await deleteOneListImagesPost(1000, setWindowLoadingDeleteOne(true));\n    //                 await deleteOneListImagesPost(0, setWindowDeleteImg(false));\n    //                 await deleteOneListImagesPost(0, setListImagesPost(listImagesPost.filter(img => img.data_url !== listImagesPost[indexListImages].data_url)));\n    //                 await deleteOneListImagesPost(0, setWindowLoadingDeleteOne(false));\n    //                 await deleteOneListImagesPost(0, newPostWhenImgDeleted());\n    //                 await deleteOneListImagesPost(500, setWindowLoadingDeleteOneSuccess(true));\n    //                 await deleteOneListImagesPost(0, setWindowLoadingDeleteOneSuccess(false));\n    //             }\n    //         } else {\n    //             await deleteOneListImagesPost(1500, setWindowLoadingDeleteOne(true));\n    //             await deleteOneListImagesPost(0, setWindowLoadingDeleteOne(false));\n    //             await deleteOneListImagesPost(500, setWindowLoadingDeleteOneSuccess(true));\n    //             await deleteOneListImagesPost(0, setWindowLoadingDeleteOneSuccess(false));\n    //             await deleteOneListImagesPost(0, setWindowDeleteImg(false));\n    //             await deleteOneListImagesPost(0, setWindowListImagesPost(false));\n    //         }\n    //     } catch(err) {\n    //         console.error(err);\n    //     }\n\n    // }\n    // * 19.1 setPost when delete list img\n    // const newPostWhenImgDeleted = () => {\n    //     // filter delete img list and setState \n    //     if(props.data.listImageDeleted.length !== 0) {\n    //         for(let i = 0; i < posts.length; i++) {\n    //             for(let q = 0; q < posts[i].imagesPosts.length; q++) {\n    //                 if(q === props.data.indexListImages) {\n    //                     posts[i].imagesPosts.splice(props.data.indexListImages - 1, 1);\n    //                 }\n    //             }\n    //         }\n    //         console.log('delete success!');\n    //     }\n    // }\n    //* 19. Delete One, List Images Post or Filter\n    const deleteOneListImagesPost = () => {\n        // listImages !== 0\n        if(props.data.listImagesPost.length - 1 !== 0) {\n            //- != last img\n            if(props.data.indexListImages !== props.data.listImagesPost.length -1) {\n                props.dispatch(thunk_action_deleteOne())\n            } else {\n                // = last img\n                props.dispatch(thunk_action_deleteLastImg());\n            }\n        } else {\n            // รูปสุดท้าย ลบแล้ว close window\n            props.dispatch(thunk_action_oneImageLeft());\n        }\n    }\n\n    //* 20. Delete All, List Images Post\n    const deleteAllListImagesPost = () => {\n        props.dispatch(thunk_action_deleteAll());\n    }\n\n    //* 21. close window show list image post\n    const closeWindowListImagesPost = () => {\n        props.dispatch(toggle_window_list_imagesPost());\n    }\n    //* 21.1 open window show list image post\n    const openWindowListImagesPost = () => {\n        props.dispatch(toggle_window_list_imagesPost());\n    }\n\n    //* 22. Receive idPost from Post Componenet\n    const receiveIdPost = (id) => {\n        props.dispatch(set_idPost_showing(id));\n    }\n\n    //* 23. Set Index List Images = 0\n    const setIndexListImages = () => {\n       props.dispatch(set_index_list_images());\n    }\n\n    //* 24. dispatch list image post - receive img from PostHasImg Component\n    const setListImagesPost = (images) => {\n        props.dispatch(set_list_images_post(images));\n    }\n\n\n\n    //! Small Component\n    //* 1. Show background and image\n    const showBackgroundAndImage = (\n      <div\n        onClick={onClickCloseImage}\n        className={\n          urlShowImage === \"\" ? \"main_show_image close\" : \"main_show_image show\"\n        }\n      >\n        '{/* show image */}\n        <div\n          className=\"show_image\"\n          style={{\n            background:\n              urlShowImage !== null\n                ? `url('${urlShowImage}') no-repeat center/contain`\n                : \"#fff\",\n          }}\n        ></div>\n      </div>\n    );\n        \n    //* 2.1 Emoji Toggle\n    const emojiToggle = (\n        <>\n            <GrEmoji \n                onClick={toggleEmoji} \n                className=\"emoji_toggle\" \n                data-tip=\"emoji\" \n                data-delay-show=\"300\" \n                data-effect=\"solid\" \n                data-type=\"light\" \n                data-border=\"true\"\n                data-text-color=\"#000\"\n                data-background-color=\"rgb(209, 208, 208, 1)\"\n                data-border-color=\"rgb(109, 109, 109)\"\n            />\n            <ReactTooltip />\n        </>\n    );\n    \n    //* 2.2 Emoji Picker\n    const emojiPicker = (\n      <span\n        className={\n          !windowEmoji\n            ? \"emoji_picker_wrapper close\"\n            : \"emoji_picker_wrapper show\"\n        }\n        style={props.data.imagesPosts.length !== 0 ? {bottom: '53%'} : {bottom: '38%'}}\n      >\n        <Picker className=\"emoji_picker\" onSelect={addEmoji} />\n      </span>\n    );\n\n\n    //* 2. Show Input Post\n    const showInputPost = (\n        //! show input post \n        <div className={!props.data.isWindowInputPost ? \"main_show_input close\" : \"main_show_input show\"\n        }>  \n            <div className=\"main_show_input_container\">\n\n                {/*//! emoji picker */}\n                <div className=\"emoji_picker_container\">\n                    {emojiPicker} {/* small component */}\n                </div>\n\n                {/* //! Slide / main show input wrapper */}\n                <div className=\"main_show_input_wrapper\"\n                    // Balance of height \n                    style={slideResult === 'right' ? {height: '329px'} : {height: 'auto'}}\n                >\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\" \n                        ref={slideItem}\n                        style={\n                            slideResult === 'right' \n                            ? {transform: `translateX(-${slideSize+2}px)`}\n                            : {transform: `translateX(-0px)`}\n                        }\n                        >\n\n                        {/* input header */}\n                        <div className=\"show_input_header\">\n                            {/* header text */}\n                                <p>Create Post</p>\n                            {/* btn close */}\n                            <div className=\"btn_close_input\">\n                                {/* close input post */}\n                                <AiFillCloseCircle\n                                    onClick={closeInputPost}\n                                    className=\"icon_close_input\"\n                                />\n                            </div>\n                        </div>\n\n                        {/* feeling status */}\n                        <div className=\"feeling_status\">\n                            <p>{inputProfileName} feeling : <span>{props.data.feelingStatus}</span></p>\n                        </div> \n\n                        {/* input main */}\n                        <div className=\"show_input_main\">\n                            <TextareaAutosize\n                                minRows={fontSizeInput === 'big' ? 6 : 9}\n                                maxRows={15}\n                                className=\"input_textarea\"\n                                placeholder={\n                                  !inputProfileName\n                                    ? \"thinking ?\"\n                                    : `thinking ? ${inputProfileName}`\n                                }\n                                ref={inputPostRef}\n                                onChange={rowCount}\n                                value={props.data.textInputPost}\n                                style={{\n                                  fontSize: fontSizeInput === \"big\" ? \"1.3em\" : \"0.9em\",\n                                }}\n                            />\n                            {/*//! emoji toggle */}\n                            {emojiToggle} {/* small component */}\n                        </div>\n                        {/*//! Show image Input Post */}\n                        <ImageUploading\n                            multiple\n                            value={props.data.imagesPosts}\n                            onChange={handleImageChange}\n                            maxNumber={maxNumber}\n                            dataURLKey=\"data_url\"\n                            acceptType={acceptType}\n                            maxFileSize={4194304}\n                        >\n                            {({\n                                imageList,\n                                onImageUpload,\n                                onImageRemoveAll,\n                                onImageUpdate,\n                                onImageRemove,\n                                isDragging,\n                                dragProps,\n                            }) => (\n                                <>\n                                    <ul className=\"image_input_post\">\n                                        {props.data.imagesPosts.length <= 4 \n                                            ? \n                                            props.data.imagesPosts.map((image, index) => \n                                                <li \n                                                    className=\"li_images\"\n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}\n                                                >\n                                                    <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                                </li>\n                                            )\n                                            : \n                                            props.data.imagesPosts.map((image, index) =>\n                                            <> \n                                                <li \n                                                    className={props.data.imagesPosts.length > 4 ? \"li_images checkLength nPlus5CLose\" : \"li_images\"} \n                                                    key={index} \n                                                    id={index} \n                                                    style={{background: `url(${image.data_url}) no-repeat center/cover`}}>\n                                                        <IoClose onClick={() => onImageRemove(index)} className=\"li_image_close\"/>\n                                                </li>\n                                                {/* image counting and remove all image list */}\n                                                <div onClick={() => setWindowRemoveAllImg(true)} className=\"images_counting\">{`+${props.data.imagesPosts.length - 4}`}</div>\n                                            </>\n                                            )\n                                        }\n                                    </ul>    \n                                    {/*//! input addon wrapper */}\n                                    <div className=\"input_addon_wrapper\">\n                                        {/* image */}\n                                        <span onClick={() => setWindowEmoji(false)}>\n                                            {/* button upload image */}\n                                            <BsImages \n                                                className=\"input_image\"\n                                                onClick={onImageUpload}\n                                                // tooltip\n                                                data-delay-show=\"300\" \n                                                data-effect=\"solid\" \n                                                data-type=\"light\" \n                                                data-tip=\"image\" \n                                                data-border=\"true\"\n                                                data-text-color=\"#000\"\n                                                data-background-color=\"rgb(209, 208, 208, 1)\"\n                                                data-border-color=\"rgb(109, 109, 109)\"\n                                            />\n                                            <ReactTooltip />\n                                        </span>\n                                        {/* feeling */}\n                                        <span>\n                                            {/* button feeling */}\n                                            <RiEmotionLaughLine \n                                                onClick={slideRightFunc}\n                                                className=\"input_feeling\" \n                                                // tootip\n                                                data-delay-show=\"300\" \n                                                data-effect=\"solid\" \n                                                data-type=\"light\" \n                                                data-tip=\"feelings\" \n                                                data-border=\"true\"\n                                                data-text-color=\"#000\"\n                                                data-background-color=\"rgb(209, 208, 208, 1)\"\n                                                data-border-color=\"rgb(109, 109, 109)\"\n                                            />\n                                            <ReactTooltip />\n                                        </span>\n                                    </div>\n                                    {/*//! Window Remove All Images List in window input */}\n                                    <div className={windowRemoveAllImg !== false ? \"removeALl_wrapper show\" : \"removeALl_wrapper close\"}>\n                                        <button onClick={() => { \n                                            onImageRemoveAll() \n                                            setWindowRemoveAllImg(false) \n                                        }}>Remove All</button>\n                                        <button onClick={() => setWindowRemoveAllImg(false)}>cancle</button>\n                                    </div>\n                                    <div className={windowRemoveAllImg !== false ? \"box_removeAll show\" : \"box_removeAll close\"}></div>\n                                </>\n                            )}\n                        </ImageUploading>\n\n                        {/* Post Button */}\n                        <button onClick={addPost}>Post</button>\n\n                    </div>\n\n                    {/*//! Slide Item */}\n                    <div \n                        className=\"slide_item\"\n                        style={\n                            slideResult === 'right' \n                            ? {transform: `translateX(-${slideSize}px)`}\n                            : {transform: `translateX(${slideSize+2}px)`}\n                        }\n                    >\n                        {/*//! Feeling Window Input Post */}\n                        {/* header */}\n                        <div className=\"feeling_header\">\n                            {/* Button Slide Left / Previous */}\n                            <div className=\"feeling_slide_back_wrapper\">\n                                <IoArrowBackOutline\n                                    onClick={slideLeftFunc}\n                                    className=\"feeling_slide_back\"\n                                />\n                            </div>\n                            {/* text header */}\n                            <p className=\"text_header\">Feelings</p>\n                        </div>\n\n                        {/* search feeling */}\n                        <div className=\"search_feeling_wrapper\">\n                            <input \n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                className=\"search_feeling\" \n                                type=\"text\" \n                                placeholder=\"Search\" \n                            />\n                            <BiSearchAlt className=\"search_icon_feeling\"/>\n                        </div>\n\n                        {/* feeling items */} \n                        <ul className=\"feelings_items_wrapper\">\n                            {/* Search filter */}\n                            {feelingItems.filter((value) => {\n                                if(searchTerm === \"\") {\n                                    return value;\n                                } else if (value.feeling_name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                                    return value;\n                                } \n                            }).map((value, key) => {\n                                // console.log(value);\n                                return (\n                                    <li \n                                        className=\"feeling_item\"\n                                        key={key}\n                                        onClick={() => {\n                                            props.dispatch(set_feeling_status(value.feeling_name));\n                                            setSlideResult('left');\n                                        }}\n                                    >   \n                                        <span className=\"feeling_icon\">\n                                            <img src={value.icon} alt=\"feeling-icon\" />\n                                        </span> \n                                        {value.feeling_name}\n                                    </li>\n                                )    \n                                }\n                            )}\n                        </ul>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    )  \n    \n    //* 3 Show List Images Post \n    const ShowListImagePost = (\n        // container\n        <div className={props.data.isWindowListImagesPost \n            ? \"listImagesPost_container show\"\n            : \"listImagesPost_container close\"\n        }>\n            {/* wrapper */}\n            <div className={props.data.isLoadingDeleteOne === true \n                ? \"listImagesPost_wrapper loading\"\n                : \"listImagesPost_wrapper\"\n            }>\n                {/* slide images */}\n                <div className=\"listImagesPost_img-wrapper\">\n                    {props.data.listImagesPost.length !== 0\n                        ?\n                        <div \n                            className=\"listImagesPost_img\"\n                            style={props.data.isDeleteLastImg \n                                ? { background: `url(${props.data.listImagesPost[0].data_url}) no-repeat center/contain`}\n                                : { background: `url(${props.data.listImagesPost[props.data.indexListImages].data_url}) no-repeat center/contain`}\n                            }\n                        >   \n                            {/* button Prev, Next */}\n                            {/* Prev */}\n                            <div \n                                onClick={decrementIndexListImg}\n                                className=\"listImagesPost_btn_Prev-container\">\n                                    <div className=\"listImagesPost_btn_Prev-wrapper\">\n                                        <AiOutlineLeft className=\"listImagesPost_btn-Prev\" />\n                                    </div>\n                            </div>\n                            {/* Next */}\n                            <div \n                                onClick={incrementIndexListImg}\n                                className=\"listImagesPost_btn_Next-container\">\n                                    <div className=\"listImagesPost_btn_Next-wrapper\">\n                                        <AiOutlineRight className=\"listImagesPost_btn-Next\" />\n                                    </div>\n                            </div>\n                            {/* button edit */}\n                            <div \n                                onClick={() => props.dispatch(toggle_window_delete_img())}\n                                className=\"listImagesPost_btn_Edit-wrapper\">\n                                    <HiDotsHorizontal className=\"listImagesPost_btn-Edit\" /> \n                            </div>\n                            {/* window delete Button Edit*/}\n                            <div className={props.data.isWindowDeleteImg === true \n                                ? \"listImagesPost_btn_Edit_window-delete show\"\n                                : \"listImagesPost_btn_Edit_window-delete close\"\n                            }>\n                                {/* button delete, delete all */}\n                                {/* one */}\n                                <button \n                                    onClick={deleteOneListImagesPost}\n                                    className=\"delete_one\">Delete\n                                    </button>\n                                {/* all */}\n                                <button \n                                    onClick={deleteAllListImagesPost}\n                                    className=\"delete_all\">Delete All\n                                </button>\n                                {/* triangle box */}\n                                <div className=\"box_window-delete\"></div>\n                            </div>\n                        </div>\n                        : null\n                    }\n                </div>\n                {/* delete one loading */}\n                {props.data.isLoadingDeleteOne === true \n                    ? <div className=\"deleteOne_loading-icon\"></div>\n                    : null\n                }\n                {/* delete one Success! */}\n                {props.data.isDeleteSuccess\n                    ? \n                    <div className=\"deleteOne_loading-success\">\n                        <p>Delete Success!</p>\n                        <div className=\"deleteOne_loading_icon-success\"></div>\n                    </div>\n                    : null\n                }\n            </div>\n            {/* button close window or exit */}\n            <div \n                onClick={closeWindowListImagesPost}\n                className=\"listImagesPost_btn_Close-wrapper\">\n                    <IoClose className=\"listImagesPost_btn-Close\" />\n            </div>            \n        </div>\n    )\n\n\n\n\n    //! Main Component\n    return (\n        //! App\n        <div className=\"App\">\n            {/* Navbar */}\n            <Navbar \n                getInfoNavbar={getInfoNavbar} \n                getStatusInputPost={getStatusInputPost}\n            />\n            {/* Input */}\n            <Input\n                onClickShowImage={onClickShowImage}\n                inputProfileImg={inputProfileImg}\n                inputProfileName={inputProfileName}\n                getWindowInput={getWindowInput}\n                getUploadImage={getUploadImage}\n                imagesPosts={props.data.imagesPosts}\n                getStatusFeeling={getStatusFeeling}  \n                statusInputMain={statusInputMain}\n                textInputPost={props.data.textInputPost}\n                countTextInputPost={props.data.countTextInputPost}\n            />\n            {/* Post */}\n            {props.data.posts.map((post) => {\n                return(\n                    <PostHasImg \n                    inputProfileImg={inputProfileImg} \n                    inputProfileName={inputProfileName} \n                    onClickShowImage={onClickShowImage} \n                    key={post.idPost}\n                    idPost={post.idPost}\n                    img={post.imagesPosts}\n                    title={post.textInputPost}\n                    setUrlShowImage={setUrlShowImage}\n                    setListImagesPost={setListImagesPost}\n                    openWindowListImagesPost={openWindowListImagesPost}\n                    receiveIdPost={receiveIdPost}\n                    setIndexListImages={setIndexListImages}\n                />\n                ) \n            })}\n\n            {/*//! main show background and image */}\n            {showBackgroundAndImage} {/* small component */}\n          \n            {/* //! main show input */}\n            {showInputPost} {/* small component */}\n          \n            {/*//! Show List Images Post */}\n            {ShowListImagePost} {/* small component */}\n        </div>\n    );\n\n}\n\n//! Map State To Props\nconst mapStateToProps = state => {\n    return {\n        data: state\n    }\n}\n\n\nexport default connect(mapStateToProps)(App)\n","const initialstate = {\r\n    // loading\r\n    isLoadingDeleteOne: false,\r\n    isDeleteSuccess: false,\r\n    // window\r\n    isWindowListImagesPost: false,\r\n    isWindowDeleteImg: false,\r\n    isWindowInputPost: false,\r\n    // delete last img\r\n    isDeleteLastImg: false,\r\n    // index list images\r\n    indexListImages: 0,\r\n    // list images post\r\n    listImagesPost: [],\r\n    listImageDeleted: [],\r\n    // posts\r\n    posts: [],\r\n    textInputPost: '',\r\n    imagesPosts: [],\r\n    countTextInputPost: 0,\r\n    feelingStatus: \"?\",\r\n    idPostShowing: 0\r\n}\r\n\r\nconst asyncDeleteImgOnWindowReducer = (state = initialstate, action) => {\r\n    switch(action.type) {\r\n        // Delete Last Image\r\n        case \"DELETE_LAST_IMG\":\r\n            return Object.assign({}, state, {\r\n                isDeleteLastImg: true\r\n            })\r\n        // Loading Delete One\r\n        case \"LOADING_DELETE_ONE\":\r\n            return Object.assign({}, state, {\r\n                isLoadingDeleteOne: true,\r\n                isWindowDeleteImg: false\r\n            })\r\n        // Loading Delete Success\r\n        case \"LOADING_DELETE_ONE_SUCCESS\":\r\n            return Object.assign({}, state, {\r\n                isDeleteSuccess: true, \r\n                isLoadingDeleteOne: false,\r\n                isDeleteLastImg: false,\r\n            })\r\n        // Loading Delete Last Image Success\r\n        case \"LOADING_DELETE_LAST_IMG_SUCCESS\":\r\n            return Object.assign({}, state, {\r\n                isDeleteSuccess: true, \r\n                isLoadingDeleteOne: false,\r\n                isDeleteLastImg: false,\r\n                indexListImages: state.indexListImages - 1\r\n            })\r\n        // Toggle Window Delete Image\r\n        case \"TOGGLE_WINDOW_DELETE_IMG\":\r\n            if(action.status === 'close') {\r\n                return Object.assign({}, state, {\r\n                    isWindowDeleteImg: false\r\n                })\r\n            } else {\r\n                return Object.assign({}, state, {\r\n                    isWindowDeleteImg: !state.isWindowDeleteImg\r\n                })\r\n            }\r\n        // Index List Images { increment, decrement }\r\n        // Increment +\r\n        case \"INCREMENT_INDEX_LIST_IMAGES\":\r\n            if(action.indexIncrement === 'lastIndex') {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: 0\r\n                })\r\n            }\r\n            else if(action.indexIncrement === 'next') {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: state.indexListImages + 1\r\n                })\r\n            }\r\n        break;\r\n        // Decrement - \r\n        case \"DECREMENT_INDEX_LIST_IMAGES\":\r\n            if(action.statusDecrementIndex === true) {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: action.indexDecrement\r\n                })\r\n            } else {\r\n                return Object.assign({}, state, {\r\n                    indexListImages: state.indexListImages - 1\r\n                })\r\n            }\r\n        // Set Index List Images\r\n        case \"SET_INDEX_LIST_IMAGES\":\r\n            return Object.assign({}, state, {\r\n                indexListImages: 0\r\n            })\r\n        // Delete Success!\r\n        case \"CLOSE_DELETE_SUCCESS\":\r\n            return Object.assign({}, state, {\r\n                isDeleteSuccess: false\r\n            })\r\n        // Set List Images Post\r\n        case \"SET_LIST_IMAGE_POST\":\r\n            return Object.assign({}, state, {\r\n                listImagesPost: action.listImagesPost\r\n            })\r\n        // Set List Images Deleted\r\n        case \"SET_LIST_IMAGE_DELETED\":\r\n            return Object.assign({}, state, {\r\n                listImageDeleted: action.imgDeleted\r\n            })\r\n        // Toggle window list images post\r\n        case \"TOGGLE_WINDOW_LIST_IMAGES_POST\":\r\n            return Object.assign({}, state, {\r\n                isWindowListImagesPost: !state.isWindowListImagesPost,\r\n                isWindowDeleteImg: false\r\n            })\r\n        // ( delete all ) set list images post \r\n        case \"SET_LIST_IMAGES_DELETEALL\":\r\n            return Object.assign({}, state, {\r\n                listImagesPost: []\r\n            })\r\n        //! ( Posts ) - Reducer\r\n        // Set Posts\r\n        case \"SET_POSTS\":\r\n            return Object.assign({}, state, {\r\n                posts: action.posts\r\n            })\r\n        // Set Text Input Post\r\n        case \"SET_TEXT_INPUT_POST\":\r\n            return Object.assign({}, state, {\r\n                textInputPost: action.textInputPost\r\n            })\r\n        // Set Images Posts\r\n        case \"SET_IMAGES_POSTS\":\r\n            return Object.assign({}, state, {\r\n                imagesPosts: action.imagesPosts\r\n            })\r\n        // Set Count Text Input Post \r\n        case \"SET_COUNT_TEXT_INPUT_POST\":\r\n            return Object.assign({}, state, {\r\n                countTextInputPost: action.countTextInputPost\r\n            })\r\n        // Set Feeling Status\r\n        case \"SET_FEELING_STATUS\":\r\n            return Object.assign({}, state, {\r\n                feelingStatus: action.feelingStatus\r\n            })\r\n        case \"SET_IDPOST_SHOWING\":\r\n            return Object.assign({}, state, {\r\n                idPostShowing: action.idPostShowing\r\n            })\r\n        //! ( End ) - Posts \r\n        // Toggle Window Input Post\r\n        case \"TOGGLE_WINDOW_INPUT_POST\":\r\n            if(action.statusWindowInputPost === true) {\r\n                return Object.assign({}, state, {\r\n                    isWindowInputPost: true\r\n                })        \r\n            }\r\n            if(action.statusWindowInputPost === false) {\r\n                return Object.assign({}, state, {\r\n                    isWindowInputPost: false\r\n                })        \r\n            }\r\n            if(action.statusWindowInputPost === 'toggle') {\r\n                return Object.assign({}, state, {\r\n                    isWindowInputPost: !state.isWindowInputPost\r\n                })        \r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default asyncDeleteImgOnWindowReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//! React Alert Message\nimport { positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n// redux\nimport {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {Provider} from 'react-redux'\nimport asyncDeleteImgOnWindowReducer from './reducers/deleteImgOne'\n\n\n//! Variable\n// config alert message\nconst options = {\n  timeout: 3000,\n  position: positions.TOP_CENTER\n};\n\n//! Redux Store\nconst store = createStore(asyncDeleteImgOnWindowReducer, applyMiddleware(thunk));\nexport default store;\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <Provider store={store}>\n            <AlertProvider  template={AlertTemplate} {...options}>\n                    <App />\n            </AlertProvider>\n        </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}